node {
  name: "global_step/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "global_step"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "global_step"
    }
  }
}
node {
  name: "global_step/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "global_step"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/Assign"
  op: "AssignVariableOp"
  input: "global_step"
  input: "global_step/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "global_step/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "global_step"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "global_step/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "global_step"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/Switch"
  op: "Switch"
  input: "global_step/VarIsInitializedOp"
  input: "global_step/VarIsInitializedOp"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/switch_t"
  op: "Identity"
  input: "global_step/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/switch_f"
  op: "Identity"
  input: "global_step/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/pred_id"
  op: "Identity"
  input: "global_step/VarIsInitializedOp"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "global_step/cond/Read/ReadVariableOp/Switch:1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "global_step/cond/Read/ReadVariableOp/Switch"
  op: "Switch"
  input: "global_step"
  input: "global_step/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/Identity"
  op: "Identity"
  input: "global_step/cond/Read/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/Switch_1"
  op: "Switch"
  input: "global_step/Initializer/zeros"
  input: "global_step/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/Merge"
  op: "Merge"
  input: "global_step/cond/Switch_1"
  input: "global_step/cond/Identity"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/add/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "global_step/add"
  op: "AddV2"
  input: "global_step/cond/Merge"
  input: "global_step/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 2
          }
        }
        string_val: "gs://credit_card_default/credit_default/preproc/train.csv-00000-of-00002"
        string_val: "gs://credit_card_default/credit_default/preproc/train.csv-00001-of-00002"
      }
    }
  }
}
node {
  name: "flat_filenames/shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "flat_filenames"
  op: "Reshape"
  input: "Const"
  input: "flat_filenames/shape"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "TensorSliceDataset"
  op: "TensorSliceDataset"
  input: "flat_filenames"
  device: "/device:CPU:0"
  attr {
    key: "Toutput_types"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "FlatMapDataset"
  op: "FlatMapDataset"
  input: "TensorSliceDataset"
  device: "/device:CPU:0"
  attr {
    key: "Targuments"
    value {
      list {
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "f"
    value {
      func {
        name: "__inference_Dataset_flat_map_read_one_file_31"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_STRING
      }
    }
  }
}
node {
  name: "MapDataset"
  op: "MapDataset"
  input: "FlatMapDataset"
  device: "/device:CPU:0"
  attr {
    key: "Targuments"
    value {
      list {
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "f"
    value {
      func {
        name: "__inference_Dataset_map_decode_csv_110"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_STRING
        type: DT_FLOAT
        type: DT_STRING
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_STRING
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "preserve_cardinality"
    value {
      b: false
    }
  }
  attr {
    key: "use_inter_op_parallelism"
    value {
      b: true
    }
  }
}
node {
  name: "buffer_size"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 2560
      }
    }
  }
}
node {
  name: "seed"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "seed2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "ShuffleDataset"
  op: "ShuffleDataset"
  input: "MapDataset"
  input: "buffer_size"
  input: "seed"
  input: "seed2"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_STRING
        type: DT_FLOAT
        type: DT_STRING
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_STRING
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "reshuffle_each_iteration"
    value {
      b: true
    }
  }
}
node {
  name: "count"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: -1
      }
    }
  }
}
node {
  name: "RepeatDataset"
  op: "RepeatDataset"
  input: "ShuffleDataset"
  input: "count"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_STRING
        type: DT_FLOAT
        type: DT_STRING
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_STRING
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
}
node {
  name: "batch_size"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 256
      }
    }
  }
}
node {
  name: "drop_remainder"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_BOOL
        tensor_shape {
        }
        bool_val: false
      }
    }
  }
}
node {
  name: "BatchDatasetV2"
  op: "BatchDatasetV2"
  input: "RepeatDataset"
  input: "batch_size"
  input: "drop_remainder"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_STRING
        type: DT_FLOAT
        type: DT_STRING
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_STRING
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "parallel_copy"
    value {
      b: false
    }
  }
}
node {
  name: "OneShotIterator"
  op: "OneShotIterator"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dataset_factory"
    value {
      func {
        name: "_make_dataset_zc0X1Dh0vfA"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_STRING
        type: DT_FLOAT
        type: DT_STRING
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_STRING
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "IteratorToStringHandle"
  op: "IteratorToStringHandle"
  input: "OneShotIterator"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "IteratorGetNext"
  op: "IteratorGetNext"
  input: "OneShotIterator"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_STRING
        type: DT_FLOAT
        type: DT_STRING
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_STRING
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
}
node {
  name: "boosted_trees"
  op: "BoostedTreesEnsembleResourceHandleOp"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "boosted_trees/"
    }
  }
}
node {
  name: "boosted_trees/BoostedTreesCreateEnsemble/stamp_token"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "boosted_trees/BoostedTreesCreateEnsemble/tree_ensemble_serialized"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "boosted_trees/BoostedTreesCreateEnsemble"
  op: "BoostedTreesCreateEnsemble"
  input: "boosted_trees"
  input: "boosted_trees/BoostedTreesCreateEnsemble/stamp_token"
  input: "boosted_trees/BoostedTreesCreateEnsemble/tree_ensemble_serialized"
}
node {
  name: "boosted_trees/IsBoostedTreesEnsembleInitialized"
  op: "IsBoostedTreesEnsembleInitialized"
  input: "boosted_trees"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "boosted_trees/BoostedTreesSerializeEnsemble"
  op: "BoostedTreesSerializeEnsemble"
  input: "boosted_trees"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "boosted_trees/QuantileAccumulator"
  op: "BoostedTreesQuantileStreamResourceHandleOp"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "boosted_trees/QuantileAccumulator/"
    }
  }
}
node {
  name: "boosted_trees/QuantileAccumulator/BoostedTreesCreateQuantileStreamResource/epsilon"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.009999999776482582
      }
    }
  }
}
node {
  name: "boosted_trees/QuantileAccumulator/BoostedTreesCreateQuantileStreamResource/num_streams"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 20
      }
    }
  }
}
node {
  name: "boosted_trees/QuantileAccumulator/BoostedTreesCreateQuantileStreamResource"
  op: "BoostedTreesCreateQuantileStreamResource"
  input: "boosted_trees/QuantileAccumulator"
  input: "boosted_trees/QuantileAccumulator/BoostedTreesCreateQuantileStreamResource/epsilon"
  input: "boosted_trees/QuantileAccumulator/BoostedTreesCreateQuantileStreamResource/num_streams"
  attr {
    key: "max_elements"
    value {
      i: 1099511627776
    }
  }
}
node {
  name: "boosted_trees/QuantileAccumulator/IsBoostedTreesQuantileStreamResourceInitialized"
  op: "IsBoostedTreesQuantileStreamResourceInitialized"
  input: "boosted_trees/QuantileAccumulator"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "boosted_trees/BoostedTreesQuantileStreamResourceGetBucketBoundaries"
  op: "BoostedTreesQuantileStreamResourceGetBucketBoundaries"
  input: "boosted_trees/QuantileAccumulator"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "num_features"
    value {
      i: 20
    }
  }
}
node {
  name: "boosted_trees/BoostedTreesQuantileStreamResourceGetBucketBoundaries_1"
  op: "BoostedTreesQuantileStreamResourceGetBucketBoundaries"
  input: "boosted_trees/QuantileAccumulator"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "num_features"
    value {
      i: 20
    }
  }
}
node {
  name: "boosted_trees/NoOp"
  op: "NoOp"
}
node {
  name: "boosted_trees/are_boundaries_ready/Initializer/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@boosted_trees/are_boundaries_ready"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_BOOL
        tensor_shape {
        }
        bool_val: false
      }
    }
  }
}
node {
  name: "boosted_trees/are_boundaries_ready"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@boosted_trees/are_boundaries_ready"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "boosted_trees/are_boundaries_ready"
    }
  }
}
node {
  name: "boosted_trees/are_boundaries_ready/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "boosted_trees/are_boundaries_ready"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "boosted_trees/are_boundaries_ready/Assign"
  op: "AssignVariableOp"
  input: "boosted_trees/are_boundaries_ready"
  input: "boosted_trees/are_boundaries_ready/Initializer/initial_value"
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "boosted_trees/are_boundaries_ready/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "boosted_trees/are_boundaries_ready"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "boosted_trees/transform_features/AGE/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "boosted_trees/transform_features/AGE/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext"
  input: "boosted_trees/transform_features/AGE/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "boosted_trees/transform_features/BILL_AMT1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "boosted_trees/transform_features/BILL_AMT1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:1"
  input: "boosted_trees/transform_features/BILL_AMT1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "boosted_trees/transform_features/BILL_AMT2/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "boosted_trees/transform_features/BILL_AMT2/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:2"
  input: "boosted_trees/transform_features/BILL_AMT2/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "boosted_trees/transform_features/BILL_AMT3/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "boosted_trees/transform_features/BILL_AMT3/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:3"
  input: "boosted_trees/transform_features/BILL_AMT3/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "boosted_trees/transform_features/BILL_AMT4/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "boosted_trees/transform_features/BILL_AMT4/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:4"
  input: "boosted_trees/transform_features/BILL_AMT4/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "boosted_trees/transform_features/BILL_AMT5/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "boosted_trees/transform_features/BILL_AMT5/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:5"
  input: "boosted_trees/transform_features/BILL_AMT5/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "boosted_trees/transform_features/BILL_AMT6/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "boosted_trees/transform_features/BILL_AMT6/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:6"
  input: "boosted_trees/transform_features/BILL_AMT6/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "boosted_trees/transform_features/EDUCATION_indicator/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "boosted_trees/transform_features/EDUCATION_indicator/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:7"
  input: "boosted_trees/transform_features/EDUCATION_indicator/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "boosted_trees/transform_features/EDUCATION_indicator/to_sparse_input/ignore_value/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "boosted_trees/transform_features/EDUCATION_indicator/to_sparse_input/NotEqual"
  op: "NotEqual"
  input: "boosted_trees/transform_features/EDUCATION_indicator/ExpandDims"
  input: "boosted_trees/transform_features/EDUCATION_indicator/to_sparse_input/ignore_value/x"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "incompatible_shape_error"
    value {
      b: true
    }
  }
}
node {
  name: "boosted_trees/transform_features/EDUCATION_indicator/to_sparse_input/indices"
  op: "Where"
  input: "boosted_trees/transform_features/EDUCATION_indicator/to_sparse_input/NotEqual"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "boosted_trees/transform_features/EDUCATION_indicator/to_sparse_input/values"
  op: "GatherNd"
  input: "boosted_trees/transform_features/EDUCATION_indicator/ExpandDims"
  input: "boosted_trees/transform_features/EDUCATION_indicator/to_sparse_input/indices"
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "boosted_trees/transform_features/EDUCATION_indicator/to_sparse_input/dense_shape"
  op: "Shape"
  input: "boosted_trees/transform_features/EDUCATION_indicator/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "boosted_trees/transform_features/EDUCATION_indicator/EDUCATION_lookup/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 6
          }
        }
        string_val: "Graduate"
        string_val: "University"
        string_val: "High-school"
        string_val: "Others"
        string_val: "Unknown1"
        string_val: "Unknown2"
      }
    }
  }
}
node {
  name: "boosted_trees/transform_features/EDUCATION_indicator/EDUCATION_lookup/Size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 6
      }
    }
  }
}
node {
  name: "boosted_trees/transform_features/EDUCATION_indicator/EDUCATION_lookup/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "boosted_trees/transform_features/EDUCATION_indicator/EDUCATION_lookup/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "boosted_trees/transform_features/EDUCATION_indicator/EDUCATION_lookup/range"
  op: "Range"
  input: "boosted_trees/transform_features/EDUCATION_indicator/EDUCATION_lookup/range/start"
  input: "boosted_trees/transform_features/EDUCATION_indicator/EDUCATION_lookup/Size"
  input: "boosted_trees/transform_features/EDUCATION_indicator/EDUCATION_lookup/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "boosted_trees/transform_features/EDUCATION_indicator/EDUCATION_lookup/Cast"
  op: "Cast"
  input: "boosted_trees/transform_features/EDUCATION_indicator/EDUCATION_lookup/range"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "boosted_trees/transform_features/EDUCATION_indicator/EDUCATION_lookup/hash_table/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: -1
      }
    }
  }
}
node {
  name: "boosted_trees/transform_features/EDUCATION_indicator/EDUCATION_lookup/hash_table/hash_table"
  op: "HashTableV2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "key_dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "hash_table_624e3a62-5312-49ee-bfa7-8e2181fd3c10"
    }
  }
  attr {
    key: "use_node_name_sharing"
    value {
      b: false
    }
  }
  attr {
    key: "value_dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "boosted_trees/transform_features/EDUCATION_indicator/EDUCATION_lookup/hash_table/table_init/LookupTableImportV2"
  op: "LookupTableImportV2"
  input: "boosted_trees/transform_features/EDUCATION_indicator/EDUCATION_lookup/hash_table/hash_table"
  input: "boosted_trees/transform_features/EDUCATION_indicator/EDUCATION_lookup/Const"
  input: "boosted_trees/transform_features/EDUCATION_indicator/EDUCATION_lookup/Cast"
  attr {
    key: "Tin"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tout"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "boosted_trees/transform_features/EDUCATION_indicator/hash_table_Lookup/LookupTableFindV2"
  op: "LookupTableFindV2"
  input: "boosted_trees/transform_features/EDUCATION_indicator/EDUCATION_lookup/hash_table/hash_table"
  input: "boosted_trees/transform_features/EDUCATION_indicator/to_sparse_input/values"
  input: "boosted_trees/transform_features/EDUCATION_indicator/EDUCATION_lookup/hash_table/Const"
  attr {
    key: "Tin"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tout"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "boosted_trees/transform_features/EDUCATION_indicator/SparseToDense/default_value"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: -1
      }
    }
  }
}
node {
  name: "boosted_trees/transform_features/EDUCATION_indicator/SparseToDense"
  op: "SparseToDense"
  input: "boosted_trees/transform_features/EDUCATION_indicator/to_sparse_input/indices"
  input: "boosted_trees/transform_features/EDUCATION_indicator/to_sparse_input/dense_shape"
  input: "boosted_trees/transform_features/EDUCATION_indicator/hash_table_Lookup/LookupTableFindV2"
  input: "boosted_trees/transform_features/EDUCATION_indicator/SparseToDense/default_value"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "boosted_trees/transform_features/EDUCATION_indicator/one_hot/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "boosted_trees/transform_features/EDUCATION_indicator/one_hot/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "boosted_trees/transform_features/EDUCATION_indicator/one_hot/depth"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 6
      }
    }
  }
}
node {
  name: "boosted_trees/transform_features/EDUCATION_indicator/one_hot/on_value"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "boosted_trees/transform_features/EDUCATION_indicator/one_hot/off_value"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "boosted_trees/transform_features/EDUCATION_indicator/one_hot"
  op: "OneHot"
  input: "boosted_trees/transform_features/EDUCATION_indicator/SparseToDense"
  input: "boosted_trees/transform_features/EDUCATION_indicator/one_hot/depth"
  input: "boosted_trees/transform_features/EDUCATION_indicator/one_hot/on_value"
  input: "boosted_trees/transform_features/EDUCATION_indicator/one_hot/off_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "TI"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: -1
    }
  }
}
node {
  name: "boosted_trees/transform_features/EDUCATION_indicator/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -2
      }
    }
  }
}
node {
  name: "boosted_trees/transform_features/EDUCATION_indicator/Sum"
  op: "Sum"
  input: "boosted_trees/transform_features/EDUCATION_indicator/one_hot"
  input: "boosted_trees/transform_features/EDUCATION_indicator/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "boosted_trees/transform_features/LIMIT_BAL/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "boosted_trees/transform_features/LIMIT_BAL/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:8"
  input: "boosted_trees/transform_features/LIMIT_BAL/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "boosted_trees/transform_features/PAY_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "boosted_trees/transform_features/PAY_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:10"
  input: "boosted_trees/transform_features/PAY_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "boosted_trees/transform_features/PAY_2/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "boosted_trees/transform_features/PAY_2/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:11"
  input: "boosted_trees/transform_features/PAY_2/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "boosted_trees/transform_features/PAY_3/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "boosted_trees/transform_features/PAY_3/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:12"
  input: "boosted_trees/transform_features/PAY_3/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "boosted_trees/transform_features/PAY_4/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "boosted_trees/transform_features/PAY_4/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:13"
  input: "boosted_trees/transform_features/PAY_4/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "boosted_trees/transform_features/PAY_5/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "boosted_trees/transform_features/PAY_5/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:14"
  input: "boosted_trees/transform_features/PAY_5/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "boosted_trees/transform_features/PAY_6/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "boosted_trees/transform_features/PAY_6/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:15"
  input: "boosted_trees/transform_features/PAY_6/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "boosted_trees/transform_features/PAY_AMT1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "boosted_trees/transform_features/PAY_AMT1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:16"
  input: "boosted_trees/transform_features/PAY_AMT1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "boosted_trees/transform_features/PAY_AMT2/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "boosted_trees/transform_features/PAY_AMT2/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:17"
  input: "boosted_trees/transform_features/PAY_AMT2/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "boosted_trees/transform_features/PAY_AMT3/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "boosted_trees/transform_features/PAY_AMT3/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:18"
  input: "boosted_trees/transform_features/PAY_AMT3/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "boosted_trees/transform_features/PAY_AMT4/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "boosted_trees/transform_features/PAY_AMT4/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:19"
  input: "boosted_trees/transform_features/PAY_AMT4/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "boosted_trees/transform_features/PAY_AMT5/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "boosted_trees/transform_features/PAY_AMT5/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:20"
  input: "boosted_trees/transform_features/PAY_AMT5/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "boosted_trees/transform_features/PAY_AMT6/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "boosted_trees/transform_features/PAY_AMT6/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:21"
  input: "boosted_trees/transform_features/PAY_AMT6/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "boosted_trees/transform_features/SEX_indicator/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "boosted_trees/transform_features/SEX_indicator/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:22"
  input: "boosted_trees/transform_features/SEX_indicator/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "boosted_trees/transform_features/SEX_indicator/to_sparse_input/ignore_value/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "boosted_trees/transform_features/SEX_indicator/to_sparse_input/NotEqual"
  op: "NotEqual"
  input: "boosted_trees/transform_features/SEX_indicator/ExpandDims"
  input: "boosted_trees/transform_features/SEX_indicator/to_sparse_input/ignore_value/x"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "incompatible_shape_error"
    value {
      b: true
    }
  }
}
node {
  name: "boosted_trees/transform_features/SEX_indicator/to_sparse_input/indices"
  op: "Where"
  input: "boosted_trees/transform_features/SEX_indicator/to_sparse_input/NotEqual"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "boosted_trees/transform_features/SEX_indicator/to_sparse_input/values"
  op: "GatherNd"
  input: "boosted_trees/transform_features/SEX_indicator/ExpandDims"
  input: "boosted_trees/transform_features/SEX_indicator/to_sparse_input/indices"
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "boosted_trees/transform_features/SEX_indicator/to_sparse_input/dense_shape"
  op: "Shape"
  input: "boosted_trees/transform_features/SEX_indicator/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "boosted_trees/transform_features/SEX_indicator/SEX_lookup/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 2
          }
        }
        string_val: "Male"
        string_val: "Female"
      }
    }
  }
}
node {
  name: "boosted_trees/transform_features/SEX_indicator/SEX_lookup/Size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "boosted_trees/transform_features/SEX_indicator/SEX_lookup/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "boosted_trees/transform_features/SEX_indicator/SEX_lookup/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "boosted_trees/transform_features/SEX_indicator/SEX_lookup/range"
  op: "Range"
  input: "boosted_trees/transform_features/SEX_indicator/SEX_lookup/range/start"
  input: "boosted_trees/transform_features/SEX_indicator/SEX_lookup/Size"
  input: "boosted_trees/transform_features/SEX_indicator/SEX_lookup/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "boosted_trees/transform_features/SEX_indicator/SEX_lookup/Cast"
  op: "Cast"
  input: "boosted_trees/transform_features/SEX_indicator/SEX_lookup/range"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "boosted_trees/transform_features/SEX_indicator/SEX_lookup/hash_table/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: -1
      }
    }
  }
}
node {
  name: "boosted_trees/transform_features/SEX_indicator/SEX_lookup/hash_table/hash_table"
  op: "HashTableV2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "key_dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "hash_table_3d89355f-a799-47dc-be32-33bd48d7eff3"
    }
  }
  attr {
    key: "use_node_name_sharing"
    value {
      b: false
    }
  }
  attr {
    key: "value_dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "boosted_trees/transform_features/SEX_indicator/SEX_lookup/hash_table/table_init/LookupTableImportV2"
  op: "LookupTableImportV2"
  input: "boosted_trees/transform_features/SEX_indicator/SEX_lookup/hash_table/hash_table"
  input: "boosted_trees/transform_features/SEX_indicator/SEX_lookup/Const"
  input: "boosted_trees/transform_features/SEX_indicator/SEX_lookup/Cast"
  attr {
    key: "Tin"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tout"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "boosted_trees/transform_features/SEX_indicator/hash_table_Lookup/LookupTableFindV2"
  op: "LookupTableFindV2"
  input: "boosted_trees/transform_features/SEX_indicator/SEX_lookup/hash_table/hash_table"
  input: "boosted_trees/transform_features/SEX_indicator/to_sparse_input/values"
  input: "boosted_trees/transform_features/SEX_indicator/SEX_lookup/hash_table/Const"
  attr {
    key: "Tin"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tout"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "boosted_trees/transform_features/SEX_indicator/SparseToDense/default_value"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: -1
      }
    }
  }
}
node {
  name: "boosted_trees/transform_features/SEX_indicator/SparseToDense"
  op: "SparseToDense"
  input: "boosted_trees/transform_features/SEX_indicator/to_sparse_input/indices"
  input: "boosted_trees/transform_features/SEX_indicator/to_sparse_input/dense_shape"
  input: "boosted_trees/transform_features/SEX_indicator/hash_table_Lookup/LookupTableFindV2"
  input: "boosted_trees/transform_features/SEX_indicator/SparseToDense/default_value"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "boosted_trees/transform_features/SEX_indicator/one_hot/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "boosted_trees/transform_features/SEX_indicator/one_hot/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "boosted_trees/transform_features/SEX_indicator/one_hot/depth"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "boosted_trees/transform_features/SEX_indicator/one_hot/on_value"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "boosted_trees/transform_features/SEX_indicator/one_hot/off_value"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "boosted_trees/transform_features/SEX_indicator/one_hot"
  op: "OneHot"
  input: "boosted_trees/transform_features/SEX_indicator/SparseToDense"
  input: "boosted_trees/transform_features/SEX_indicator/one_hot/depth"
  input: "boosted_trees/transform_features/SEX_indicator/one_hot/on_value"
  input: "boosted_trees/transform_features/SEX_indicator/one_hot/off_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "TI"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: -1
    }
  }
}
node {
  name: "boosted_trees/transform_features/SEX_indicator/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -2
      }
    }
  }
}
node {
  name: "boosted_trees/transform_features/SEX_indicator/Sum"
  op: "Sum"
  input: "boosted_trees/transform_features/SEX_indicator/one_hot"
  input: "boosted_trees/transform_features/SEX_indicator/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "boosted_trees/unstack"
  op: "Unpack"
  input: "boosted_trees/transform_features/AGE/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 1
    }
  }
  attr {
    key: "num"
    value {
      i: 1
    }
  }
}
node {
  name: "boosted_trees/BoostedTreesBucketize"
  op: "BoostedTreesBucketize"
  input: "boosted_trees/unstack"
  input: "boosted_trees/BoostedTreesQuantileStreamResourceGetBucketBoundaries_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "num_features"
    value {
      i: 1
    }
  }
}
node {
  name: "boosted_trees/unstack_1"
  op: "Unpack"
  input: "boosted_trees/transform_features/BILL_AMT1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 1
    }
  }
  attr {
    key: "num"
    value {
      i: 1
    }
  }
}
node {
  name: "boosted_trees/BoostedTreesBucketize_1"
  op: "BoostedTreesBucketize"
  input: "boosted_trees/unstack_1"
  input: "boosted_trees/BoostedTreesQuantileStreamResourceGetBucketBoundaries_1:1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "num_features"
    value {
      i: 1
    }
  }
}
node {
  name: "boosted_trees/unstack_2"
  op: "Unpack"
  input: "boosted_trees/transform_features/BILL_AMT2/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 1
    }
  }
  attr {
    key: "num"
    value {
      i: 1
    }
  }
}
node {
  name: "boosted_trees/BoostedTreesBucketize_2"
  op: "BoostedTreesBucketize"
  input: "boosted_trees/unstack_2"
  input: "boosted_trees/BoostedTreesQuantileStreamResourceGetBucketBoundaries_1:2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "num_features"
    value {
      i: 1
    }
  }
}
node {
  name: "boosted_trees/unstack_3"
  op: "Unpack"
  input: "boosted_trees/transform_features/BILL_AMT3/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 1
    }
  }
  attr {
    key: "num"
    value {
      i: 1
    }
  }
}
node {
  name: "boosted_trees/BoostedTreesBucketize_3"
  op: "BoostedTreesBucketize"
  input: "boosted_trees/unstack_3"
  input: "boosted_trees/BoostedTreesQuantileStreamResourceGetBucketBoundaries_1:3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "num_features"
    value {
      i: 1
    }
  }
}
node {
  name: "boosted_trees/unstack_4"
  op: "Unpack"
  input: "boosted_trees/transform_features/BILL_AMT4/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 1
    }
  }
  attr {
    key: "num"
    value {
      i: 1
    }
  }
}
node {
  name: "boosted_trees/BoostedTreesBucketize_4"
  op: "BoostedTreesBucketize"
  input: "boosted_trees/unstack_4"
  input: "boosted_trees/BoostedTreesQuantileStreamResourceGetBucketBoundaries_1:4"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "num_features"
    value {
      i: 1
    }
  }
}
node {
  name: "boosted_trees/unstack_5"
  op: "Unpack"
  input: "boosted_trees/transform_features/BILL_AMT5/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 1
    }
  }
  attr {
    key: "num"
    value {
      i: 1
    }
  }
}
node {
  name: "boosted_trees/BoostedTreesBucketize_5"
  op: "BoostedTreesBucketize"
  input: "boosted_trees/unstack_5"
  input: "boosted_trees/BoostedTreesQuantileStreamResourceGetBucketBoundaries_1:5"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "num_features"
    value {
      i: 1
    }
  }
}
node {
  name: "boosted_trees/unstack_6"
  op: "Unpack"
  input: "boosted_trees/transform_features/BILL_AMT6/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 1
    }
  }
  attr {
    key: "num"
    value {
      i: 1
    }
  }
}
node {
  name: "boosted_trees/BoostedTreesBucketize_6"
  op: "BoostedTreesBucketize"
  input: "boosted_trees/unstack_6"
  input: "boosted_trees/BoostedTreesQuantileStreamResourceGetBucketBoundaries_1:6"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "num_features"
    value {
      i: 1
    }
  }
}
node {
  name: "boosted_trees/ToInt32"
  op: "Cast"
  input: "boosted_trees/transform_features/EDUCATION_indicator/Sum"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "boosted_trees/unstack_7"
  op: "Unpack"
  input: "boosted_trees/ToInt32"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 1
    }
  }
  attr {
    key: "num"
    value {
      i: 6
    }
  }
}
node {
  name: "boosted_trees/unstack_8"
  op: "Unpack"
  input: "boosted_trees/transform_features/LIMIT_BAL/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 1
    }
  }
  attr {
    key: "num"
    value {
      i: 1
    }
  }
}
node {
  name: "boosted_trees/BoostedTreesBucketize_7"
  op: "BoostedTreesBucketize"
  input: "boosted_trees/unstack_8"
  input: "boosted_trees/BoostedTreesQuantileStreamResourceGetBucketBoundaries_1:7"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "num_features"
    value {
      i: 1
    }
  }
}
node {
  name: "boosted_trees/unstack_9"
  op: "Unpack"
  input: "boosted_trees/transform_features/PAY_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 1
    }
  }
  attr {
    key: "num"
    value {
      i: 1
    }
  }
}
node {
  name: "boosted_trees/BoostedTreesBucketize_8"
  op: "BoostedTreesBucketize"
  input: "boosted_trees/unstack_9"
  input: "boosted_trees/BoostedTreesQuantileStreamResourceGetBucketBoundaries_1:8"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "num_features"
    value {
      i: 1
    }
  }
}
node {
  name: "boosted_trees/unstack_10"
  op: "Unpack"
  input: "boosted_trees/transform_features/PAY_2/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 1
    }
  }
  attr {
    key: "num"
    value {
      i: 1
    }
  }
}
node {
  name: "boosted_trees/BoostedTreesBucketize_9"
  op: "BoostedTreesBucketize"
  input: "boosted_trees/unstack_10"
  input: "boosted_trees/BoostedTreesQuantileStreamResourceGetBucketBoundaries_1:9"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "num_features"
    value {
      i: 1
    }
  }
}
node {
  name: "boosted_trees/unstack_11"
  op: "Unpack"
  input: "boosted_trees/transform_features/PAY_3/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 1
    }
  }
  attr {
    key: "num"
    value {
      i: 1
    }
  }
}
node {
  name: "boosted_trees/BoostedTreesBucketize_10"
  op: "BoostedTreesBucketize"
  input: "boosted_trees/unstack_11"
  input: "boosted_trees/BoostedTreesQuantileStreamResourceGetBucketBoundaries_1:10"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "num_features"
    value {
      i: 1
    }
  }
}
node {
  name: "boosted_trees/unstack_12"
  op: "Unpack"
  input: "boosted_trees/transform_features/PAY_4/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 1
    }
  }
  attr {
    key: "num"
    value {
      i: 1
    }
  }
}
node {
  name: "boosted_trees/BoostedTreesBucketize_11"
  op: "BoostedTreesBucketize"
  input: "boosted_trees/unstack_12"
  input: "boosted_trees/BoostedTreesQuantileStreamResourceGetBucketBoundaries_1:11"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "num_features"
    value {
      i: 1
    }
  }
}
node {
  name: "boosted_trees/unstack_13"
  op: "Unpack"
  input: "boosted_trees/transform_features/PAY_5/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 1
    }
  }
  attr {
    key: "num"
    value {
      i: 1
    }
  }
}
node {
  name: "boosted_trees/BoostedTreesBucketize_12"
  op: "BoostedTreesBucketize"
  input: "boosted_trees/unstack_13"
  input: "boosted_trees/BoostedTreesQuantileStreamResourceGetBucketBoundaries_1:12"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "num_features"
    value {
      i: 1
    }
  }
}
node {
  name: "boosted_trees/unstack_14"
  op: "Unpack"
  input: "boosted_trees/transform_features/PAY_6/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 1
    }
  }
  attr {
    key: "num"
    value {
      i: 1
    }
  }
}
node {
  name: "boosted_trees/BoostedTreesBucketize_13"
  op: "BoostedTreesBucketize"
  input: "boosted_trees/unstack_14"
  input: "boosted_trees/BoostedTreesQuantileStreamResourceGetBucketBoundaries_1:13"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "num_features"
    value {
      i: 1
    }
  }
}
node {
  name: "boosted_trees/unstack_15"
  op: "Unpack"
  input: "boosted_trees/transform_features/PAY_AMT1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 1
    }
  }
  attr {
    key: "num"
    value {
      i: 1
    }
  }
}
node {
  name: "boosted_trees/BoostedTreesBucketize_14"
  op: "BoostedTreesBucketize"
  input: "boosted_trees/unstack_15"
  input: "boosted_trees/BoostedTreesQuantileStreamResourceGetBucketBoundaries_1:14"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "num_features"
    value {
      i: 1
    }
  }
}
node {
  name: "boosted_trees/unstack_16"
  op: "Unpack"
  input: "boosted_trees/transform_features/PAY_AMT2/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 1
    }
  }
  attr {
    key: "num"
    value {
      i: 1
    }
  }
}
node {
  name: "boosted_trees/BoostedTreesBucketize_15"
  op: "BoostedTreesBucketize"
  input: "boosted_trees/unstack_16"
  input: "boosted_trees/BoostedTreesQuantileStreamResourceGetBucketBoundaries_1:15"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "num_features"
    value {
      i: 1
    }
  }
}
node {
  name: "boosted_trees/unstack_17"
  op: "Unpack"
  input: "boosted_trees/transform_features/PAY_AMT3/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 1
    }
  }
  attr {
    key: "num"
    value {
      i: 1
    }
  }
}
node {
  name: "boosted_trees/BoostedTreesBucketize_16"
  op: "BoostedTreesBucketize"
  input: "boosted_trees/unstack_17"
  input: "boosted_trees/BoostedTreesQuantileStreamResourceGetBucketBoundaries_1:16"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "num_features"
    value {
      i: 1
    }
  }
}
node {
  name: "boosted_trees/unstack_18"
  op: "Unpack"
  input: "boosted_trees/transform_features/PAY_AMT4/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 1
    }
  }
  attr {
    key: "num"
    value {
      i: 1
    }
  }
}
node {
  name: "boosted_trees/BoostedTreesBucketize_17"
  op: "BoostedTreesBucketize"
  input: "boosted_trees/unstack_18"
  input: "boosted_trees/BoostedTreesQuantileStreamResourceGetBucketBoundaries_1:17"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "num_features"
    value {
      i: 1
    }
  }
}
node {
  name: "boosted_trees/unstack_19"
  op: "Unpack"
  input: "boosted_trees/transform_features/PAY_AMT5/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 1
    }
  }
  attr {
    key: "num"
    value {
      i: 1
    }
  }
}
node {
  name: "boosted_trees/BoostedTreesBucketize_18"
  op: "BoostedTreesBucketize"
  input: "boosted_trees/unstack_19"
  input: "boosted_trees/BoostedTreesQuantileStreamResourceGetBucketBoundaries_1:18"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "num_features"
    value {
      i: 1
    }
  }
}
node {
  name: "boosted_trees/unstack_20"
  op: "Unpack"
  input: "boosted_trees/transform_features/PAY_AMT6/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 1
    }
  }
  attr {
    key: "num"
    value {
      i: 1
    }
  }
}
node {
  name: "boosted_trees/BoostedTreesBucketize_19"
  op: "BoostedTreesBucketize"
  input: "boosted_trees/unstack_20"
  input: "boosted_trees/BoostedTreesQuantileStreamResourceGetBucketBoundaries_1:19"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "num_features"
    value {
      i: 1
    }
  }
}
node {
  name: "boosted_trees/ToInt32_1"
  op: "Cast"
  input: "boosted_trees/transform_features/SEX_indicator/Sum"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "boosted_trees/unstack_21"
  op: "Unpack"
  input: "boosted_trees/ToInt32_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 1
    }
  }
  attr {
    key: "num"
    value {
      i: 2
    }
  }
}
node {
  name: "boosted_trees/Shape"
  op: "Shape"
  input: "IteratorGetNext:24"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "boosted_trees/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "boosted_trees/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "boosted_trees/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "boosted_trees/strided_slice"
  op: "StridedSlice"
  input: "boosted_trees/Shape"
  input: "boosted_trees/strided_slice/stack"
  input: "boosted_trees/strided_slice/stack_1"
  input: "boosted_trees/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "boosted_trees/zeros/Less/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1000
      }
    }
  }
}
node {
  name: "boosted_trees/zeros/Less"
  op: "Less"
  input: "boosted_trees/strided_slice"
  input: "boosted_trees/zeros/Less/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "boosted_trees/zeros/packed"
  op: "Pack"
  input: "boosted_trees/strided_slice"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "boosted_trees/zeros/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "boosted_trees/zeros"
  op: "Fill"
  input: "boosted_trees/zeros/packed"
  input: "boosted_trees/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "boosted_trees/ones/Less/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1000
      }
    }
  }
}
node {
  name: "boosted_trees/ones/Less"
  op: "Less"
  input: "boosted_trees/strided_slice"
  input: "boosted_trees/ones/Less/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "boosted_trees/ones/packed"
  op: "Pack"
  input: "boosted_trees/strided_slice"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "boosted_trees/ones/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "boosted_trees/ones"
  op: "Fill"
  input: "boosted_trees/ones/packed"
  input: "boosted_trees/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "boosted_trees/mul/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "boosted_trees/mul"
  op: "Mul"
  input: "boosted_trees/mul/x"
  input: "boosted_trees/ones"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "boosted_trees/zeros_1/mul/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "boosted_trees/zeros_1/mul"
  op: "Mul"
  input: "boosted_trees/strided_slice"
  input: "boosted_trees/zeros_1/mul/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "boosted_trees/zeros_1/Less/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1000
      }
    }
  }
}
node {
  name: "boosted_trees/zeros_1/Less"
  op: "Less"
  input: "boosted_trees/zeros_1/mul"
  input: "boosted_trees/zeros_1/Less/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "boosted_trees/zeros_1/packed/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "boosted_trees/zeros_1/packed"
  op: "Pack"
  input: "boosted_trees/strided_slice"
  input: "boosted_trees/zeros_1/packed/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "boosted_trees/zeros_1/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "boosted_trees/zeros_1"
  op: "Fill"
  input: "boosted_trees/zeros_1/packed"
  input: "boosted_trees/zeros_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "boosted_trees/NoOp_1"
  op: "NoOp"
}
node {
  name: "boosted_trees/BoostedTreesGetEnsembleStates"
  op: "BoostedTreesGetEnsembleStates"
  input: "boosted_trees"
  input: "^boosted_trees/NoOp_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "boosted_trees/stamp_token"
  op: "Identity"
  input: "boosted_trees/BoostedTreesGetEnsembleStates"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "boosted_trees/num_trees"
  op: "Identity"
  input: "boosted_trees/BoostedTreesGetEnsembleStates:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "boosted_trees/num_finalized_trees"
  op: "Identity"
  input: "boosted_trees/BoostedTreesGetEnsembleStates:2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "boosted_trees/num_attempted_layers"
  op: "Identity"
  input: "boosted_trees/BoostedTreesGetEnsembleStates:3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "boosted_trees/last_layer_nodes_range"
  op: "Identity"
  input: "boosted_trees/BoostedTreesGetEnsembleStates:4"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "boosted_trees/BoostedTreesTrainingPredict"
  op: "BoostedTreesTrainingPredict"
  input: "boosted_trees"
  input: "boosted_trees/zeros"
  input: "boosted_trees/mul"
  input: "boosted_trees/BoostedTreesBucketize"
  input: "boosted_trees/BoostedTreesBucketize_1"
  input: "boosted_trees/BoostedTreesBucketize_2"
  input: "boosted_trees/BoostedTreesBucketize_3"
  input: "boosted_trees/BoostedTreesBucketize_4"
  input: "boosted_trees/BoostedTreesBucketize_5"
  input: "boosted_trees/BoostedTreesBucketize_6"
  input: "boosted_trees/unstack_7"
  input: "boosted_trees/unstack_7:1"
  input: "boosted_trees/unstack_7:2"
  input: "boosted_trees/unstack_7:3"
  input: "boosted_trees/unstack_7:4"
  input: "boosted_trees/unstack_7:5"
  input: "boosted_trees/BoostedTreesBucketize_7"
  input: "boosted_trees/BoostedTreesBucketize_8"
  input: "boosted_trees/BoostedTreesBucketize_9"
  input: "boosted_trees/BoostedTreesBucketize_10"
  input: "boosted_trees/BoostedTreesBucketize_11"
  input: "boosted_trees/BoostedTreesBucketize_12"
  input: "boosted_trees/BoostedTreesBucketize_13"
  input: "boosted_trees/BoostedTreesBucketize_14"
  input: "boosted_trees/BoostedTreesBucketize_15"
  input: "boosted_trees/BoostedTreesBucketize_16"
  input: "boosted_trees/BoostedTreesBucketize_17"
  input: "boosted_trees/BoostedTreesBucketize_18"
  input: "boosted_trees/BoostedTreesBucketize_19"
  input: "boosted_trees/unstack_21"
  input: "boosted_trees/unstack_21:1"
  input: "^boosted_trees/NoOp_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "logits_dimension"
    value {
      i: 1
    }
  }
  attr {
    key: "num_bucketized_features"
    value {
      i: 28
    }
  }
}
node {
  name: "boosted_trees/add"
  op: "AddV2"
  input: "boosted_trees/zeros_1"
  input: "boosted_trees/BoostedTreesTrainingPredict"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "boosted_trees/conditional_accumulator"
  op: "ResourceConditionalAccumulator"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "reduction_type"
    value {
      s: "MEAN"
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 20
        }
        dim {
          size: 7
        }
        dim {
          size: 100
        }
        dim {
          size: 2
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "numeric_stats_summary_accumulator_0"
    }
  }
}
node {
  name: "boosted_trees/ResourceAccumulatorSetGlobalStep"
  op: "ResourceAccumulatorSetGlobalStep"
  input: "boosted_trees/conditional_accumulator"
  input: "boosted_trees/stamp_token"
}
node {
  name: "boosted_trees/conditional_accumulator_1"
  op: "ResourceConditionalAccumulator"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "reduction_type"
    value {
      s: "MEAN"
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
        dim {
          size: 7
        }
        dim {
          size: 2
        }
        dim {
          size: 2
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "numeric_stats_summary_accumulator_1"
    }
  }
}
node {
  name: "boosted_trees/ResourceAccumulatorSetGlobalStep_1"
  op: "ResourceAccumulatorSetGlobalStep"
  input: "boosted_trees/conditional_accumulator_1"
  input: "boosted_trees/stamp_token"
}
node {
  name: "boosted_trees/conditional_accumulator_2"
  op: "ResourceConditionalAccumulator"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "reduction_type"
    value {
      s: "MEAN"
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 2
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "bias_accumulator"
    }
  }
}
node {
  name: "boosted_trees/ResourceAccumulatorSetGlobalStep_2"
  op: "ResourceAccumulatorSetGlobalStep"
  input: "boosted_trees/conditional_accumulator_2"
  input: "boosted_trees/stamp_token"
}
node {
  name: "boosted_trees/ensemble/num_trees/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "boosted_trees/ensemble/num_trees"
      }
    }
  }
}
node {
  name: "boosted_trees/ensemble/num_trees"
  op: "ScalarSummary"
  input: "boosted_trees/ensemble/num_trees/tags"
  input: "boosted_trees/num_trees"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "boosted_trees/ensemble/num_finalized_trees/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "boosted_trees/ensemble/num_finalized_trees"
      }
    }
  }
}
node {
  name: "boosted_trees/ensemble/num_finalized_trees"
  op: "ScalarSummary"
  input: "boosted_trees/ensemble/num_finalized_trees/tags"
  input: "boosted_trees/num_finalized_trees"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "boosted_trees/ensemble/num_attempted_layers/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "boosted_trees/ensemble/num_attempted_layers"
      }
    }
  }
}
node {
  name: "boosted_trees/ensemble/num_attempted_layers"
  op: "ScalarSummary"
  input: "boosted_trees/ensemble/num_attempted_layers/tags"
  input: "boosted_trees/num_attempted_layers"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "boosted_trees/center_bias_needed/Initializer/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@boosted_trees/center_bias_needed"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_BOOL
        tensor_shape {
        }
        bool_val: true
      }
    }
  }
}
node {
  name: "boosted_trees/center_bias_needed"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@boosted_trees/center_bias_needed"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "boosted_trees/center_bias_needed"
    }
  }
}
node {
  name: "boosted_trees/center_bias_needed/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "boosted_trees/center_bias_needed"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "boosted_trees/center_bias_needed/Assign"
  op: "AssignVariableOp"
  input: "boosted_trees/center_bias_needed"
  input: "boosted_trees/center_bias_needed/Initializer/initial_value"
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "boosted_trees/center_bias_needed/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "boosted_trees/center_bias_needed"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "boosted_trees/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "head/predictions/logits/Shape"
  op: "Shape"
  input: "boosted_trees/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/predictions/logits/assert_rank_at_least/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "head/predictions/logits/assert_rank_at_least/assert_type/statically_determined_correct_type"
  op: "NoOp"
}
node {
  name: "head/predictions/logits/assert_rank_at_least/static_checks_determined_all_ok"
  op: "NoOp"
}
node {
  name: "head/predictions/logistic"
  op: "Sigmoid"
  input: "boosted_trees/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/predictions/zeros_like"
  op: "ZerosLike"
  input: "boosted_trees/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/predictions/two_class_logits/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "head/predictions/two_class_logits"
  op: "ConcatV2"
  input: "head/predictions/zeros_like"
  input: "boosted_trees/add"
  input: "head/predictions/two_class_logits/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "head/predictions/probabilities"
  op: "Softmax"
  input: "head/predictions/two_class_logits"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "head/predictions/class_ids/dimension"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "head/predictions/class_ids"
  op: "ArgMax"
  input: "head/predictions/two_class_logits"
  input: "head/predictions/class_ids/dimension"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "head/predictions/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "head/predictions/ExpandDims"
  op: "ExpandDims"
  input: "head/predictions/class_ids"
  input: "head/predictions/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/predictions/Shape"
  op: "Shape"
  input: "boosted_trees/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/predictions/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/predictions/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/predictions/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/predictions/strided_slice"
  op: "StridedSlice"
  input: "head/predictions/Shape"
  input: "head/predictions/strided_slice/stack"
  input: "head/predictions/strided_slice/stack_1"
  input: "head/predictions/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "head/predictions/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/predictions/range/limit"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "head/predictions/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/predictions/range"
  op: "Range"
  input: "head/predictions/range/start"
  input: "head/predictions/range/limit"
  input: "head/predictions/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "head/predictions/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/predictions/ExpandDims_1"
  op: "ExpandDims"
  input: "head/predictions/range"
  input: "head/predictions/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "head/predictions/Tile/multiples/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/predictions/Tile/multiples"
  op: "Pack"
  input: "head/predictions/strided_slice"
  input: "head/predictions/Tile/multiples/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "head/predictions/Tile"
  op: "Tile"
  input: "head/predictions/ExpandDims_1"
  input: "head/predictions/Tile/multiples"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "head/predictions/Shape_1"
  op: "Shape"
  input: "boosted_trees/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/predictions/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/predictions/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/predictions/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/predictions/strided_slice_1"
  op: "StridedSlice"
  input: "head/predictions/Shape_1"
  input: "head/predictions/strided_slice_1/stack"
  input: "head/predictions/strided_slice_1/stack_1"
  input: "head/predictions/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "head/predictions/range_1/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/predictions/range_1/limit"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "head/predictions/range_1/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/predictions/range_1"
  op: "Range"
  input: "head/predictions/range_1/start"
  input: "head/predictions/range_1/limit"
  input: "head/predictions/range_1/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "head/predictions/AsString"
  op: "AsString"
  input: "head/predictions/range_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "fill"
    value {
      s: ""
    }
  }
  attr {
    key: "precision"
    value {
      i: -1
    }
  }
  attr {
    key: "scientific"
    value {
      b: false
    }
  }
  attr {
    key: "shortest"
    value {
      b: false
    }
  }
  attr {
    key: "width"
    value {
      i: -1
    }
  }
}
node {
  name: "head/predictions/ExpandDims_2/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/predictions/ExpandDims_2"
  op: "ExpandDims"
  input: "head/predictions/AsString"
  input: "head/predictions/ExpandDims_2/dim"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "head/predictions/Tile_1/multiples/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/predictions/Tile_1/multiples"
  op: "Pack"
  input: "head/predictions/strided_slice_1"
  input: "head/predictions/Tile_1/multiples/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "head/predictions/Tile_1"
  op: "Tile"
  input: "head/predictions/ExpandDims_2"
  input: "head/predictions/Tile_1/multiples"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "head/predictions/str_classes"
  op: "AsString"
  input: "head/predictions/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "fill"
    value {
      s: ""
    }
  }
  attr {
    key: "precision"
    value {
      i: -1
    }
  }
  attr {
    key: "scientific"
    value {
      b: false
    }
  }
  attr {
    key: "shortest"
    value {
      b: false
    }
  }
  attr {
    key: "width"
    value {
      i: -1
    }
  }
}
node {
  name: "head/labels/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "head/labels/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:24"
  input: "head/labels/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/labels/Shape"
  op: "Shape"
  input: "head/labels/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/labels/Shape_1"
  op: "Shape"
  input: "boosted_trees/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/labels/assert_rank_at_least/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "head/labels/assert_rank_at_least/Shape"
  op: "Shape"
  input: "head/labels/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/labels/assert_rank_at_least/assert_type/statically_determined_correct_type"
  op: "NoOp"
}
node {
  name: "head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  op: "NoOp"
}
node {
  name: "head/labels/strided_slice/stack"
  op: "Const"
  input: "^head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/labels/strided_slice/stack_1"
  op: "Const"
  input: "^head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "head/labels/strided_slice/stack_2"
  op: "Const"
  input: "^head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/labels/strided_slice"
  op: "StridedSlice"
  input: "head/labels/Shape_1"
  input: "head/labels/strided_slice/stack"
  input: "head/labels/strided_slice/stack_1"
  input: "head/labels/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "head/labels/concat/values_1"
  op: "Const"
  input: "^head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/labels/concat/axis"
  op: "Const"
  input: "^head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/labels/concat"
  op: "ConcatV2"
  input: "head/labels/strided_slice"
  input: "head/labels/concat/values_1"
  input: "head/labels/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "head/labels/assert_equal_1/Equal"
  op: "Equal"
  input: "head/labels/concat"
  input: "head/labels/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "incompatible_shape_error"
    value {
      b: true
    }
  }
}
node {
  name: "head/labels/assert_equal_1/Const"
  op: "Const"
  input: "^head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/labels/assert_equal_1/All"
  op: "All"
  input: "head/labels/assert_equal_1/Equal"
  input: "head/labels/assert_equal_1/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "head/labels/assert_equal_1/Assert/Const"
  op: "Const"
  input: "^head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "labels shape must be [D0, D1, ... DN, 1]. Suggested Fix: check your n_classes argument to the estimator and/or the shape of your label."
      }
    }
  }
}
node {
  name: "head/labels/assert_equal_1/Assert/Const_1"
  op: "Const"
  input: "^head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "expected_labels_shape: "
      }
    }
  }
}
node {
  name: "head/labels/assert_equal_1/Assert/Const_2"
  op: "Const"
  input: "^head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "labels_shape: "
      }
    }
  }
}
node {
  name: "head/labels/assert_equal_1/Assert/Assert/data_0"
  op: "Const"
  input: "^head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "labels shape must be [D0, D1, ... DN, 1]. Suggested Fix: check your n_classes argument to the estimator and/or the shape of your label."
      }
    }
  }
}
node {
  name: "head/labels/assert_equal_1/Assert/Assert/data_1"
  op: "Const"
  input: "^head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "expected_labels_shape: "
      }
    }
  }
}
node {
  name: "head/labels/assert_equal_1/Assert/Assert/data_3"
  op: "Const"
  input: "^head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "labels_shape: "
      }
    }
  }
}
node {
  name: "head/labels/assert_equal_1/Assert/Assert"
  op: "Assert"
  input: "head/labels/assert_equal_1/All"
  input: "head/labels/assert_equal_1/Assert/Assert/data_0"
  input: "head/labels/assert_equal_1/Assert/Assert/data_1"
  input: "head/labels/concat"
  input: "head/labels/assert_equal_1/Assert/Assert/data_3"
  input: "head/labels/Shape"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "head/labels"
  op: "Identity"
  input: "head/labels/ExpandDims"
  input: "^head/labels/assert_equal_1/Assert/Assert"
  input: "^head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/ToFloat"
  op: "Cast"
  input: "head/labels"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/assert_range/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "head/assert_range/assert_less_equal/LessEqual"
  op: "LessEqual"
  input: "head/ToFloat"
  input: "head/assert_range/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/assert_range/assert_less_equal/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "head/assert_range/assert_less_equal/All"
  op: "All"
  input: "head/assert_range/assert_less_equal/LessEqual"
  input: "head/assert_range/assert_less_equal/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "head/assert_range/assert_less_equal/Assert/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Labels must <= n_classes - 1"
      }
    }
  }
}
node {
  name: "head/assert_range/assert_less_equal/Assert/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x <= y did not hold element-wise:"
      }
    }
  }
}
node {
  name: "head/assert_range/assert_less_equal/Assert/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (head/ToFloat:0) = "
      }
    }
  }
}
node {
  name: "head/assert_range/assert_less_equal/Assert/Const_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (head/assert_range/Const:0) = "
      }
    }
  }
}
node {
  name: "head/assert_range/assert_less_equal/Assert/AssertGuard/Switch"
  op: "Switch"
  input: "head/assert_range/assert_less_equal/All"
  input: "head/assert_range/assert_less_equal/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "head/assert_range/assert_less_equal/Assert/AssertGuard/switch_t"
  op: "Identity"
  input: "head/assert_range/assert_less_equal/Assert/AssertGuard/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "head/assert_range/assert_less_equal/Assert/AssertGuard/switch_f"
  op: "Identity"
  input: "head/assert_range/assert_less_equal/Assert/AssertGuard/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "head/assert_range/assert_less_equal/Assert/AssertGuard/pred_id"
  op: "Identity"
  input: "head/assert_range/assert_less_equal/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "head/assert_range/assert_less_equal/Assert/AssertGuard/NoOp"
  op: "NoOp"
  input: "^head/assert_range/assert_less_equal/Assert/AssertGuard/switch_t"
}
node {
  name: "head/assert_range/assert_less_equal/Assert/AssertGuard/control_dependency"
  op: "Identity"
  input: "head/assert_range/assert_less_equal/Assert/AssertGuard/switch_t"
  input: "^head/assert_range/assert_less_equal/Assert/AssertGuard/NoOp"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/assert_range/assert_less_equal/Assert/AssertGuard/switch_t"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "head/assert_range/assert_less_equal/Assert/AssertGuard/Assert/data_0"
  op: "Const"
  input: "^head/assert_range/assert_less_equal/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Labels must <= n_classes - 1"
      }
    }
  }
}
node {
  name: "head/assert_range/assert_less_equal/Assert/AssertGuard/Assert/data_1"
  op: "Const"
  input: "^head/assert_range/assert_less_equal/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x <= y did not hold element-wise:"
      }
    }
  }
}
node {
  name: "head/assert_range/assert_less_equal/Assert/AssertGuard/Assert/data_2"
  op: "Const"
  input: "^head/assert_range/assert_less_equal/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (head/ToFloat:0) = "
      }
    }
  }
}
node {
  name: "head/assert_range/assert_less_equal/Assert/AssertGuard/Assert/data_4"
  op: "Const"
  input: "^head/assert_range/assert_less_equal/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (head/assert_range/Const:0) = "
      }
    }
  }
}
node {
  name: "head/assert_range/assert_less_equal/Assert/AssertGuard/Assert"
  op: "Assert"
  input: "head/assert_range/assert_less_equal/Assert/AssertGuard/Assert/Switch"
  input: "head/assert_range/assert_less_equal/Assert/AssertGuard/Assert/data_0"
  input: "head/assert_range/assert_less_equal/Assert/AssertGuard/Assert/data_1"
  input: "head/assert_range/assert_less_equal/Assert/AssertGuard/Assert/data_2"
  input: "head/assert_range/assert_less_equal/Assert/AssertGuard/Assert/Switch_1"
  input: "head/assert_range/assert_less_equal/Assert/AssertGuard/Assert/data_4"
  input: "head/assert_range/assert_less_equal/Assert/AssertGuard/Assert/Switch_2"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_FLOAT
        type: DT_STRING
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "head/assert_range/assert_less_equal/Assert/AssertGuard/Assert/Switch"
  op: "Switch"
  input: "head/assert_range/assert_less_equal/All"
  input: "head/assert_range/assert_less_equal/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/assert_range/assert_less_equal/All"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "head/assert_range/assert_less_equal/Assert/AssertGuard/Assert/Switch_1"
  op: "Switch"
  input: "head/ToFloat"
  input: "head/assert_range/assert_less_equal/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/ToFloat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/assert_range/assert_less_equal/Assert/AssertGuard/Assert/Switch_2"
  op: "Switch"
  input: "head/assert_range/Const"
  input: "head/assert_range/assert_less_equal/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/assert_range/Const"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "head/assert_range/assert_less_equal/Assert/AssertGuard/control_dependency_1"
  op: "Identity"
  input: "head/assert_range/assert_less_equal/Assert/AssertGuard/switch_f"
  input: "^head/assert_range/assert_less_equal/Assert/AssertGuard/Assert"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/assert_range/assert_less_equal/Assert/AssertGuard/switch_f"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "head/assert_range/assert_less_equal/Assert/AssertGuard/Merge"
  op: "Merge"
  input: "head/assert_range/assert_less_equal/Assert/AssertGuard/control_dependency_1"
  input: "head/assert_range/assert_less_equal/Assert/AssertGuard/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "head/assert_range/assert_non_negative/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "head/assert_range/assert_non_negative/assert_less_equal/LessEqual"
  op: "LessEqual"
  input: "head/assert_range/assert_non_negative/Const"
  input: "head/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/assert_range/assert_non_negative/assert_less_equal/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "head/assert_range/assert_non_negative/assert_less_equal/All"
  op: "All"
  input: "head/assert_range/assert_non_negative/assert_less_equal/LessEqual"
  input: "head/assert_range/assert_non_negative/assert_less_equal/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "head/assert_range/assert_non_negative/assert_less_equal/Assert/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Labels must >= 0"
      }
    }
  }
}
node {
  name: "head/assert_range/assert_non_negative/assert_less_equal/Assert/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x >= 0 did not hold element-wise:"
      }
    }
  }
}
node {
  name: "head/assert_range/assert_non_negative/assert_less_equal/Assert/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (head/ToFloat:0) = "
      }
    }
  }
}
node {
  name: "head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Switch"
  op: "Switch"
  input: "head/assert_range/assert_non_negative/assert_less_equal/All"
  input: "head/assert_range/assert_non_negative/assert_less_equal/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_t"
  op: "Identity"
  input: "head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_f"
  op: "Identity"
  input: "head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/pred_id"
  op: "Identity"
  input: "head/assert_range/assert_non_negative/assert_less_equal/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/NoOp"
  op: "NoOp"
  input: "^head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_t"
}
node {
  name: "head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/control_dependency"
  op: "Identity"
  input: "head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_t"
  input: "^head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/NoOp"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_t"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/data_0"
  op: "Const"
  input: "^head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Labels must >= 0"
      }
    }
  }
}
node {
  name: "head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/data_1"
  op: "Const"
  input: "^head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x >= 0 did not hold element-wise:"
      }
    }
  }
}
node {
  name: "head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/data_2"
  op: "Const"
  input: "^head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (head/ToFloat:0) = "
      }
    }
  }
}
node {
  name: "head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert"
  op: "Assert"
  input: "head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/Switch"
  input: "head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/data_0"
  input: "head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/data_1"
  input: "head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/data_2"
  input: "head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/Switch_1"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/Switch"
  op: "Switch"
  input: "head/assert_range/assert_non_negative/assert_less_equal/All"
  input: "head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/assert_range/assert_non_negative/assert_less_equal/All"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/Switch_1"
  op: "Switch"
  input: "head/ToFloat"
  input: "head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/ToFloat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/control_dependency_1"
  op: "Identity"
  input: "head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_f"
  input: "^head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_f"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Merge"
  op: "Merge"
  input: "head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/control_dependency_1"
  input: "head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "head/assert_range/Identity"
  op: "Identity"
  input: "head/ToFloat"
  input: "^head/assert_range/assert_less_equal/Assert/AssertGuard/Merge"
  input: "^head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/logistic_loss/zeros_like"
  op: "ZerosLike"
  input: "boosted_trees/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/logistic_loss/GreaterEqual"
  op: "GreaterEqual"
  input: "boosted_trees/add"
  input: "head/logistic_loss/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/logistic_loss/Select"
  op: "Select"
  input: "head/logistic_loss/GreaterEqual"
  input: "boosted_trees/add"
  input: "head/logistic_loss/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/logistic_loss/Neg"
  op: "Neg"
  input: "boosted_trees/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/logistic_loss/Select_1"
  op: "Select"
  input: "head/logistic_loss/GreaterEqual"
  input: "head/logistic_loss/Neg"
  input: "boosted_trees/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/logistic_loss/mul"
  op: "Mul"
  input: "boosted_trees/add"
  input: "head/assert_range/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/logistic_loss/sub"
  op: "Sub"
  input: "head/logistic_loss/Select"
  input: "head/logistic_loss/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/logistic_loss/Exp"
  op: "Exp"
  input: "head/logistic_loss/Select_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/logistic_loss/Log1p"
  op: "Log1p"
  input: "head/logistic_loss/Exp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/logistic_loss"
  op: "Add"
  input: "head/logistic_loss/sub"
  input: "head/logistic_loss/Log1p"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/weighted_loss/assert_broadcastable/weights"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "head/weighted_loss/assert_broadcastable/weights/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "head/weighted_loss/assert_broadcastable/weights/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/weighted_loss/assert_broadcastable/values/shape"
  op: "Shape"
  input: "head/logistic_loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/weighted_loss/assert_broadcastable/values/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "head/weighted_loss/assert_broadcastable/static_scalar_check_success"
  op: "NoOp"
}
node {
  name: "head/weighted_loss/Cast/x"
  op: "Const"
  input: "^head/weighted_loss/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "head/weighted_loss/Mul"
  op: "Mul"
  input: "head/logistic_loss"
  input: "head/weighted_loss/Cast/x"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/weighted_loss/Const"
  op: "Const"
  input: "^head/weighted_loss/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "head/weighted_loss/Sum"
  op: "Sum"
  input: "head/weighted_loss/Mul"
  input: "head/weighted_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "head/weighted_loss/num_elements"
  op: "Size"
  input: "head/logistic_loss"
  input: "^head/weighted_loss/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/weighted_loss/num_elements/Cast"
  op: "Cast"
  input: "head/weighted_loss/num_elements"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "head/weighted_loss/Const_1"
  op: "Const"
  input: "^head/weighted_loss/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "head/weighted_loss/Sum_1"
  op: "Sum"
  input: "head/weighted_loss/Sum"
  input: "head/weighted_loss/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "head/weighted_loss/value"
  op: "DivNoNan"
  input: "head/weighted_loss/Sum_1"
  input: "head/weighted_loss/num_elements/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "head/cond/ReadVariableOp"
  op: "ReadVariableOp"
  input: "boosted_trees/are_boundaries_ready"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "head/cond"
  op: "If"
  input: "head/cond/ReadVariableOp"
  input: "boosted_trees/add"
  input: "IteratorGetNext:24"
  input: "boosted_trees/BoostedTreesTrainingPredict:2"
  input: "boosted_trees/BoostedTreesBucketize"
  input: "boosted_trees/BoostedTreesBucketize_1"
  input: "boosted_trees/BoostedTreesBucketize_2"
  input: "boosted_trees/BoostedTreesBucketize_3"
  input: "boosted_trees/BoostedTreesBucketize_4"
  input: "boosted_trees/BoostedTreesBucketize_5"
  input: "boosted_trees/BoostedTreesBucketize_6"
  input: "boosted_trees/BoostedTreesBucketize_7"
  input: "boosted_trees/BoostedTreesBucketize_8"
  input: "boosted_trees/BoostedTreesBucketize_9"
  input: "boosted_trees/BoostedTreesBucketize_10"
  input: "boosted_trees/BoostedTreesBucketize_11"
  input: "boosted_trees/BoostedTreesBucketize_12"
  input: "boosted_trees/BoostedTreesBucketize_13"
  input: "boosted_trees/BoostedTreesBucketize_14"
  input: "boosted_trees/BoostedTreesBucketize_15"
  input: "boosted_trees/BoostedTreesBucketize_16"
  input: "boosted_trees/BoostedTreesBucketize_17"
  input: "boosted_trees/BoostedTreesBucketize_18"
  input: "boosted_trees/BoostedTreesBucketize_19"
  input: "boosted_trees/unstack_7"
  input: "boosted_trees/unstack_7:1"
  input: "boosted_trees/unstack_7:2"
  input: "boosted_trees/unstack_7:3"
  input: "boosted_trees/unstack_7:4"
  input: "boosted_trees/unstack_7:5"
  input: "boosted_trees/unstack_21"
  input: "boosted_trees/unstack_21:1"
  input: "boosted_trees/center_bias_needed"
  input: "boosted_trees/conditional_accumulator_2"
  input: "boosted_trees/stamp_token"
  input: "boosted_trees"
  input: "boosted_trees/conditional_accumulator"
  input: "boosted_trees/conditional_accumulator_1"
  input: "boosted_trees/last_layer_nodes_range"
  input: "global_step"
  input: "head/cond/ReadVariableOp"
  input: "IteratorGetNext"
  input: "IteratorGetNext:1"
  input: "IteratorGetNext:2"
  input: "IteratorGetNext:3"
  input: "IteratorGetNext:4"
  input: "IteratorGetNext:5"
  input: "IteratorGetNext:6"
  input: "IteratorGetNext:8"
  input: "IteratorGetNext:10"
  input: "IteratorGetNext:11"
  input: "IteratorGetNext:12"
  input: "IteratorGetNext:13"
  input: "IteratorGetNext:14"
  input: "IteratorGetNext:15"
  input: "IteratorGetNext:16"
  input: "IteratorGetNext:17"
  input: "IteratorGetNext:18"
  input: "IteratorGetNext:19"
  input: "IteratorGetNext:20"
  input: "IteratorGetNext:21"
  input: "boosted_trees/Const"
  input: "boosted_trees/QuantileAccumulator"
  input: "boosted_trees/are_boundaries_ready"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_FLOAT
        type: DT_INT32
        type: DT_INT32
        type: DT_INT32
        type: DT_INT32
        type: DT_INT32
        type: DT_INT32
        type: DT_INT32
        type: DT_INT32
        type: DT_INT32
        type: DT_INT32
        type: DT_INT32
        type: DT_INT32
        type: DT_INT32
        type: DT_INT32
        type: DT_INT32
        type: DT_INT32
        type: DT_INT32
        type: DT_INT32
        type: DT_INT32
        type: DT_INT32
        type: DT_INT32
        type: DT_INT32
        type: DT_INT32
        type: DT_INT32
        type: DT_INT32
        type: DT_INT32
        type: DT_INT32
        type: DT_INT32
        type: DT_INT32
        type: DT_INT32
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_INT64
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_INT32
        type: DT_RESOURCE
        type: DT_BOOL
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_RESOURCE
        type: DT_RESOURCE
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_BOOL
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "head_cond_false_557"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "head_cond_true_556"
      }
    }
  }
}
node {
  name: "head/cond/Identity"
  op: "Identity"
  input: "head/cond"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "loss/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "loss"
      }
    }
  }
}
node {
  name: "loss"
  op: "ScalarSummary"
  input: "loss/tags"
  input: "head/weighted_loss/value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "group_deps"
  op: "NoOp"
  input: "^boosted_trees/ResourceAccumulatorSetGlobalStep"
  input: "^boosted_trees/ResourceAccumulatorSetGlobalStep_1"
  input: "^boosted_trees/ResourceAccumulatorSetGlobalStep_2"
}
node {
  name: "init"
  op: "NoOp"
  input: "^boosted_trees/are_boundaries_ready/Assign"
  input: "^boosted_trees/center_bias_needed/Assign"
  input: "^global_step/Assign"
}
node {
  name: "init_1"
  op: "NoOp"
  input: "^boosted_trees/BoostedTreesCreateEnsemble"
  input: "^boosted_trees/QuantileAccumulator/BoostedTreesCreateQuantileStreamResource"
}
node {
  name: "group_deps_1"
  op: "NoOp"
  input: "^init"
  input: "^init_1"
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "global_step"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_1"
  op: "VarIsInitializedOp"
  input: "boosted_trees/are_boundaries_ready"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_2"
  op: "VarIsInitializedOp"
  input: "boosted_trees/center_bias_needed"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/stack"
  op: "Pack"
  input: "report_uninitialized_variables/VarIsInitializedOp"
  input: "report_uninitialized_variables/VarIsInitializedOp_1"
  input: "report_uninitialized_variables/VarIsInitializedOp_2"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/LogicalNot"
  op: "LogicalNot"
  input: "report_uninitialized_variables/stack"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 3
          }
        }
        string_val: "global_step"
        string_val: "boosted_trees/are_boundaries_ready"
        string_val: "boosted_trees/center_bias_needed"
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Prod/reduction_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Prod"
  op: "Prod"
  input: "report_uninitialized_variables/boolean_mask/strided_slice"
  input: "report_uninitialized_variables/boolean_mask/Prod/reduction_indices"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape_2"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/values_1"
  op: "Pack"
  input: "report_uninitialized_variables/boolean_mask/Prod"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1"
  input: "report_uninitialized_variables/boolean_mask/concat/values_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2"
  input: "report_uninitialized_variables/boolean_mask/concat/axis"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape"
  op: "Reshape"
  input: "report_uninitialized_variables/Const"
  input: "report_uninitialized_variables/boolean_mask/concat"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "report_uninitialized_variables/LogicalNot"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Where"
  op: "Where"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "report_uninitialized_variables/boolean_mask/Where"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/GatherV2/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/GatherV2"
  op: "GatherV2"
  input: "report_uninitialized_variables/boolean_mask/Reshape"
  input: "report_uninitialized_variables/boolean_mask/Squeeze"
  input: "report_uninitialized_variables/boolean_mask/GatherV2/axis"
  device: "/device:CPU:0"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_resources/stack"
  op: "Pack"
  input: "boosted_trees/IsBoostedTreesEnsembleInitialized"
  input: "boosted_trees/QuantileAccumulator/IsBoostedTreesQuantileStreamResourceInitialized"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_resources/LogicalNot"
  op: "LogicalNot"
  input: "report_uninitialized_resources/stack"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_resources/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 2
          }
        }
        string_val: "boosted_trees:0"
        string_val: "boosted_trees/QuantileAccumulator:0"
      }
    }
  }
}
node {
  name: "report_uninitialized_resources/boolean_mask/Shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "report_uninitialized_resources/boolean_mask/strided_slice/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_resources/boolean_mask/strided_slice/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_resources/boolean_mask/strided_slice/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_resources/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "report_uninitialized_resources/boolean_mask/Shape"
  input: "report_uninitialized_resources/boolean_mask/strided_slice/stack"
  input: "report_uninitialized_resources/boolean_mask/strided_slice/stack_1"
  input: "report_uninitialized_resources/boolean_mask/strided_slice/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_resources/boolean_mask/Prod/reduction_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_resources/boolean_mask/Prod"
  op: "Prod"
  input: "report_uninitialized_resources/boolean_mask/strided_slice"
  input: "report_uninitialized_resources/boolean_mask/Prod/reduction_indices"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "report_uninitialized_resources/boolean_mask/Shape_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "report_uninitialized_resources/boolean_mask/strided_slice_1/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_resources/boolean_mask/strided_slice_1/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_resources/boolean_mask/strided_slice_1/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_resources/boolean_mask/strided_slice_1"
  op: "StridedSlice"
  input: "report_uninitialized_resources/boolean_mask/Shape_1"
  input: "report_uninitialized_resources/boolean_mask/strided_slice_1/stack"
  input: "report_uninitialized_resources/boolean_mask/strided_slice_1/stack_1"
  input: "report_uninitialized_resources/boolean_mask/strided_slice_1/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_resources/boolean_mask/Shape_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "report_uninitialized_resources/boolean_mask/strided_slice_2/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_resources/boolean_mask/strided_slice_2/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_resources/boolean_mask/strided_slice_2/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_resources/boolean_mask/strided_slice_2"
  op: "StridedSlice"
  input: "report_uninitialized_resources/boolean_mask/Shape_2"
  input: "report_uninitialized_resources/boolean_mask/strided_slice_2/stack"
  input: "report_uninitialized_resources/boolean_mask/strided_slice_2/stack_1"
  input: "report_uninitialized_resources/boolean_mask/strided_slice_2/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_resources/boolean_mask/concat/values_1"
  op: "Pack"
  input: "report_uninitialized_resources/boolean_mask/Prod"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_resources/boolean_mask/concat/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_resources/boolean_mask/concat"
  op: "ConcatV2"
  input: "report_uninitialized_resources/boolean_mask/strided_slice_1"
  input: "report_uninitialized_resources/boolean_mask/concat/values_1"
  input: "report_uninitialized_resources/boolean_mask/strided_slice_2"
  input: "report_uninitialized_resources/boolean_mask/concat/axis"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_resources/boolean_mask/Reshape"
  op: "Reshape"
  input: "report_uninitialized_resources/Const"
  input: "report_uninitialized_resources/boolean_mask/concat"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_resources/boolean_mask/Reshape_1/shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_resources/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "report_uninitialized_resources/LogicalNot"
  input: "report_uninitialized_resources/boolean_mask/Reshape_1/shape"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_resources/boolean_mask/Where"
  op: "Where"
  input: "report_uninitialized_resources/boolean_mask/Reshape_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_resources/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "report_uninitialized_resources/boolean_mask/Where"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_resources/boolean_mask/GatherV2/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_resources/boolean_mask/GatherV2"
  op: "GatherV2"
  input: "report_uninitialized_resources/boolean_mask/Reshape"
  input: "report_uninitialized_resources/boolean_mask/Squeeze"
  input: "report_uninitialized_resources/boolean_mask/GatherV2/axis"
  device: "/device:CPU:0"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables/boolean_mask/GatherV2"
  input: "report_uninitialized_resources/boolean_mask/GatherV2"
  input: "concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "global_step"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_1"
  op: "VarIsInitializedOp"
  input: "boosted_trees/are_boundaries_ready"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_2"
  op: "VarIsInitializedOp"
  input: "boosted_trees/center_bias_needed"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/stack"
  op: "Pack"
  input: "report_uninitialized_variables_1/VarIsInitializedOp"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_1"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_2"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/LogicalNot"
  op: "LogicalNot"
  input: "report_uninitialized_variables_1/stack"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 3
          }
        }
        string_val: "global_step"
        string_val: "boosted_trees/are_boundaries_ready"
        string_val: "boosted_trees/center_bias_needed"
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Prod/reduction_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Prod"
  op: "Prod"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice"
  input: "report_uninitialized_variables_1/boolean_mask/Prod/reduction_indices"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape_2"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat/values_1"
  op: "Pack"
  input: "report_uninitialized_variables_1/boolean_mask/Prod"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1"
  input: "report_uninitialized_variables_1/boolean_mask/concat/values_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2"
  input: "report_uninitialized_variables_1/boolean_mask/concat/axis"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape"
  op: "Reshape"
  input: "report_uninitialized_variables_1/Const"
  input: "report_uninitialized_variables_1/boolean_mask/concat"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape_1/shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "report_uninitialized_variables_1/LogicalNot"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape_1/shape"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Where"
  op: "Where"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "report_uninitialized_variables_1/boolean_mask/Where"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/GatherV2/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/GatherV2"
  op: "GatherV2"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape"
  input: "report_uninitialized_variables_1/boolean_mask/Squeeze"
  input: "report_uninitialized_variables_1/boolean_mask/GatherV2/axis"
  device: "/device:CPU:0"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_resources_1/stack"
  op: "Pack"
  input: "boosted_trees/IsBoostedTreesEnsembleInitialized"
  input: "boosted_trees/QuantileAccumulator/IsBoostedTreesQuantileStreamResourceInitialized"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_resources_1/LogicalNot"
  op: "LogicalNot"
  input: "report_uninitialized_resources_1/stack"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_resources_1/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 2
          }
        }
        string_val: "boosted_trees:0"
        string_val: "boosted_trees/QuantileAccumulator:0"
      }
    }
  }
}
node {
  name: "report_uninitialized_resources_1/boolean_mask/Shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "report_uninitialized_resources_1/boolean_mask/strided_slice/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_resources_1/boolean_mask/strided_slice/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_resources_1/boolean_mask/strided_slice/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_resources_1/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "report_uninitialized_resources_1/boolean_mask/Shape"
  input: "report_uninitialized_resources_1/boolean_mask/strided_slice/stack"
  input: "report_uninitialized_resources_1/boolean_mask/strided_slice/stack_1"
  input: "report_uninitialized_resources_1/boolean_mask/strided_slice/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_resources_1/boolean_mask/Prod/reduction_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_resources_1/boolean_mask/Prod"
  op: "Prod"
  input: "report_uninitialized_resources_1/boolean_mask/strided_slice"
  input: "report_uninitialized_resources_1/boolean_mask/Prod/reduction_indices"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "report_uninitialized_resources_1/boolean_mask/Shape_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "report_uninitialized_resources_1/boolean_mask/strided_slice_1/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_resources_1/boolean_mask/strided_slice_1/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_resources_1/boolean_mask/strided_slice_1/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_resources_1/boolean_mask/strided_slice_1"
  op: "StridedSlice"
  input: "report_uninitialized_resources_1/boolean_mask/Shape_1"
  input: "report_uninitialized_resources_1/boolean_mask/strided_slice_1/stack"
  input: "report_uninitialized_resources_1/boolean_mask/strided_slice_1/stack_1"
  input: "report_uninitialized_resources_1/boolean_mask/strided_slice_1/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_resources_1/boolean_mask/Shape_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "report_uninitialized_resources_1/boolean_mask/strided_slice_2/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_resources_1/boolean_mask/strided_slice_2/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_resources_1/boolean_mask/strided_slice_2/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_resources_1/boolean_mask/strided_slice_2"
  op: "StridedSlice"
  input: "report_uninitialized_resources_1/boolean_mask/Shape_2"
  input: "report_uninitialized_resources_1/boolean_mask/strided_slice_2/stack"
  input: "report_uninitialized_resources_1/boolean_mask/strided_slice_2/stack_1"
  input: "report_uninitialized_resources_1/boolean_mask/strided_slice_2/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_resources_1/boolean_mask/concat/values_1"
  op: "Pack"
  input: "report_uninitialized_resources_1/boolean_mask/Prod"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_resources_1/boolean_mask/concat/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_resources_1/boolean_mask/concat"
  op: "ConcatV2"
  input: "report_uninitialized_resources_1/boolean_mask/strided_slice_1"
  input: "report_uninitialized_resources_1/boolean_mask/concat/values_1"
  input: "report_uninitialized_resources_1/boolean_mask/strided_slice_2"
  input: "report_uninitialized_resources_1/boolean_mask/concat/axis"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_resources_1/boolean_mask/Reshape"
  op: "Reshape"
  input: "report_uninitialized_resources_1/Const"
  input: "report_uninitialized_resources_1/boolean_mask/concat"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_resources_1/boolean_mask/Reshape_1/shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_resources_1/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "report_uninitialized_resources_1/LogicalNot"
  input: "report_uninitialized_resources_1/boolean_mask/Reshape_1/shape"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_resources_1/boolean_mask/Where"
  op: "Where"
  input: "report_uninitialized_resources_1/boolean_mask/Reshape_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_resources_1/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "report_uninitialized_resources_1/boolean_mask/Where"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_resources_1/boolean_mask/GatherV2/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_resources_1/boolean_mask/GatherV2"
  op: "GatherV2"
  input: "report_uninitialized_resources_1/boolean_mask/Reshape"
  input: "report_uninitialized_resources_1/boolean_mask/Squeeze"
  input: "report_uninitialized_resources_1/boolean_mask/GatherV2/axis"
  device: "/device:CPU:0"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "concat_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "concat_1"
  op: "ConcatV2"
  input: "report_uninitialized_variables_1/boolean_mask/GatherV2"
  input: "report_uninitialized_resources_1/boolean_mask/GatherV2"
  input: "concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "init_2"
  op: "NoOp"
}
node {
  name: "init_all_tables"
  op: "NoOp"
  input: "^boosted_trees/transform_features/EDUCATION_indicator/EDUCATION_lookup/hash_table/table_init/LookupTableImportV2"
  input: "^boosted_trees/transform_features/SEX_indicator/SEX_lookup/hash_table/table_init/LookupTableImportV2"
}
node {
  name: "init_3"
  op: "NoOp"
}
node {
  name: "group_deps_2"
  op: "NoOp"
  input: "^init_2"
  input: "^init_3"
  input: "^init_all_tables"
}
node {
  name: "Merge/MergeSummary"
  op: "MergeSummary"
  input: "boosted_trees/ensemble/num_trees"
  input: "boosted_trees/ensemble/num_finalized_trees"
  input: "boosted_trees/ensemble/num_attempted_layers"
  input: "loss"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/filename/input"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "model"
      }
    }
  }
}
node {
  name: "save/filename"
  op: "PlaceholderWithDefault"
  input: "save/filename/input"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "save/Const"
  op: "PlaceholderWithDefault"
  input: "save/filename"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "save/StringJoin/inputs_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "_temp_ca2596935466446cb36beb77788e0342/part"
      }
    }
  }
}
node {
  name: "save/StringJoin"
  op: "StringJoin"
  input: "save/Const"
  input: "save/StringJoin/inputs_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "separator"
    value {
      s: ""
    }
  }
}
node {
  name: "save/num_shards"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "save/ShardedFilename/shard"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "save/ShardedFilename"
  op: "ShardedFilename"
  input: "save/StringJoin"
  input: "save/ShardedFilename/shard"
  input: "save/num_shards"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/SaveV2/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 25
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 25
          }
        }
        string_val: "boosted_trees/QuantileAccumulator:0_bucket_boundaries_0"
        string_val: "boosted_trees/QuantileAccumulator:0_bucket_boundaries_1"
        string_val: "boosted_trees/QuantileAccumulator:0_bucket_boundaries_2"
        string_val: "boosted_trees/QuantileAccumulator:0_bucket_boundaries_3"
        string_val: "boosted_trees/QuantileAccumulator:0_bucket_boundaries_4"
        string_val: "boosted_trees/QuantileAccumulator:0_bucket_boundaries_5"
        string_val: "boosted_trees/QuantileAccumulator:0_bucket_boundaries_6"
        string_val: "boosted_trees/QuantileAccumulator:0_bucket_boundaries_7"
        string_val: "boosted_trees/QuantileAccumulator:0_bucket_boundaries_8"
        string_val: "boosted_trees/QuantileAccumulator:0_bucket_boundaries_9"
        string_val: "boosted_trees/QuantileAccumulator:0_bucket_boundaries_10"
        string_val: "boosted_trees/QuantileAccumulator:0_bucket_boundaries_11"
        string_val: "boosted_trees/QuantileAccumulator:0_bucket_boundaries_12"
        string_val: "boosted_trees/QuantileAccumulator:0_bucket_boundaries_13"
        string_val: "boosted_trees/QuantileAccumulator:0_bucket_boundaries_14"
        string_val: "boosted_trees/QuantileAccumulator:0_bucket_boundaries_15"
        string_val: "boosted_trees/QuantileAccumulator:0_bucket_boundaries_16"
        string_val: "boosted_trees/QuantileAccumulator:0_bucket_boundaries_17"
        string_val: "boosted_trees/QuantileAccumulator:0_bucket_boundaries_18"
        string_val: "boosted_trees/QuantileAccumulator:0_bucket_boundaries_19"
        string_val: "boosted_trees/are_boundaries_ready"
        string_val: "boosted_trees/center_bias_needed"
        string_val: "boosted_trees:0_stamp"
        string_val: "boosted_trees:0_serialized"
        string_val: "global_step"
      }
    }
  }
}
node {
  name: "save/SaveV2/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 25
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 25
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/SaveV2"
  op: "SaveV2"
  input: "save/ShardedFilename"
  input: "save/SaveV2/tensor_names"
  input: "save/SaveV2/shape_and_slices"
  input: "boosted_trees/BoostedTreesQuantileStreamResourceGetBucketBoundaries"
  input: "boosted_trees/BoostedTreesQuantileStreamResourceGetBucketBoundaries:1"
  input: "boosted_trees/BoostedTreesQuantileStreamResourceGetBucketBoundaries:2"
  input: "boosted_trees/BoostedTreesQuantileStreamResourceGetBucketBoundaries:3"
  input: "boosted_trees/BoostedTreesQuantileStreamResourceGetBucketBoundaries:4"
  input: "boosted_trees/BoostedTreesQuantileStreamResourceGetBucketBoundaries:5"
  input: "boosted_trees/BoostedTreesQuantileStreamResourceGetBucketBoundaries:6"
  input: "boosted_trees/BoostedTreesQuantileStreamResourceGetBucketBoundaries:7"
  input: "boosted_trees/BoostedTreesQuantileStreamResourceGetBucketBoundaries:8"
  input: "boosted_trees/BoostedTreesQuantileStreamResourceGetBucketBoundaries:9"
  input: "boosted_trees/BoostedTreesQuantileStreamResourceGetBucketBoundaries:10"
  input: "boosted_trees/BoostedTreesQuantileStreamResourceGetBucketBoundaries:11"
  input: "boosted_trees/BoostedTreesQuantileStreamResourceGetBucketBoundaries:12"
  input: "boosted_trees/BoostedTreesQuantileStreamResourceGetBucketBoundaries:13"
  input: "boosted_trees/BoostedTreesQuantileStreamResourceGetBucketBoundaries:14"
  input: "boosted_trees/BoostedTreesQuantileStreamResourceGetBucketBoundaries:15"
  input: "boosted_trees/BoostedTreesQuantileStreamResourceGetBucketBoundaries:16"
  input: "boosted_trees/BoostedTreesQuantileStreamResourceGetBucketBoundaries:17"
  input: "boosted_trees/BoostedTreesQuantileStreamResourceGetBucketBoundaries:18"
  input: "boosted_trees/BoostedTreesQuantileStreamResourceGetBucketBoundaries:19"
  input: "boosted_trees/are_boundaries_ready/Read/ReadVariableOp"
  input: "boosted_trees/center_bias_needed/Read/ReadVariableOp"
  input: "boosted_trees/BoostedTreesSerializeEnsemble"
  input: "boosted_trees/BoostedTreesSerializeEnsemble:1"
  input: "global_step/Read/ReadVariableOp"
  device: "/device:CPU:0"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_BOOL
        type: DT_BOOL
        type: DT_INT64
        type: DT_STRING
        type: DT_INT64
      }
    }
  }
}
node {
  name: "save/control_dependency"
  op: "Identity"
  input: "save/ShardedFilename"
  input: "^save/SaveV2"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@save/ShardedFilename"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/MergeV2Checkpoints/checkpoint_prefixes"
  op: "Pack"
  input: "save/ShardedFilename"
  input: "^save/control_dependency"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "save/MergeV2Checkpoints"
  op: "MergeV2Checkpoints"
  input: "save/MergeV2Checkpoints/checkpoint_prefixes"
  input: "save/Const"
  device: "/device:CPU:0"
  attr {
    key: "delete_old_dirs"
    value {
      b: true
    }
  }
}
node {
  name: "save/Identity"
  op: "Identity"
  input: "save/Const"
  input: "^save/MergeV2Checkpoints"
  input: "^save/control_dependency"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/RestoreV2/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 25
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 25
          }
        }
        string_val: "boosted_trees/QuantileAccumulator:0_bucket_boundaries_0"
        string_val: "boosted_trees/QuantileAccumulator:0_bucket_boundaries_1"
        string_val: "boosted_trees/QuantileAccumulator:0_bucket_boundaries_2"
        string_val: "boosted_trees/QuantileAccumulator:0_bucket_boundaries_3"
        string_val: "boosted_trees/QuantileAccumulator:0_bucket_boundaries_4"
        string_val: "boosted_trees/QuantileAccumulator:0_bucket_boundaries_5"
        string_val: "boosted_trees/QuantileAccumulator:0_bucket_boundaries_6"
        string_val: "boosted_trees/QuantileAccumulator:0_bucket_boundaries_7"
        string_val: "boosted_trees/QuantileAccumulator:0_bucket_boundaries_8"
        string_val: "boosted_trees/QuantileAccumulator:0_bucket_boundaries_9"
        string_val: "boosted_trees/QuantileAccumulator:0_bucket_boundaries_10"
        string_val: "boosted_trees/QuantileAccumulator:0_bucket_boundaries_11"
        string_val: "boosted_trees/QuantileAccumulator:0_bucket_boundaries_12"
        string_val: "boosted_trees/QuantileAccumulator:0_bucket_boundaries_13"
        string_val: "boosted_trees/QuantileAccumulator:0_bucket_boundaries_14"
        string_val: "boosted_trees/QuantileAccumulator:0_bucket_boundaries_15"
        string_val: "boosted_trees/QuantileAccumulator:0_bucket_boundaries_16"
        string_val: "boosted_trees/QuantileAccumulator:0_bucket_boundaries_17"
        string_val: "boosted_trees/QuantileAccumulator:0_bucket_boundaries_18"
        string_val: "boosted_trees/QuantileAccumulator:0_bucket_boundaries_19"
        string_val: "boosted_trees/are_boundaries_ready"
        string_val: "boosted_trees/center_bias_needed"
        string_val: "boosted_trees:0_stamp"
        string_val: "boosted_trees:0_serialized"
        string_val: "global_step"
      }
    }
  }
}
node {
  name: "save/RestoreV2/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 25
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 25
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2/tensor_names"
  input: "save/RestoreV2/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_BOOL
        type: DT_BOOL
        type: DT_INT64
        type: DT_STRING
        type: DT_INT64
      }
    }
  }
}
node {
  name: "save/BoostedTreesQuantileStreamResourceDeserialize"
  op: "BoostedTreesQuantileStreamResourceDeserialize"
  input: "boosted_trees/QuantileAccumulator"
  input: "save/RestoreV2"
  input: "save/RestoreV2:1"
  input: "save/RestoreV2:2"
  input: "save/RestoreV2:3"
  input: "save/RestoreV2:4"
  input: "save/RestoreV2:5"
  input: "save/RestoreV2:6"
  input: "save/RestoreV2:7"
  input: "save/RestoreV2:8"
  input: "save/RestoreV2:9"
  input: "save/RestoreV2:10"
  input: "save/RestoreV2:11"
  input: "save/RestoreV2:12"
  input: "save/RestoreV2:13"
  input: "save/RestoreV2:14"
  input: "save/RestoreV2:15"
  input: "save/RestoreV2:16"
  input: "save/RestoreV2:17"
  input: "save/RestoreV2:18"
  input: "save/RestoreV2:19"
  input: "^boosted_trees/QuantileAccumulator/BoostedTreesCreateQuantileStreamResource"
  attr {
    key: "num_streams"
    value {
      i: 20
    }
  }
}
node {
  name: "save/Identity_1"
  op: "Identity"
  input: "save/RestoreV2:20"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp"
  op: "AssignVariableOp"
  input: "boosted_trees/are_boundaries_ready"
  input: "save/Identity_1"
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "save/Identity_2"
  op: "Identity"
  input: "save/RestoreV2:21"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_1"
  op: "AssignVariableOp"
  input: "boosted_trees/center_bias_needed"
  input: "save/Identity_2"
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "save/BoostedTreesDeserializeEnsemble"
  op: "BoostedTreesDeserializeEnsemble"
  input: "boosted_trees"
  input: "save/RestoreV2:22"
  input: "save/RestoreV2:23"
  input: "^boosted_trees/BoostedTreesCreateEnsemble"
}
node {
  name: "save/Identity_3"
  op: "Identity"
  input: "save/RestoreV2:24"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_2"
  op: "AssignVariableOp"
  input: "global_step"
  input: "save/Identity_3"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "save/restore_shard"
  op: "NoOp"
  input: "^save/AssignVariableOp"
  input: "^save/AssignVariableOp_1"
  input: "^save/AssignVariableOp_2"
  input: "^save/BoostedTreesDeserializeEnsemble"
  input: "^save/BoostedTreesQuantileStreamResourceDeserialize"
}
node {
  name: "save/restore_all"
  op: "NoOp"
  input: "^save/restore_shard"
}
library {
  function {
    signature {
      name: "_make_dataset_zc0X1Dh0vfA"
      output_arg {
        name: "modeldataset"
        type: DT_VARIANT
      }
      description: "Factory function for a dataset."
      is_stateful: true
    }
    node_def {
      name: "optimizations"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 3
              }
            }
            string_val: "map_and_batch_fusion"
            string_val: "noop_elimination"
            string_val: "shuffle_and_repeat_fusion"
          }
        }
      }
    }
    node_def {
      name: "OptimizeDataset/Const"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "gs://credit_card_default/credit_default/preproc/train.csv-00000-of-00002"
            string_val: "gs://credit_card_default/credit_default/preproc/train.csv-00001-of-00002"
          }
        }
      }
    }
    node_def {
      name: "OptimizeDataset/flat_filenames/shape"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
    }
    node_def {
      name: "OptimizeDataset/flat_filenames"
      op: "Reshape"
      input: "OptimizeDataset/Const:output:0"
      input: "OptimizeDataset/flat_filenames/shape:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "OptimizeDataset/TensorSliceDataset"
      op: "TensorSliceDataset"
      input: "OptimizeDataset/flat_filenames:output:0"
      device: "/device:CPU:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_STRING
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "OptimizeDataset/FlatMapDataset"
      op: "FlatMapDataset"
      input: "OptimizeDataset/TensorSliceDataset:handle:0"
      device: "/device:CPU:0"
      attr {
        key: "Targuments"
        value {
          list {
          }
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_Dataset_flat_map_read_one_file_31"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_STRING
          }
        }
      }
    }
    node_def {
      name: "OptimizeDataset/MapDataset"
      op: "MapDataset"
      input: "OptimizeDataset/FlatMapDataset:handle:0"
      device: "/device:CPU:0"
      attr {
        key: "Targuments"
        value {
          list {
          }
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_Dataset_map_decode_csv_110"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_STRING
            type: DT_FLOAT
            type: DT_STRING
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_STRING
            type: DT_STRING
            type: DT_INT32
          }
        }
      }
      attr {
        key: "preserve_cardinality"
        value {
          b: false
        }
      }
      attr {
        key: "use_inter_op_parallelism"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "OptimizeDataset/buffer_size"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 2560
          }
        }
      }
    }
    node_def {
      name: "OptimizeDataset/seed"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 0
          }
        }
      }
    }
    node_def {
      name: "OptimizeDataset/seed2"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 0
          }
        }
      }
    }
    node_def {
      name: "OptimizeDataset/ShuffleDataset"
      op: "ShuffleDataset"
      input: "OptimizeDataset/MapDataset:handle:0"
      input: "OptimizeDataset/buffer_size:output:0"
      input: "OptimizeDataset/seed:output:0"
      input: "OptimizeDataset/seed2:output:0"
      device: "/device:CPU:0"
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_STRING
            type: DT_FLOAT
            type: DT_STRING
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_STRING
            type: DT_STRING
            type: DT_INT32
          }
        }
      }
      attr {
        key: "reshuffle_each_iteration"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "OptimizeDataset/count"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: -1
          }
        }
      }
    }
    node_def {
      name: "OptimizeDataset/RepeatDataset"
      op: "RepeatDataset"
      input: "OptimizeDataset/ShuffleDataset:handle:0"
      input: "OptimizeDataset/count:output:0"
      device: "/device:CPU:0"
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_STRING
            type: DT_FLOAT
            type: DT_STRING
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_STRING
            type: DT_STRING
            type: DT_INT32
          }
        }
      }
    }
    node_def {
      name: "OptimizeDataset/batch_size"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 256
          }
        }
      }
    }
    node_def {
      name: "OptimizeDataset/drop_remainder"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_BOOL
            tensor_shape {
            }
            bool_val: false
          }
        }
      }
    }
    node_def {
      name: "OptimizeDataset/BatchDatasetV2"
      op: "BatchDatasetV2"
      input: "OptimizeDataset/RepeatDataset:handle:0"
      input: "OptimizeDataset/batch_size:output:0"
      input: "OptimizeDataset/drop_remainder:output:0"
      device: "/device:CPU:0"
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_STRING
            type: DT_FLOAT
            type: DT_STRING
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_STRING
            type: DT_STRING
            type: DT_INT32
          }
        }
      }
      attr {
        key: "parallel_copy"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "OptimizeDataset"
      op: "OptimizeDataset"
      input: "OptimizeDataset/BatchDatasetV2:handle:0"
      input: "optimizations:output:0"
      device: "/device:CPU:0"
      attr {
        key: "optimization_configs"
        value {
          list {
            s: "map_vectorization:use_choose_fastest:false"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_STRING
            type: DT_FLOAT
            type: DT_STRING
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_STRING
            type: DT_STRING
            type: DT_INT32
          }
        }
      }
    }
    node_def {
      name: "ModelDataset"
      op: "ModelDataset"
      input: "OptimizeDataset:handle:0"
      device: "/device:CPU:0"
      attr {
        key: "algorithm"
        value {
          i: 0
        }
      }
      attr {
        key: "cpu_budget"
        value {
          i: 0
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_STRING
            type: DT_FLOAT
            type: DT_STRING
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_STRING
            type: DT_STRING
            type: DT_INT32
          }
        }
      }
    }
    ret {
      key: "modeldataset"
      value: "ModelDataset:handle:0"
    }
    attr {
      key: "_disable_call_shape_inference"
      value {
        b: true
      }
    }
  }
  function {
    signature {
      name: "cond_false_718"
      input_arg {
        name: "identity_cond_readvariableop"
        type: DT_BOOL
      }
      input_arg {
        name: "add_boosted_trees_stamp_token"
        type: DT_INT64
      }
      input_arg {
        name: "resourceaccumulatorsetglobalstep_boosted_trees_conditional_accumulator"
        type: DT_RESOURCE
      }
      input_arg {
        name: "resourceaccumulatorsetglobalstep_1_boosted_trees_conditional_accumulator_1"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_BOOL
      }
      is_stateful: true
    }
    node_def {
      name: "add/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 1
          }
        }
      }
    }
    node_def {
      name: "add"
      op: "AddV2"
      input: "add_boosted_trees_stamp_token"
      input: "add/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "ResourceAccumulatorSetGlobalStep"
      op: "ResourceAccumulatorSetGlobalStep"
      input: "resourceaccumulatorsetglobalstep_boosted_trees_conditional_accumulator"
      input: "add:z:0"
      attr {
        key: "_output_shapes"
        value {
          list {
          }
        }
      }
    }
    node_def {
      name: "add_1/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 1
          }
        }
      }
    }
    node_def {
      name: "add_1"
      op: "AddV2"
      input: "add_boosted_trees_stamp_token"
      input: "add_1/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "ResourceAccumulatorSetGlobalStep_1"
      op: "ResourceAccumulatorSetGlobalStep"
      input: "resourceaccumulatorsetglobalstep_1_boosted_trees_conditional_accumulator_1"
      input: "add_1:z:0"
      attr {
        key: "_output_shapes"
        value {
          list {
          }
        }
      }
    }
    node_def {
      name: "group_deps"
      op: "NoOp"
      input: "^ResourceAccumulatorSetGlobalStep"
      input: "^ResourceAccumulatorSetGlobalStep_1"
      attr {
        key: "_output_shapes"
        value {
          list {
          }
        }
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "identity_cond_readvariableop"
      input: "^group_deps"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
          }
          shape {
          }
          shape {
            unknown_rank: true
          }
          shape {
            unknown_rank: true
          }
        }
      }
    }
    arg_attr {
      value {
      }
    }
    arg_attr {
      key: 1
      value {
      }
    }
    arg_attr {
      key: 2
      value {
      }
    }
    arg_attr {
      key: 3
      value {
      }
    }
  }
  function {
    signature {
      name: "__inference_Dataset_map_decode_csv_110"
      input_arg {
        name: "args_0"
        type: DT_STRING
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_2"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_3"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_4"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_5"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_6"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_7"
        type: DT_STRING
      }
      output_arg {
        name: "identity_8"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_9"
        type: DT_STRING
      }
      output_arg {
        name: "identity_10"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_11"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_12"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_13"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_14"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_15"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_16"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_17"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_18"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_19"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_20"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_21"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_22"
        type: DT_STRING
      }
      output_arg {
        name: "identity_23"
        type: DT_STRING
      }
      output_arg {
        name: "identity_24"
        type: DT_INT32
      }
    }
    node_def {
      name: "DecodeCSV/record_defaults_0"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 1
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "DecodeCSV/record_defaults_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "null"
          }
        }
      }
    }
    node_def {
      name: "DecodeCSV/record_defaults_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "null"
          }
        }
      }
    }
    node_def {
      name: "DecodeCSV/record_defaults_3"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "null"
          }
        }
      }
    }
    node_def {
      name: "DecodeCSV/record_defaults_4"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 1
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "DecodeCSV/record_defaults_5"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 1
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "DecodeCSV/record_defaults_6"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 1
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "DecodeCSV/record_defaults_7"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 1
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "DecodeCSV/record_defaults_8"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 1
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "DecodeCSV/record_defaults_9"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 1
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "DecodeCSV/record_defaults_10"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 1
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "DecodeCSV/record_defaults_11"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 1
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "DecodeCSV/record_defaults_12"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 1
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "DecodeCSV/record_defaults_13"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 1
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "DecodeCSV/record_defaults_14"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 1
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "DecodeCSV/record_defaults_15"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 1
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "DecodeCSV/record_defaults_16"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 1
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "DecodeCSV/record_defaults_17"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 1
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "DecodeCSV/record_defaults_18"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 1
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "DecodeCSV/record_defaults_19"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 1
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "DecodeCSV/record_defaults_20"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 1
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "DecodeCSV/record_defaults_21"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 1
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "DecodeCSV/record_defaults_22"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 1
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "DecodeCSV/record_defaults_23"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "DecodeCSV/record_defaults_24"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "nokey"
          }
        }
      }
    }
    node_def {
      name: "DecodeCSV"
      op: "DecodeCSV"
      input: "args_0"
      input: "DecodeCSV/record_defaults_0:output:0"
      input: "DecodeCSV/record_defaults_1:output:0"
      input: "DecodeCSV/record_defaults_2:output:0"
      input: "DecodeCSV/record_defaults_3:output:0"
      input: "DecodeCSV/record_defaults_4:output:0"
      input: "DecodeCSV/record_defaults_5:output:0"
      input: "DecodeCSV/record_defaults_6:output:0"
      input: "DecodeCSV/record_defaults_7:output:0"
      input: "DecodeCSV/record_defaults_8:output:0"
      input: "DecodeCSV/record_defaults_9:output:0"
      input: "DecodeCSV/record_defaults_10:output:0"
      input: "DecodeCSV/record_defaults_11:output:0"
      input: "DecodeCSV/record_defaults_12:output:0"
      input: "DecodeCSV/record_defaults_13:output:0"
      input: "DecodeCSV/record_defaults_14:output:0"
      input: "DecodeCSV/record_defaults_15:output:0"
      input: "DecodeCSV/record_defaults_16:output:0"
      input: "DecodeCSV/record_defaults_17:output:0"
      input: "DecodeCSV/record_defaults_18:output:0"
      input: "DecodeCSV/record_defaults_19:output:0"
      input: "DecodeCSV/record_defaults_20:output:0"
      input: "DecodeCSV/record_defaults_21:output:0"
      input: "DecodeCSV/record_defaults_22:output:0"
      input: "DecodeCSV/record_defaults_23:output:0"
      input: "DecodeCSV/record_defaults_24:output:0"
      attr {
        key: "OUT_TYPE"
        value {
          list {
            type: DT_FLOAT
            type: DT_STRING
            type: DT_STRING
            type: DT_STRING
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_INT32
            type: DT_STRING
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
          }
        }
      }
      attr {
        key: "field_delim"
        value {
          s: ","
        }
      }
      attr {
        key: "na_value"
        value {
          s: ""
        }
      }
      attr {
        key: "select_cols"
        value {
          list {
          }
        }
      }
      attr {
        key: "use_quote_delim"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "DecodeCSV:output:4"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "Identity_1"
      op: "Identity"
      input: "DecodeCSV:output:11"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "Identity_2"
      op: "Identity"
      input: "DecodeCSV:output:12"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "Identity_3"
      op: "Identity"
      input: "DecodeCSV:output:13"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "Identity_4"
      op: "Identity"
      input: "DecodeCSV:output:14"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "Identity_5"
      op: "Identity"
      input: "DecodeCSV:output:15"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "Identity_6"
      op: "Identity"
      input: "DecodeCSV:output:16"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "Identity_7"
      op: "Identity"
      input: "DecodeCSV:output:2"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "Identity_8"
      op: "Identity"
      input: "DecodeCSV:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "Identity_9"
      op: "Identity"
      input: "DecodeCSV:output:3"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "Identity_10"
      op: "Identity"
      input: "DecodeCSV:output:5"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "Identity_11"
      op: "Identity"
      input: "DecodeCSV:output:6"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "Identity_12"
      op: "Identity"
      input: "DecodeCSV:output:7"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "Identity_13"
      op: "Identity"
      input: "DecodeCSV:output:8"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "Identity_14"
      op: "Identity"
      input: "DecodeCSV:output:9"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "Identity_15"
      op: "Identity"
      input: "DecodeCSV:output:10"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "Identity_16"
      op: "Identity"
      input: "DecodeCSV:output:17"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "Identity_17"
      op: "Identity"
      input: "DecodeCSV:output:18"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "Identity_18"
      op: "Identity"
      input: "DecodeCSV:output:19"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "Identity_19"
      op: "Identity"
      input: "DecodeCSV:output:20"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "Identity_20"
      op: "Identity"
      input: "DecodeCSV:output:21"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "Identity_21"
      op: "Identity"
      input: "DecodeCSV:output:22"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "Identity_22"
      op: "Identity"
      input: "DecodeCSV:output:1"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "Identity_23"
      op: "Identity"
      input: "DecodeCSV:output:24"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "Identity_24"
      op: "Identity"
      input: "DecodeCSV:output:23"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    ret {
      key: "identity_1"
      value: "Identity_1:output:0"
    }
    ret {
      key: "identity_10"
      value: "Identity_10:output:0"
    }
    ret {
      key: "identity_11"
      value: "Identity_11:output:0"
    }
    ret {
      key: "identity_12"
      value: "Identity_12:output:0"
    }
    ret {
      key: "identity_13"
      value: "Identity_13:output:0"
    }
    ret {
      key: "identity_14"
      value: "Identity_14:output:0"
    }
    ret {
      key: "identity_15"
      value: "Identity_15:output:0"
    }
    ret {
      key: "identity_16"
      value: "Identity_16:output:0"
    }
    ret {
      key: "identity_17"
      value: "Identity_17:output:0"
    }
    ret {
      key: "identity_18"
      value: "Identity_18:output:0"
    }
    ret {
      key: "identity_19"
      value: "Identity_19:output:0"
    }
    ret {
      key: "identity_2"
      value: "Identity_2:output:0"
    }
    ret {
      key: "identity_20"
      value: "Identity_20:output:0"
    }
    ret {
      key: "identity_21"
      value: "Identity_21:output:0"
    }
    ret {
      key: "identity_22"
      value: "Identity_22:output:0"
    }
    ret {
      key: "identity_23"
      value: "Identity_23:output:0"
    }
    ret {
      key: "identity_24"
      value: "Identity_24:output:0"
    }
    ret {
      key: "identity_3"
      value: "Identity_3:output:0"
    }
    ret {
      key: "identity_4"
      value: "Identity_4:output:0"
    }
    ret {
      key: "identity_5"
      value: "Identity_5:output:0"
    }
    ret {
      key: "identity_6"
      value: "Identity_6:output:0"
    }
    ret {
      key: "identity_7"
      value: "Identity_7:output:0"
    }
    ret {
      key: "identity_8"
      value: "Identity_8:output:0"
    }
    ret {
      key: "identity_9"
      value: "Identity_9:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "args_0"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "wait_until_n_batches_accumulated_true_798"
      input_arg {
        name: "resourceaccumulatortakegradient_boosted_trees_conditional_accumulator"
        type: DT_RESOURCE
      }
      input_arg {
        name: "resourceaccumulatortakegradient_1_boosted_trees_conditional_accumulator_1"
        type: DT_RESOURCE
      }
      input_arg {
        name: "boostedtreescalculatebestgainsperfeature_boosted_trees_last_layer_nodes_range"
        type: DT_INT32
      }
      input_arg {
        name: "boostedtreesupdateensemble_boosted_trees"
        type: DT_RESOURCE
      }
      input_arg {
        name: "identity_greaterequal"
        type: DT_BOOL
      }
      output_arg {
        name: "identity"
        type: DT_BOOL
      }
      is_stateful: true
    }
    node_def {
      name: "ResourceAccumulatorTakeGradient/num_required"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "ResourceAccumulatorTakeGradient"
      op: "ResourceAccumulatorTakeGradient"
      input: "resourceaccumulatortakegradient_boosted_trees_conditional_accumulator"
      input: "ResourceAccumulatorTakeGradient/num_required:output:0"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 20
              }
              dim {
                size: 7
              }
              dim {
                size: 100
              }
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "unstack"
      op: "Unpack"
      input: "ResourceAccumulatorTakeGradient:average:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 7
              }
              dim {
                size: 100
              }
              dim {
                size: 2
              }
            }
            shape {
              dim {
                size: 7
              }
              dim {
                size: 100
              }
              dim {
                size: 2
              }
            }
            shape {
              dim {
                size: 7
              }
              dim {
                size: 100
              }
              dim {
                size: 2
              }
            }
            shape {
              dim {
                size: 7
              }
              dim {
                size: 100
              }
              dim {
                size: 2
              }
            }
            shape {
              dim {
                size: 7
              }
              dim {
                size: 100
              }
              dim {
                size: 2
              }
            }
            shape {
              dim {
                size: 7
              }
              dim {
                size: 100
              }
              dim {
                size: 2
              }
            }
            shape {
              dim {
                size: 7
              }
              dim {
                size: 100
              }
              dim {
                size: 2
              }
            }
            shape {
              dim {
                size: 7
              }
              dim {
                size: 100
              }
              dim {
                size: 2
              }
            }
            shape {
              dim {
                size: 7
              }
              dim {
                size: 100
              }
              dim {
                size: 2
              }
            }
            shape {
              dim {
                size: 7
              }
              dim {
                size: 100
              }
              dim {
                size: 2
              }
            }
            shape {
              dim {
                size: 7
              }
              dim {
                size: 100
              }
              dim {
                size: 2
              }
            }
            shape {
              dim {
                size: 7
              }
              dim {
                size: 100
              }
              dim {
                size: 2
              }
            }
            shape {
              dim {
                size: 7
              }
              dim {
                size: 100
              }
              dim {
                size: 2
              }
            }
            shape {
              dim {
                size: 7
              }
              dim {
                size: 100
              }
              dim {
                size: 2
              }
            }
            shape {
              dim {
                size: 7
              }
              dim {
                size: 100
              }
              dim {
                size: 2
              }
            }
            shape {
              dim {
                size: 7
              }
              dim {
                size: 100
              }
              dim {
                size: 2
              }
            }
            shape {
              dim {
                size: 7
              }
              dim {
                size: 100
              }
              dim {
                size: 2
              }
            }
            shape {
              dim {
                size: 7
              }
              dim {
                size: 100
              }
              dim {
                size: 2
              }
            }
            shape {
              dim {
                size: 7
              }
              dim {
                size: 100
              }
              dim {
                size: 2
              }
            }
            shape {
              dim {
                size: 7
              }
              dim {
                size: 100
              }
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
      attr {
        key: "num"
        value {
          i: 20
        }
      }
    }
    node_def {
      name: "ResourceAccumulatorTakeGradient_1/num_required"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "ResourceAccumulatorTakeGradient_1"
      op: "ResourceAccumulatorTakeGradient"
      input: "resourceaccumulatortakegradient_1_boosted_trees_conditional_accumulator_1"
      input: "ResourceAccumulatorTakeGradient_1/num_required:output:0"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
              dim {
                size: 7
              }
              dim {
                size: 2
              }
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "unstack_1"
      op: "Unpack"
      input: "ResourceAccumulatorTakeGradient_1:average:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 7
              }
              dim {
                size: 2
              }
              dim {
                size: 2
              }
            }
            shape {
              dim {
                size: 7
              }
              dim {
                size: 2
              }
              dim {
                size: 2
              }
            }
            shape {
              dim {
                size: 7
              }
              dim {
                size: 2
              }
              dim {
                size: 2
              }
            }
            shape {
              dim {
                size: 7
              }
              dim {
                size: 2
              }
              dim {
                size: 2
              }
            }
            shape {
              dim {
                size: 7
              }
              dim {
                size: 2
              }
              dim {
                size: 2
              }
            }
            shape {
              dim {
                size: 7
              }
              dim {
                size: 2
              }
              dim {
                size: 2
              }
            }
            shape {
              dim {
                size: 7
              }
              dim {
                size: 2
              }
              dim {
                size: 2
              }
            }
            shape {
              dim {
                size: 7
              }
              dim {
                size: 2
              }
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
      attr {
        key: "num"
        value {
          i: 8
        }
      }
    }
    node_def {
      name: "BoostedTreesCalculateBestGainsPerFeature/l1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.009999999776482582
          }
        }
      }
    }
    node_def {
      name: "BoostedTreesCalculateBestGainsPerFeature/l2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.009999999776482582
          }
        }
      }
    }
    node_def {
      name: "BoostedTreesCalculateBestGainsPerFeature/tree_complexity"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "BoostedTreesCalculateBestGainsPerFeature/min_node_weight"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "BoostedTreesCalculateBestGainsPerFeature"
      op: "BoostedTreesCalculateBestGainsPerFeature"
      input: "boostedtreescalculatebestgainsperfeature_boosted_trees_last_layer_nodes_range"
      input: "unstack:output:0"
      input: "unstack:output:1"
      input: "unstack:output:2"
      input: "unstack:output:3"
      input: "unstack:output:4"
      input: "unstack:output:5"
      input: "unstack:output:6"
      input: "unstack:output:7"
      input: "unstack:output:8"
      input: "unstack:output:9"
      input: "unstack:output:10"
      input: "unstack:output:11"
      input: "unstack:output:12"
      input: "unstack:output:13"
      input: "unstack:output:14"
      input: "unstack:output:15"
      input: "unstack:output:16"
      input: "unstack:output:17"
      input: "unstack:output:18"
      input: "unstack:output:19"
      input: "BoostedTreesCalculateBestGainsPerFeature/l1:output:0"
      input: "BoostedTreesCalculateBestGainsPerFeature/l2:output:0"
      input: "BoostedTreesCalculateBestGainsPerFeature/tree_complexity:output:0"
      input: "BoostedTreesCalculateBestGainsPerFeature/min_node_weight:output:0"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "max_splits"
        value {
          i: 7
        }
      }
      attr {
        key: "num_features"
        value {
          i: 20
        }
      }
    }
    node_def {
      name: "BoostedTreesCalculateBestGainsPerFeature_1/l1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.009999999776482582
          }
        }
      }
    }
    node_def {
      name: "BoostedTreesCalculateBestGainsPerFeature_1/l2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.009999999776482582
          }
        }
      }
    }
    node_def {
      name: "BoostedTreesCalculateBestGainsPerFeature_1/tree_complexity"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "BoostedTreesCalculateBestGainsPerFeature_1/min_node_weight"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "BoostedTreesCalculateBestGainsPerFeature_1"
      op: "BoostedTreesCalculateBestGainsPerFeature"
      input: "boostedtreescalculatebestgainsperfeature_boosted_trees_last_layer_nodes_range"
      input: "unstack_1:output:0"
      input: "unstack_1:output:1"
      input: "unstack_1:output:2"
      input: "unstack_1:output:3"
      input: "unstack_1:output:4"
      input: "unstack_1:output:5"
      input: "unstack_1:output:6"
      input: "unstack_1:output:7"
      input: "BoostedTreesCalculateBestGainsPerFeature_1/l1:output:0"
      input: "BoostedTreesCalculateBestGainsPerFeature_1/l2:output:0"
      input: "BoostedTreesCalculateBestGainsPerFeature_1/tree_complexity:output:0"
      input: "BoostedTreesCalculateBestGainsPerFeature_1/min_node_weight:output:0"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "max_splits"
        value {
          i: 7
        }
      }
      attr {
        key: "num_features"
        value {
          i: 8
        }
      }
    }
    node_def {
      name: "BoostedTreesUpdateEnsemble/feature_ids"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 28
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 28
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000\004\000\000\000\005\000\000\000\006\000\000\000\r\000\000\000\016\000\000\000\017\000\000\000\020\000\000\000\021\000\000\000\022\000\000\000\023\000\000\000\024\000\000\000\025\000\000\000\026\000\000\000\027\000\000\000\030\000\000\000\031\000\000\000\007\000\000\000\010\000\000\000\t\000\000\000\n\000\000\000\013\000\000\000\014\000\000\000\032\000\000\000\033\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "BoostedTreesUpdateEnsemble/max_depth"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 3
          }
        }
      }
    }
    node_def {
      name: "BoostedTreesUpdateEnsemble/learning_rate"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.009999999776482582
          }
        }
      }
    }
    node_def {
      name: "BoostedTreesUpdateEnsemble"
      op: "BoostedTreesUpdateEnsemble"
      input: "boostedtreesupdateensemble_boosted_trees"
      input: "BoostedTreesUpdateEnsemble/feature_ids:output:0"
      input: "BoostedTreesCalculateBestGainsPerFeature:node_ids_list:0"
      input: "BoostedTreesCalculateBestGainsPerFeature:node_ids_list:1"
      input: "BoostedTreesCalculateBestGainsPerFeature:node_ids_list:2"
      input: "BoostedTreesCalculateBestGainsPerFeature:node_ids_list:3"
      input: "BoostedTreesCalculateBestGainsPerFeature:node_ids_list:4"
      input: "BoostedTreesCalculateBestGainsPerFeature:node_ids_list:5"
      input: "BoostedTreesCalculateBestGainsPerFeature:node_ids_list:6"
      input: "BoostedTreesCalculateBestGainsPerFeature:node_ids_list:7"
      input: "BoostedTreesCalculateBestGainsPerFeature:node_ids_list:8"
      input: "BoostedTreesCalculateBestGainsPerFeature:node_ids_list:9"
      input: "BoostedTreesCalculateBestGainsPerFeature:node_ids_list:10"
      input: "BoostedTreesCalculateBestGainsPerFeature:node_ids_list:11"
      input: "BoostedTreesCalculateBestGainsPerFeature:node_ids_list:12"
      input: "BoostedTreesCalculateBestGainsPerFeature:node_ids_list:13"
      input: "BoostedTreesCalculateBestGainsPerFeature:node_ids_list:14"
      input: "BoostedTreesCalculateBestGainsPerFeature:node_ids_list:15"
      input: "BoostedTreesCalculateBestGainsPerFeature:node_ids_list:16"
      input: "BoostedTreesCalculateBestGainsPerFeature:node_ids_list:17"
      input: "BoostedTreesCalculateBestGainsPerFeature:node_ids_list:18"
      input: "BoostedTreesCalculateBestGainsPerFeature:node_ids_list:19"
      input: "BoostedTreesCalculateBestGainsPerFeature_1:node_ids_list:0"
      input: "BoostedTreesCalculateBestGainsPerFeature_1:node_ids_list:1"
      input: "BoostedTreesCalculateBestGainsPerFeature_1:node_ids_list:2"
      input: "BoostedTreesCalculateBestGainsPerFeature_1:node_ids_list:3"
      input: "BoostedTreesCalculateBestGainsPerFeature_1:node_ids_list:4"
      input: "BoostedTreesCalculateBestGainsPerFeature_1:node_ids_list:5"
      input: "BoostedTreesCalculateBestGainsPerFeature_1:node_ids_list:6"
      input: "BoostedTreesCalculateBestGainsPerFeature_1:node_ids_list:7"
      input: "BoostedTreesCalculateBestGainsPerFeature:gains_list:0"
      input: "BoostedTreesCalculateBestGainsPerFeature:gains_list:1"
      input: "BoostedTreesCalculateBestGainsPerFeature:gains_list:2"
      input: "BoostedTreesCalculateBestGainsPerFeature:gains_list:3"
      input: "BoostedTreesCalculateBestGainsPerFeature:gains_list:4"
      input: "BoostedTreesCalculateBestGainsPerFeature:gains_list:5"
      input: "BoostedTreesCalculateBestGainsPerFeature:gains_list:6"
      input: "BoostedTreesCalculateBestGainsPerFeature:gains_list:7"
      input: "BoostedTreesCalculateBestGainsPerFeature:gains_list:8"
      input: "BoostedTreesCalculateBestGainsPerFeature:gains_list:9"
      input: "BoostedTreesCalculateBestGainsPerFeature:gains_list:10"
      input: "BoostedTreesCalculateBestGainsPerFeature:gains_list:11"
      input: "BoostedTreesCalculateBestGainsPerFeature:gains_list:12"
      input: "BoostedTreesCalculateBestGainsPerFeature:gains_list:13"
      input: "BoostedTreesCalculateBestGainsPerFeature:gains_list:14"
      input: "BoostedTreesCalculateBestGainsPerFeature:gains_list:15"
      input: "BoostedTreesCalculateBestGainsPerFeature:gains_list:16"
      input: "BoostedTreesCalculateBestGainsPerFeature:gains_list:17"
      input: "BoostedTreesCalculateBestGainsPerFeature:gains_list:18"
      input: "BoostedTreesCalculateBestGainsPerFeature:gains_list:19"
      input: "BoostedTreesCalculateBestGainsPerFeature_1:gains_list:0"
      input: "BoostedTreesCalculateBestGainsPerFeature_1:gains_list:1"
      input: "BoostedTreesCalculateBestGainsPerFeature_1:gains_list:2"
      input: "BoostedTreesCalculateBestGainsPerFeature_1:gains_list:3"
      input: "BoostedTreesCalculateBestGainsPerFeature_1:gains_list:4"
      input: "BoostedTreesCalculateBestGainsPerFeature_1:gains_list:5"
      input: "BoostedTreesCalculateBestGainsPerFeature_1:gains_list:6"
      input: "BoostedTreesCalculateBestGainsPerFeature_1:gains_list:7"
      input: "BoostedTreesCalculateBestGainsPerFeature:thresholds_list:0"
      input: "BoostedTreesCalculateBestGainsPerFeature:thresholds_list:1"
      input: "BoostedTreesCalculateBestGainsPerFeature:thresholds_list:2"
      input: "BoostedTreesCalculateBestGainsPerFeature:thresholds_list:3"
      input: "BoostedTreesCalculateBestGainsPerFeature:thresholds_list:4"
      input: "BoostedTreesCalculateBestGainsPerFeature:thresholds_list:5"
      input: "BoostedTreesCalculateBestGainsPerFeature:thresholds_list:6"
      input: "BoostedTreesCalculateBestGainsPerFeature:thresholds_list:7"
      input: "BoostedTreesCalculateBestGainsPerFeature:thresholds_list:8"
      input: "BoostedTreesCalculateBestGainsPerFeature:thresholds_list:9"
      input: "BoostedTreesCalculateBestGainsPerFeature:thresholds_list:10"
      input: "BoostedTreesCalculateBestGainsPerFeature:thresholds_list:11"
      input: "BoostedTreesCalculateBestGainsPerFeature:thresholds_list:12"
      input: "BoostedTreesCalculateBestGainsPerFeature:thresholds_list:13"
      input: "BoostedTreesCalculateBestGainsPerFeature:thresholds_list:14"
      input: "BoostedTreesCalculateBestGainsPerFeature:thresholds_list:15"
      input: "BoostedTreesCalculateBestGainsPerFeature:thresholds_list:16"
      input: "BoostedTreesCalculateBestGainsPerFeature:thresholds_list:17"
      input: "BoostedTreesCalculateBestGainsPerFeature:thresholds_list:18"
      input: "BoostedTreesCalculateBestGainsPerFeature:thresholds_list:19"
      input: "BoostedTreesCalculateBestGainsPerFeature_1:thresholds_list:0"
      input: "BoostedTreesCalculateBestGainsPerFeature_1:thresholds_list:1"
      input: "BoostedTreesCalculateBestGainsPerFeature_1:thresholds_list:2"
      input: "BoostedTreesCalculateBestGainsPerFeature_1:thresholds_list:3"
      input: "BoostedTreesCalculateBestGainsPerFeature_1:thresholds_list:4"
      input: "BoostedTreesCalculateBestGainsPerFeature_1:thresholds_list:5"
      input: "BoostedTreesCalculateBestGainsPerFeature_1:thresholds_list:6"
      input: "BoostedTreesCalculateBestGainsPerFeature_1:thresholds_list:7"
      input: "BoostedTreesCalculateBestGainsPerFeature:left_node_contribs_list:0"
      input: "BoostedTreesCalculateBestGainsPerFeature:left_node_contribs_list:1"
      input: "BoostedTreesCalculateBestGainsPerFeature:left_node_contribs_list:2"
      input: "BoostedTreesCalculateBestGainsPerFeature:left_node_contribs_list:3"
      input: "BoostedTreesCalculateBestGainsPerFeature:left_node_contribs_list:4"
      input: "BoostedTreesCalculateBestGainsPerFeature:left_node_contribs_list:5"
      input: "BoostedTreesCalculateBestGainsPerFeature:left_node_contribs_list:6"
      input: "BoostedTreesCalculateBestGainsPerFeature:left_node_contribs_list:7"
      input: "BoostedTreesCalculateBestGainsPerFeature:left_node_contribs_list:8"
      input: "BoostedTreesCalculateBestGainsPerFeature:left_node_contribs_list:9"
      input: "BoostedTreesCalculateBestGainsPerFeature:left_node_contribs_list:10"
      input: "BoostedTreesCalculateBestGainsPerFeature:left_node_contribs_list:11"
      input: "BoostedTreesCalculateBestGainsPerFeature:left_node_contribs_list:12"
      input: "BoostedTreesCalculateBestGainsPerFeature:left_node_contribs_list:13"
      input: "BoostedTreesCalculateBestGainsPerFeature:left_node_contribs_list:14"
      input: "BoostedTreesCalculateBestGainsPerFeature:left_node_contribs_list:15"
      input: "BoostedTreesCalculateBestGainsPerFeature:left_node_contribs_list:16"
      input: "BoostedTreesCalculateBestGainsPerFeature:left_node_contribs_list:17"
      input: "BoostedTreesCalculateBestGainsPerFeature:left_node_contribs_list:18"
      input: "BoostedTreesCalculateBestGainsPerFeature:left_node_contribs_list:19"
      input: "BoostedTreesCalculateBestGainsPerFeature_1:left_node_contribs_list:0"
      input: "BoostedTreesCalculateBestGainsPerFeature_1:left_node_contribs_list:1"
      input: "BoostedTreesCalculateBestGainsPerFeature_1:left_node_contribs_list:2"
      input: "BoostedTreesCalculateBestGainsPerFeature_1:left_node_contribs_list:3"
      input: "BoostedTreesCalculateBestGainsPerFeature_1:left_node_contribs_list:4"
      input: "BoostedTreesCalculateBestGainsPerFeature_1:left_node_contribs_list:5"
      input: "BoostedTreesCalculateBestGainsPerFeature_1:left_node_contribs_list:6"
      input: "BoostedTreesCalculateBestGainsPerFeature_1:left_node_contribs_list:7"
      input: "BoostedTreesCalculateBestGainsPerFeature:right_node_contribs_list:0"
      input: "BoostedTreesCalculateBestGainsPerFeature:right_node_contribs_list:1"
      input: "BoostedTreesCalculateBestGainsPerFeature:right_node_contribs_list:2"
      input: "BoostedTreesCalculateBestGainsPerFeature:right_node_contribs_list:3"
      input: "BoostedTreesCalculateBestGainsPerFeature:right_node_contribs_list:4"
      input: "BoostedTreesCalculateBestGainsPerFeature:right_node_contribs_list:5"
      input: "BoostedTreesCalculateBestGainsPerFeature:right_node_contribs_list:6"
      input: "BoostedTreesCalculateBestGainsPerFeature:right_node_contribs_list:7"
      input: "BoostedTreesCalculateBestGainsPerFeature:right_node_contribs_list:8"
      input: "BoostedTreesCalculateBestGainsPerFeature:right_node_contribs_list:9"
      input: "BoostedTreesCalculateBestGainsPerFeature:right_node_contribs_list:10"
      input: "BoostedTreesCalculateBestGainsPerFeature:right_node_contribs_list:11"
      input: "BoostedTreesCalculateBestGainsPerFeature:right_node_contribs_list:12"
      input: "BoostedTreesCalculateBestGainsPerFeature:right_node_contribs_list:13"
      input: "BoostedTreesCalculateBestGainsPerFeature:right_node_contribs_list:14"
      input: "BoostedTreesCalculateBestGainsPerFeature:right_node_contribs_list:15"
      input: "BoostedTreesCalculateBestGainsPerFeature:right_node_contribs_list:16"
      input: "BoostedTreesCalculateBestGainsPerFeature:right_node_contribs_list:17"
      input: "BoostedTreesCalculateBestGainsPerFeature:right_node_contribs_list:18"
      input: "BoostedTreesCalculateBestGainsPerFeature:right_node_contribs_list:19"
      input: "BoostedTreesCalculateBestGainsPerFeature_1:right_node_contribs_list:0"
      input: "BoostedTreesCalculateBestGainsPerFeature_1:right_node_contribs_list:1"
      input: "BoostedTreesCalculateBestGainsPerFeature_1:right_node_contribs_list:2"
      input: "BoostedTreesCalculateBestGainsPerFeature_1:right_node_contribs_list:3"
      input: "BoostedTreesCalculateBestGainsPerFeature_1:right_node_contribs_list:4"
      input: "BoostedTreesCalculateBestGainsPerFeature_1:right_node_contribs_list:5"
      input: "BoostedTreesCalculateBestGainsPerFeature_1:right_node_contribs_list:6"
      input: "BoostedTreesCalculateBestGainsPerFeature_1:right_node_contribs_list:7"
      input: "BoostedTreesUpdateEnsemble/max_depth:output:0"
      input: "BoostedTreesUpdateEnsemble/learning_rate:output:0"
      attr {
        key: "_output_shapes"
        value {
          list {
          }
        }
      }
      attr {
        key: "num_features"
        value {
          i: 28
        }
      }
      attr {
        key: "pruning_mode"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "identity_greaterequal"
      input: "^BoostedTreesUpdateEnsemble"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            unknown_rank: true
          }
          shape {
            unknown_rank: true
          }
          shape {
            dim {
              size: 2
            }
          }
          shape {
            unknown_rank: true
          }
          shape {
          }
        }
      }
    }
    arg_attr {
      value {
      }
    }
    arg_attr {
      key: 1
      value {
      }
    }
    arg_attr {
      key: 2
      value {
      }
    }
    arg_attr {
      key: 3
      value {
      }
    }
    arg_attr {
      key: 4
      value {
      }
    }
  }
  function {
    signature {
      name: "wait_until_n_batches_for_bias_accumulated_false_701"
      input_arg {
        name: "placeholder"
        type: DT_RESOURCE
      }
      input_arg {
        name: "placeholder_1"
        type: DT_RESOURCE
      }
      input_arg {
        name: "placeholder_2"
        type: DT_RESOURCE
      }
      input_arg {
        name: "placeholder_3"
        type: DT_INT64
      }
      input_arg {
        name: "placeholder_4"
        type: DT_RESOURCE
      }
      input_arg {
        name: "placeholder_5"
        type: DT_RESOURCE
      }
      input_arg {
        name: "identity_greaterequal"
        type: DT_BOOL
      }
      output_arg {
        name: "identity"
        type: DT_BOOL
      }
    }
    node_def {
      name: "NoOp"
      op: "NoOp"
      attr {
        key: "_output_shapes"
        value {
          list {
          }
        }
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "identity_greaterequal"
      input: "^NoOp"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            unknown_rank: true
          }
          shape {
            unknown_rank: true
          }
          shape {
            unknown_rank: true
          }
          shape {
          }
          shape {
            unknown_rank: true
          }
          shape {
            unknown_rank: true
          }
          shape {
          }
        }
      }
    }
    arg_attr {
      value {
      }
    }
    arg_attr {
      key: 1
      value {
      }
    }
    arg_attr {
      key: 2
      value {
      }
    }
    arg_attr {
      key: 3
      value {
      }
    }
    arg_attr {
      key: 4
      value {
      }
    }
    arg_attr {
      key: 5
      value {
      }
    }
    arg_attr {
      key: 6
      value {
      }
    }
  }
  function {
    signature {
      name: "cond_true_717"
      input_arg {
        name: "identity_cond_readvariableop"
        type: DT_BOOL
      }
      input_arg {
        name: "placeholder"
        type: DT_INT64
      }
      input_arg {
        name: "placeholder_1"
        type: DT_RESOURCE
      }
      input_arg {
        name: "placeholder_2"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_BOOL
      }
    }
    node_def {
      name: "NoOp"
      op: "NoOp"
      attr {
        key: "_output_shapes"
        value {
          list {
          }
        }
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "identity_cond_readvariableop"
      input: "^NoOp"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
          }
          shape {
          }
          shape {
            unknown_rank: true
          }
          shape {
            unknown_rank: true
          }
        }
      }
    }
    arg_attr {
      value {
      }
    }
    arg_attr {
      key: 1
      value {
      }
    }
    arg_attr {
      key: 2
      value {
      }
    }
    arg_attr {
      key: 3
      value {
      }
    }
  }
  function {
    signature {
      name: "__inference_Dataset_flat_map_read_one_file_31"
      input_arg {
        name: "args_0"
        type: DT_STRING
      }
      output_arg {
        name: "identity"
        type: DT_VARIANT
      }
      is_stateful: true
      control_output: "TextLineDataset"
    }
    node_def {
      name: "compression_type"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: ""
          }
        }
      }
    }
    node_def {
      name: "buffer_size"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 262144
          }
        }
      }
    }
    node_def {
      name: "TextLineDataset"
      op: "TextLineDataset"
      input: "args_0"
      input: "compression_type:output:0"
      input: "buffer_size:output:0"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "TextLineDataset:handle:0"
      input: "^TextLineDataset"
      attr {
        key: "T"
        value {
          type: DT_VARIANT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
    control_ret {
      key: "TextLineDataset"
      value: "TextLineDataset"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "args_0"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "head_cond_false_557"
      input_arg {
        name: "placeholder"
        type: DT_FLOAT
      }
      input_arg {
        name: "placeholder_1"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_2"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_3"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_4"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_5"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_6"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_7"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_8"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_9"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_10"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_11"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_12"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_13"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_14"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_15"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_16"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_17"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_18"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_19"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_20"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_21"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_22"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_23"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_24"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_25"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_26"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_27"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_28"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_29"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_30"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_31"
        type: DT_RESOURCE
      }
      input_arg {
        name: "placeholder_32"
        type: DT_RESOURCE
      }
      input_arg {
        name: "updatequantile_resourceaccumulatorsetglobalstep_boosted_trees_stamp_token"
        type: DT_INT64
      }
      input_arg {
        name: "placeholder_33"
        type: DT_RESOURCE
      }
      input_arg {
        name: "placeholder_34"
        type: DT_RESOURCE
      }
      input_arg {
        name: "placeholder_35"
        type: DT_RESOURCE
      }
      input_arg {
        name: "placeholder_36"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_37"
        type: DT_RESOURCE
      }
      input_arg {
        name: "placeholder_38"
        type: DT_BOOL
      }
      input_arg {
        name: "updatequantile_transform_features_age_expanddims_iteratorgetnext"
        type: DT_FLOAT
      }
      input_arg {
        name: "updatequantile_transform_features_bill_amt1_expanddims_iteratorgetnext"
        type: DT_FLOAT
      }
      input_arg {
        name: "updatequantile_transform_features_bill_amt2_expanddims_iteratorgetnext"
        type: DT_FLOAT
      }
      input_arg {
        name: "updatequantile_transform_features_bill_amt3_expanddims_iteratorgetnext"
        type: DT_FLOAT
      }
      input_arg {
        name: "updatequantile_transform_features_bill_amt4_expanddims_iteratorgetnext"
        type: DT_FLOAT
      }
      input_arg {
        name: "updatequantile_transform_features_bill_amt5_expanddims_iteratorgetnext"
        type: DT_FLOAT
      }
      input_arg {
        name: "updatequantile_transform_features_bill_amt6_expanddims_iteratorgetnext"
        type: DT_FLOAT
      }
      input_arg {
        name: "updatequantile_transform_features_limit_bal_expanddims_iteratorgetnext"
        type: DT_FLOAT
      }
      input_arg {
        name: "updatequantile_transform_features_pay_1_expanddims_iteratorgetnext"
        type: DT_FLOAT
      }
      input_arg {
        name: "updatequantile_transform_features_pay_2_expanddims_iteratorgetnext"
        type: DT_FLOAT
      }
      input_arg {
        name: "updatequantile_transform_features_pay_3_expanddims_iteratorgetnext"
        type: DT_FLOAT
      }
      input_arg {
        name: "updatequantile_transform_features_pay_4_expanddims_iteratorgetnext"
        type: DT_FLOAT
      }
      input_arg {
        name: "updatequantile_transform_features_pay_5_expanddims_iteratorgetnext"
        type: DT_FLOAT
      }
      input_arg {
        name: "updatequantile_transform_features_pay_6_expanddims_iteratorgetnext"
        type: DT_FLOAT
      }
      input_arg {
        name: "updatequantile_transform_features_pay_amt1_expanddims_iteratorgetnext"
        type: DT_FLOAT
      }
      input_arg {
        name: "updatequantile_transform_features_pay_amt2_expanddims_iteratorgetnext"
        type: DT_FLOAT
      }
      input_arg {
        name: "updatequantile_transform_features_pay_amt3_expanddims_iteratorgetnext"
        type: DT_FLOAT
      }
      input_arg {
        name: "updatequantile_transform_features_pay_amt4_expanddims_iteratorgetnext"
        type: DT_FLOAT
      }
      input_arg {
        name: "updatequantile_transform_features_pay_amt5_expanddims_iteratorgetnext"
        type: DT_FLOAT
      }
      input_arg {
        name: "updatequantile_transform_features_pay_amt6_expanddims_iteratorgetnext"
        type: DT_FLOAT
      }
      input_arg {
        name: "updatequantile_boostedtreesmakequantilesummaries_boosted_trees_const"
        type: DT_FLOAT
      }
      input_arg {
        name: "updatequantile_boostedtreesquantilestreamresourceaddsummaries_boosted_trees_quantileaccumulator"
        type: DT_RESOURCE
      }
      input_arg {
        name: "updatequantile_wait_until_quaniles_accumulated_boosted_trees_are_boundaries_ready"
        type: DT_RESOURCE
      }
      output_arg {
        name: "updatequantile_wait_until_quaniles_accumulated_identity"
        type: DT_BOOL
      }
      is_stateful: true
    }
    node_def {
      name: "UpdateQuantile/transform_features/AGE/ExpandDims/dim"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
    }
    node_def {
      name: "UpdateQuantile/transform_features/AGE/ExpandDims"
      op: "ExpandDims"
      input: "updatequantile_transform_features_age_expanddims_iteratorgetnext"
      input: "UpdateQuantile/transform_features/AGE/ExpandDims/dim:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node_def {
      name: "UpdateQuantile/transform_features/BILL_AMT1/ExpandDims/dim"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
    }
    node_def {
      name: "UpdateQuantile/transform_features/BILL_AMT1/ExpandDims"
      op: "ExpandDims"
      input: "updatequantile_transform_features_bill_amt1_expanddims_iteratorgetnext"
      input: "UpdateQuantile/transform_features/BILL_AMT1/ExpandDims/dim:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node_def {
      name: "UpdateQuantile/transform_features/BILL_AMT2/ExpandDims/dim"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
    }
    node_def {
      name: "UpdateQuantile/transform_features/BILL_AMT2/ExpandDims"
      op: "ExpandDims"
      input: "updatequantile_transform_features_bill_amt2_expanddims_iteratorgetnext"
      input: "UpdateQuantile/transform_features/BILL_AMT2/ExpandDims/dim:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node_def {
      name: "UpdateQuantile/transform_features/BILL_AMT3/ExpandDims/dim"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
    }
    node_def {
      name: "UpdateQuantile/transform_features/BILL_AMT3/ExpandDims"
      op: "ExpandDims"
      input: "updatequantile_transform_features_bill_amt3_expanddims_iteratorgetnext"
      input: "UpdateQuantile/transform_features/BILL_AMT3/ExpandDims/dim:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node_def {
      name: "UpdateQuantile/transform_features/BILL_AMT4/ExpandDims/dim"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
    }
    node_def {
      name: "UpdateQuantile/transform_features/BILL_AMT4/ExpandDims"
      op: "ExpandDims"
      input: "updatequantile_transform_features_bill_amt4_expanddims_iteratorgetnext"
      input: "UpdateQuantile/transform_features/BILL_AMT4/ExpandDims/dim:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node_def {
      name: "UpdateQuantile/transform_features/BILL_AMT5/ExpandDims/dim"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
    }
    node_def {
      name: "UpdateQuantile/transform_features/BILL_AMT5/ExpandDims"
      op: "ExpandDims"
      input: "updatequantile_transform_features_bill_amt5_expanddims_iteratorgetnext"
      input: "UpdateQuantile/transform_features/BILL_AMT5/ExpandDims/dim:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node_def {
      name: "UpdateQuantile/transform_features/BILL_AMT6/ExpandDims/dim"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
    }
    node_def {
      name: "UpdateQuantile/transform_features/BILL_AMT6/ExpandDims"
      op: "ExpandDims"
      input: "updatequantile_transform_features_bill_amt6_expanddims_iteratorgetnext"
      input: "UpdateQuantile/transform_features/BILL_AMT6/ExpandDims/dim:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node_def {
      name: "UpdateQuantile/transform_features/LIMIT_BAL/ExpandDims/dim"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
    }
    node_def {
      name: "UpdateQuantile/transform_features/LIMIT_BAL/ExpandDims"
      op: "ExpandDims"
      input: "updatequantile_transform_features_limit_bal_expanddims_iteratorgetnext"
      input: "UpdateQuantile/transform_features/LIMIT_BAL/ExpandDims/dim:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node_def {
      name: "UpdateQuantile/transform_features/PAY_1/ExpandDims/dim"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
    }
    node_def {
      name: "UpdateQuantile/transform_features/PAY_1/ExpandDims"
      op: "ExpandDims"
      input: "updatequantile_transform_features_pay_1_expanddims_iteratorgetnext"
      input: "UpdateQuantile/transform_features/PAY_1/ExpandDims/dim:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node_def {
      name: "UpdateQuantile/transform_features/PAY_2/ExpandDims/dim"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
    }
    node_def {
      name: "UpdateQuantile/transform_features/PAY_2/ExpandDims"
      op: "ExpandDims"
      input: "updatequantile_transform_features_pay_2_expanddims_iteratorgetnext"
      input: "UpdateQuantile/transform_features/PAY_2/ExpandDims/dim:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node_def {
      name: "UpdateQuantile/transform_features/PAY_3/ExpandDims/dim"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
    }
    node_def {
      name: "UpdateQuantile/transform_features/PAY_3/ExpandDims"
      op: "ExpandDims"
      input: "updatequantile_transform_features_pay_3_expanddims_iteratorgetnext"
      input: "UpdateQuantile/transform_features/PAY_3/ExpandDims/dim:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node_def {
      name: "UpdateQuantile/transform_features/PAY_4/ExpandDims/dim"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
    }
    node_def {
      name: "UpdateQuantile/transform_features/PAY_4/ExpandDims"
      op: "ExpandDims"
      input: "updatequantile_transform_features_pay_4_expanddims_iteratorgetnext"
      input: "UpdateQuantile/transform_features/PAY_4/ExpandDims/dim:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node_def {
      name: "UpdateQuantile/transform_features/PAY_5/ExpandDims/dim"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
    }
    node_def {
      name: "UpdateQuantile/transform_features/PAY_5/ExpandDims"
      op: "ExpandDims"
      input: "updatequantile_transform_features_pay_5_expanddims_iteratorgetnext"
      input: "UpdateQuantile/transform_features/PAY_5/ExpandDims/dim:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node_def {
      name: "UpdateQuantile/transform_features/PAY_6/ExpandDims/dim"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
    }
    node_def {
      name: "UpdateQuantile/transform_features/PAY_6/ExpandDims"
      op: "ExpandDims"
      input: "updatequantile_transform_features_pay_6_expanddims_iteratorgetnext"
      input: "UpdateQuantile/transform_features/PAY_6/ExpandDims/dim:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node_def {
      name: "UpdateQuantile/transform_features/PAY_AMT1/ExpandDims/dim"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
    }
    node_def {
      name: "UpdateQuantile/transform_features/PAY_AMT1/ExpandDims"
      op: "ExpandDims"
      input: "updatequantile_transform_features_pay_amt1_expanddims_iteratorgetnext"
      input: "UpdateQuantile/transform_features/PAY_AMT1/ExpandDims/dim:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node_def {
      name: "UpdateQuantile/transform_features/PAY_AMT2/ExpandDims/dim"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
    }
    node_def {
      name: "UpdateQuantile/transform_features/PAY_AMT2/ExpandDims"
      op: "ExpandDims"
      input: "updatequantile_transform_features_pay_amt2_expanddims_iteratorgetnext"
      input: "UpdateQuantile/transform_features/PAY_AMT2/ExpandDims/dim:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node_def {
      name: "UpdateQuantile/transform_features/PAY_AMT3/ExpandDims/dim"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
    }
    node_def {
      name: "UpdateQuantile/transform_features/PAY_AMT3/ExpandDims"
      op: "ExpandDims"
      input: "updatequantile_transform_features_pay_amt3_expanddims_iteratorgetnext"
      input: "UpdateQuantile/transform_features/PAY_AMT3/ExpandDims/dim:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node_def {
      name: "UpdateQuantile/transform_features/PAY_AMT4/ExpandDims/dim"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
    }
    node_def {
      name: "UpdateQuantile/transform_features/PAY_AMT4/ExpandDims"
      op: "ExpandDims"
      input: "updatequantile_transform_features_pay_amt4_expanddims_iteratorgetnext"
      input: "UpdateQuantile/transform_features/PAY_AMT4/ExpandDims/dim:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node_def {
      name: "UpdateQuantile/transform_features/PAY_AMT5/ExpandDims/dim"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
    }
    node_def {
      name: "UpdateQuantile/transform_features/PAY_AMT5/ExpandDims"
      op: "ExpandDims"
      input: "updatequantile_transform_features_pay_amt5_expanddims_iteratorgetnext"
      input: "UpdateQuantile/transform_features/PAY_AMT5/ExpandDims/dim:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node_def {
      name: "UpdateQuantile/transform_features/PAY_AMT6/ExpandDims/dim"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
    }
    node_def {
      name: "UpdateQuantile/transform_features/PAY_AMT6/ExpandDims"
      op: "ExpandDims"
      input: "updatequantile_transform_features_pay_amt6_expanddims_iteratorgetnext"
      input: "UpdateQuantile/transform_features/PAY_AMT6/ExpandDims/dim:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node_def {
      name: "UpdateQuantile/unstack"
      op: "Unpack"
      input: "UpdateQuantile/transform_features/AGE/ExpandDims:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 1
        }
      }
      attr {
        key: "num"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "UpdateQuantile/unstack_1"
      op: "Unpack"
      input: "UpdateQuantile/transform_features/BILL_AMT1/ExpandDims:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 1
        }
      }
      attr {
        key: "num"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "UpdateQuantile/unstack_2"
      op: "Unpack"
      input: "UpdateQuantile/transform_features/BILL_AMT2/ExpandDims:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 1
        }
      }
      attr {
        key: "num"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "UpdateQuantile/unstack_3"
      op: "Unpack"
      input: "UpdateQuantile/transform_features/BILL_AMT3/ExpandDims:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 1
        }
      }
      attr {
        key: "num"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "UpdateQuantile/unstack_4"
      op: "Unpack"
      input: "UpdateQuantile/transform_features/BILL_AMT4/ExpandDims:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 1
        }
      }
      attr {
        key: "num"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "UpdateQuantile/unstack_5"
      op: "Unpack"
      input: "UpdateQuantile/transform_features/BILL_AMT5/ExpandDims:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 1
        }
      }
      attr {
        key: "num"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "UpdateQuantile/unstack_6"
      op: "Unpack"
      input: "UpdateQuantile/transform_features/BILL_AMT6/ExpandDims:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 1
        }
      }
      attr {
        key: "num"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "UpdateQuantile/unstack_7"
      op: "Unpack"
      input: "UpdateQuantile/transform_features/LIMIT_BAL/ExpandDims:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 1
        }
      }
      attr {
        key: "num"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "UpdateQuantile/unstack_8"
      op: "Unpack"
      input: "UpdateQuantile/transform_features/PAY_1/ExpandDims:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 1
        }
      }
      attr {
        key: "num"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "UpdateQuantile/unstack_9"
      op: "Unpack"
      input: "UpdateQuantile/transform_features/PAY_2/ExpandDims:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 1
        }
      }
      attr {
        key: "num"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "UpdateQuantile/unstack_10"
      op: "Unpack"
      input: "UpdateQuantile/transform_features/PAY_3/ExpandDims:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 1
        }
      }
      attr {
        key: "num"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "UpdateQuantile/unstack_11"
      op: "Unpack"
      input: "UpdateQuantile/transform_features/PAY_4/ExpandDims:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 1
        }
      }
      attr {
        key: "num"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "UpdateQuantile/unstack_12"
      op: "Unpack"
      input: "UpdateQuantile/transform_features/PAY_5/ExpandDims:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 1
        }
      }
      attr {
        key: "num"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "UpdateQuantile/unstack_13"
      op: "Unpack"
      input: "UpdateQuantile/transform_features/PAY_6/ExpandDims:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 1
        }
      }
      attr {
        key: "num"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "UpdateQuantile/unstack_14"
      op: "Unpack"
      input: "UpdateQuantile/transform_features/PAY_AMT1/ExpandDims:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 1
        }
      }
      attr {
        key: "num"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "UpdateQuantile/unstack_15"
      op: "Unpack"
      input: "UpdateQuantile/transform_features/PAY_AMT2/ExpandDims:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 1
        }
      }
      attr {
        key: "num"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "UpdateQuantile/unstack_16"
      op: "Unpack"
      input: "UpdateQuantile/transform_features/PAY_AMT3/ExpandDims:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 1
        }
      }
      attr {
        key: "num"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "UpdateQuantile/unstack_17"
      op: "Unpack"
      input: "UpdateQuantile/transform_features/PAY_AMT4/ExpandDims:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 1
        }
      }
      attr {
        key: "num"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "UpdateQuantile/unstack_18"
      op: "Unpack"
      input: "UpdateQuantile/transform_features/PAY_AMT5/ExpandDims:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 1
        }
      }
      attr {
        key: "num"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "UpdateQuantile/unstack_19"
      op: "Unpack"
      input: "UpdateQuantile/transform_features/PAY_AMT6/ExpandDims:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 1
        }
      }
      attr {
        key: "num"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "UpdateQuantile/BoostedTreesMakeQuantileSummaries/epsilon"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.009999999776482582
          }
        }
      }
    }
    node_def {
      name: "UpdateQuantile/BoostedTreesMakeQuantileSummaries"
      op: "BoostedTreesMakeQuantileSummaries"
      input: "UpdateQuantile/unstack:output:0"
      input: "UpdateQuantile/unstack_1:output:0"
      input: "UpdateQuantile/unstack_2:output:0"
      input: "UpdateQuantile/unstack_3:output:0"
      input: "UpdateQuantile/unstack_4:output:0"
      input: "UpdateQuantile/unstack_5:output:0"
      input: "UpdateQuantile/unstack_6:output:0"
      input: "UpdateQuantile/unstack_7:output:0"
      input: "UpdateQuantile/unstack_8:output:0"
      input: "UpdateQuantile/unstack_9:output:0"
      input: "UpdateQuantile/unstack_10:output:0"
      input: "UpdateQuantile/unstack_11:output:0"
      input: "UpdateQuantile/unstack_12:output:0"
      input: "UpdateQuantile/unstack_13:output:0"
      input: "UpdateQuantile/unstack_14:output:0"
      input: "UpdateQuantile/unstack_15:output:0"
      input: "UpdateQuantile/unstack_16:output:0"
      input: "UpdateQuantile/unstack_17:output:0"
      input: "UpdateQuantile/unstack_18:output:0"
      input: "UpdateQuantile/unstack_19:output:0"
      input: "updatequantile_boostedtreesmakequantilesummaries_boosted_trees_const"
      input: "UpdateQuantile/BoostedTreesMakeQuantileSummaries/epsilon:output:0"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "num_features"
        value {
          i: 20
        }
      }
    }
    node_def {
      name: "UpdateQuantile/BoostedTreesQuantileStreamResourceAddSummaries"
      op: "BoostedTreesQuantileStreamResourceAddSummaries"
      input: "updatequantile_boostedtreesquantilestreamresourceaddsummaries_boosted_trees_quantileaccumulator"
      input: "UpdateQuantile/BoostedTreesMakeQuantileSummaries:summaries:0"
      input: "UpdateQuantile/BoostedTreesMakeQuantileSummaries:summaries:1"
      input: "UpdateQuantile/BoostedTreesMakeQuantileSummaries:summaries:2"
      input: "UpdateQuantile/BoostedTreesMakeQuantileSummaries:summaries:3"
      input: "UpdateQuantile/BoostedTreesMakeQuantileSummaries:summaries:4"
      input: "UpdateQuantile/BoostedTreesMakeQuantileSummaries:summaries:5"
      input: "UpdateQuantile/BoostedTreesMakeQuantileSummaries:summaries:6"
      input: "UpdateQuantile/BoostedTreesMakeQuantileSummaries:summaries:7"
      input: "UpdateQuantile/BoostedTreesMakeQuantileSummaries:summaries:8"
      input: "UpdateQuantile/BoostedTreesMakeQuantileSummaries:summaries:9"
      input: "UpdateQuantile/BoostedTreesMakeQuantileSummaries:summaries:10"
      input: "UpdateQuantile/BoostedTreesMakeQuantileSummaries:summaries:11"
      input: "UpdateQuantile/BoostedTreesMakeQuantileSummaries:summaries:12"
      input: "UpdateQuantile/BoostedTreesMakeQuantileSummaries:summaries:13"
      input: "UpdateQuantile/BoostedTreesMakeQuantileSummaries:summaries:14"
      input: "UpdateQuantile/BoostedTreesMakeQuantileSummaries:summaries:15"
      input: "UpdateQuantile/BoostedTreesMakeQuantileSummaries:summaries:16"
      input: "UpdateQuantile/BoostedTreesMakeQuantileSummaries:summaries:17"
      input: "UpdateQuantile/BoostedTreesMakeQuantileSummaries:summaries:18"
      input: "UpdateQuantile/BoostedTreesMakeQuantileSummaries:summaries:19"
      attr {
        key: "_output_shapes"
        value {
          list {
          }
        }
      }
      attr {
        key: "num_features"
        value {
          i: 20
        }
      }
    }
    node_def {
      name: "UpdateQuantile/conditional_accumulator"
      op: "ResourceConditionalAccumulator"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "reduction_type"
        value {
          s: "MEAN"
        }
      }
      attr {
        key: "shape"
        value {
          shape {
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "quantile_summary_accum"
        }
      }
    }
    node_def {
      name: "UpdateQuantile/ResourceAccumulatorSetGlobalStep"
      op: "ResourceAccumulatorSetGlobalStep"
      input: "UpdateQuantile/conditional_accumulator:handle:0"
      input: "updatequantile_resourceaccumulatorsetglobalstep_boosted_trees_stamp_token"
      attr {
        key: "_output_shapes"
        value {
          list {
          }
        }
      }
    }
    node_def {
      name: "UpdateQuantile/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "UpdateQuantile/ResourceAccumulatorApplyGradient"
      op: "ResourceAccumulatorApplyGradient"
      input: "UpdateQuantile/conditional_accumulator:handle:0"
      input: "updatequantile_resourceaccumulatorsetglobalstep_boosted_trees_stamp_token"
      input: "UpdateQuantile/Const:output:0"
      attr {
        key: "_output_shapes"
        value {
          list {
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "UpdateQuantile/group_deps"
      op: "NoOp"
      input: "^UpdateQuantile/BoostedTreesQuantileStreamResourceAddSummaries"
      input: "^UpdateQuantile/ResourceAccumulatorApplyGradient"
      input: "^UpdateQuantile/ResourceAccumulatorSetGlobalStep"
      attr {
        key: "_output_shapes"
        value {
          list {
          }
        }
      }
    }
    node_def {
      name: "UpdateQuantile/conditional_accumulator_NumAccumulated"
      op: "ResourceAccumulatorNumAccumulated"
      input: "UpdateQuantile/conditional_accumulator:handle:0"
      input: "^UpdateQuantile/group_deps"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "UpdateQuantile/GreaterEqual/y"
      op: "Const"
      input: "^UpdateQuantile/group_deps"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "UpdateQuantile/GreaterEqual"
      op: "GreaterEqual"
      input: "UpdateQuantile/conditional_accumulator_NumAccumulated:num_accumulated:0"
      input: "UpdateQuantile/GreaterEqual/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "UpdateQuantile/wait_until_quaniles_accumulated"
      op: "If"
      input: "UpdateQuantile/GreaterEqual:z:0"
      input: "UpdateQuantile/conditional_accumulator:handle:0"
      input: "updatequantile_boostedtreesquantilestreamresourceaddsummaries_boosted_trees_quantileaccumulator"
      input: "updatequantile_wait_until_quaniles_accumulated_boosted_trees_are_boundaries_ready"
      input: "UpdateQuantile/GreaterEqual:z:0"
      attr {
        key: "Tcond"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Tin"
        value {
          list {
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_BOOL
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_BOOL
          }
        }
      }
      attr {
        key: "_lower_using_switch_merge"
        value {
          b: true
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "else_branch"
        value {
          func {
            name: "UpdateQuantile_wait_until_quaniles_accumulated_false_1157"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "then_branch"
        value {
          func {
            name: "UpdateQuantile_wait_until_quaniles_accumulated_true_1156"
          }
        }
      }
    }
    node_def {
      name: "UpdateQuantile/wait_until_quaniles_accumulated/Identity"
      op: "Identity"
      input: "UpdateQuantile/wait_until_quaniles_accumulated:output:0"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    ret {
      key: "updatequantile_wait_until_quaniles_accumulated_identity"
      value: "UpdateQuantile/wait_until_quaniles_accumulated/Identity:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 1
            }
          }
          shape {
            dim {
              size: -1
            }
          }
          shape {
            dim {
              size: -1
            }
          }
          shape {
            dim {
              size: -1
            }
          }
          shape {
            dim {
              size: -1
            }
          }
          shape {
            dim {
              size: -1
            }
          }
          shape {
            dim {
              size: -1
            }
          }
          shape {
            dim {
              size: -1
            }
          }
          shape {
            dim {
              size: -1
            }
          }
          shape {
            dim {
              size: -1
            }
          }
          shape {
            dim {
              size: -1
            }
          }
          shape {
            dim {
              size: -1
            }
          }
          shape {
            dim {
              size: -1
            }
          }
          shape {
            dim {
              size: -1
            }
          }
          shape {
            dim {
              size: -1
            }
          }
          shape {
            dim {
              size: -1
            }
          }
          shape {
            dim {
              size: -1
            }
          }
          shape {
            dim {
              size: -1
            }
          }
          shape {
            dim {
              size: -1
            }
          }
          shape {
            dim {
              size: -1
            }
          }
          shape {
            dim {
              size: -1
            }
          }
          shape {
            dim {
              size: -1
            }
          }
          shape {
            dim {
              size: -1
            }
          }
          shape {
            dim {
              size: -1
            }
          }
          shape {
            dim {
              size: -1
            }
          }
          shape {
            dim {
              size: -1
            }
          }
          shape {
            dim {
              size: -1
            }
          }
          shape {
            dim {
              size: -1
            }
          }
          shape {
            dim {
              size: -1
            }
          }
          shape {
            dim {
              size: -1
            }
          }
          shape {
            dim {
              size: -1
            }
          }
          shape {
            unknown_rank: true
          }
          shape {
            unknown_rank: true
          }
          shape {
          }
          shape {
            unknown_rank: true
          }
          shape {
            unknown_rank: true
          }
          shape {
            unknown_rank: true
          }
          shape {
            dim {
              size: 2
            }
          }
          shape {
            unknown_rank: true
          }
          shape {
          }
          shape {
            dim {
              size: -1
            }
          }
          shape {
            dim {
              size: -1
            }
          }
          shape {
            dim {
              size: -1
            }
          }
          shape {
            dim {
              size: -1
            }
          }
          shape {
            dim {
              size: -1
            }
          }
          shape {
            dim {
              size: -1
            }
          }
          shape {
            dim {
              size: -1
            }
          }
          shape {
            dim {
              size: -1
            }
          }
          shape {
            dim {
              size: -1
            }
          }
          shape {
            dim {
              size: -1
            }
          }
          shape {
            dim {
              size: -1
            }
          }
          shape {
            dim {
              size: -1
            }
          }
          shape {
            dim {
              size: -1
            }
          }
          shape {
            dim {
              size: -1
            }
          }
          shape {
            dim {
              size: -1
            }
          }
          shape {
            dim {
              size: -1
            }
          }
          shape {
            dim {
              size: -1
            }
          }
          shape {
            dim {
              size: -1
            }
          }
          shape {
            dim {
              size: -1
            }
          }
          shape {
            dim {
              size: -1
            }
          }
          shape {
            dim {
              size: 1
            }
          }
          shape {
            unknown_rank: true
          }
          shape {
            unknown_rank: true
          }
        }
      }
    }
    arg_attr {
      value {
      }
    }
    arg_attr {
      key: 1
      value {
      }
    }
    arg_attr {
      key: 2
      value {
      }
    }
    arg_attr {
      key: 3
      value {
      }
    }
    arg_attr {
      key: 4
      value {
      }
    }
    arg_attr {
      key: 5
      value {
      }
    }
    arg_attr {
      key: 6
      value {
      }
    }
    arg_attr {
      key: 7
      value {
      }
    }
    arg_attr {
      key: 8
      value {
      }
    }
    arg_attr {
      key: 9
      value {
      }
    }
    arg_attr {
      key: 10
      value {
      }
    }
    arg_attr {
      key: 11
      value {
      }
    }
    arg_attr {
      key: 12
      value {
      }
    }
    arg_attr {
      key: 13
      value {
      }
    }
    arg_attr {
      key: 14
      value {
      }
    }
    arg_attr {
      key: 15
      value {
      }
    }
    arg_attr {
      key: 16
      value {
      }
    }
    arg_attr {
      key: 17
      value {
      }
    }
    arg_attr {
      key: 18
      value {
      }
    }
    arg_attr {
      key: 19
      value {
      }
    }
    arg_attr {
      key: 20
      value {
      }
    }
    arg_attr {
      key: 21
      value {
      }
    }
    arg_attr {
      key: 22
      value {
      }
    }
    arg_attr {
      key: 23
      value {
      }
    }
    arg_attr {
      key: 24
      value {
      }
    }
    arg_attr {
      key: 25
      value {
      }
    }
    arg_attr {
      key: 26
      value {
      }
    }
    arg_attr {
      key: 27
      value {
      }
    }
    arg_attr {
      key: 28
      value {
      }
    }
    arg_attr {
      key: 29
      value {
      }
    }
    arg_attr {
      key: 30
      value {
      }
    }
    arg_attr {
      key: 31
      value {
      }
    }
    arg_attr {
      key: 32
      value {
      }
    }
    arg_attr {
      key: 33
      value {
      }
    }
    arg_attr {
      key: 34
      value {
      }
    }
    arg_attr {
      key: 35
      value {
      }
    }
    arg_attr {
      key: 36
      value {
      }
    }
    arg_attr {
      key: 37
      value {
      }
    }
    arg_attr {
      key: 38
      value {
      }
    }
    arg_attr {
      key: 39
      value {
      }
    }
    arg_attr {
      key: 40
      value {
      }
    }
    arg_attr {
      key: 41
      value {
      }
    }
    arg_attr {
      key: 42
      value {
      }
    }
    arg_attr {
      key: 43
      value {
      }
    }
    arg_attr {
      key: 44
      value {
      }
    }
    arg_attr {
      key: 45
      value {
      }
    }
    arg_attr {
      key: 46
      value {
      }
    }
    arg_attr {
      key: 47
      value {
      }
    }
    arg_attr {
      key: 48
      value {
      }
    }
    arg_attr {
      key: 49
      value {
      }
    }
    arg_attr {
      key: 50
      value {
      }
    }
    arg_attr {
      key: 51
      value {
      }
    }
    arg_attr {
      key: 52
      value {
      }
    }
    arg_attr {
      key: 53
      value {
      }
    }
    arg_attr {
      key: 54
      value {
      }
    }
    arg_attr {
      key: 55
      value {
      }
    }
    arg_attr {
      key: 56
      value {
      }
    }
    arg_attr {
      key: 57
      value {
      }
    }
    arg_attr {
      key: 58
      value {
      }
    }
    arg_attr {
      key: 59
      value {
      }
    }
    arg_attr {
      key: 60
      value {
      }
    }
    arg_attr {
      key: 61
      value {
      }
    }
    arg_attr {
      key: 62
      value {
      }
    }
  }
  function {
    signature {
      name: "cond_true_685"
      input_arg {
        name: "stack_mul"
        type: DT_FLOAT
      }
      input_arg {
        name: "stack_mul_2"
        type: DT_FLOAT
      }
      input_arg {
        name: "resourceaccumulatorapplygradient_boosted_trees_conditional_accumulator_2"
        type: DT_RESOURCE
      }
      input_arg {
        name: "resourceaccumulatorapplygradient_boosted_trees_stamp_token"
        type: DT_INT64
      }
      input_arg {
        name: "wait_until_n_batches_for_bias_accumulated_boosted_trees"
        type: DT_RESOURCE
      }
      input_arg {
        name: "wait_until_n_batches_for_bias_accumulated_boosted_trees_center_bias_needed"
        type: DT_RESOURCE
      }
      input_arg {
        name: "wait_until_n_batches_for_bias_accumulated_boosted_trees_conditional_accumulator"
        type: DT_RESOURCE
      }
      input_arg {
        name: "wait_until_n_batches_for_bias_accumulated_boosted_trees_conditional_accumulator_1"
        type: DT_RESOURCE
      }
      input_arg {
        name: "placeholder"
        type: DT_FLOAT
      }
      input_arg {
        name: "placeholder_1"
        type: DT_FLOAT
      }
      input_arg {
        name: "placeholder_2"
        type: DT_FLOAT
      }
      input_arg {
        name: "placeholder_3"
        type: DT_FLOAT
      }
      input_arg {
        name: "placeholder_4"
        type: DT_FLOAT
      }
      input_arg {
        name: "placeholder_5"
        type: DT_FLOAT
      }
      input_arg {
        name: "placeholder_6"
        type: DT_FLOAT
      }
      input_arg {
        name: "placeholder_7"
        type: DT_FLOAT
      }
      input_arg {
        name: "placeholder_8"
        type: DT_FLOAT
      }
      input_arg {
        name: "placeholder_9"
        type: DT_FLOAT
      }
      input_arg {
        name: "placeholder_10"
        type: DT_FLOAT
      }
      input_arg {
        name: "placeholder_11"
        type: DT_FLOAT
      }
      input_arg {
        name: "placeholder_12"
        type: DT_FLOAT
      }
      input_arg {
        name: "placeholder_13"
        type: DT_FLOAT
      }
      input_arg {
        name: "placeholder_14"
        type: DT_FLOAT
      }
      input_arg {
        name: "placeholder_15"
        type: DT_FLOAT
      }
      input_arg {
        name: "placeholder_16"
        type: DT_FLOAT
      }
      input_arg {
        name: "placeholder_17"
        type: DT_FLOAT
      }
      input_arg {
        name: "placeholder_18"
        type: DT_FLOAT
      }
      input_arg {
        name: "placeholder_19"
        type: DT_FLOAT
      }
      input_arg {
        name: "placeholder_20"
        type: DT_FLOAT
      }
      input_arg {
        name: "placeholder_21"
        type: DT_FLOAT
      }
      input_arg {
        name: "placeholder_22"
        type: DT_FLOAT
      }
      input_arg {
        name: "placeholder_23"
        type: DT_FLOAT
      }
      input_arg {
        name: "placeholder_24"
        type: DT_FLOAT
      }
      input_arg {
        name: "placeholder_25"
        type: DT_FLOAT
      }
      input_arg {
        name: "placeholder_26"
        type: DT_FLOAT
      }
      input_arg {
        name: "placeholder_27"
        type: DT_FLOAT
      }
      input_arg {
        name: "placeholder_28"
        type: DT_INT32
      }
      output_arg {
        name: "wait_until_n_batches_for_bias_accumulated_identity"
        type: DT_BOOL
      }
      is_stateful: true
    }
    node_def {
      name: "stack"
      op: "Pack"
      input: "stack_mul"
      input: "stack_mul_2"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "Mean/reduction_indices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "Mean"
      op: "Mean"
      input: "stack:output:0"
      input: "Mean/reduction_indices:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "ResourceAccumulatorApplyGradient"
      op: "ResourceAccumulatorApplyGradient"
      input: "resourceaccumulatorapplygradient_boosted_trees_conditional_accumulator_2"
      input: "resourceaccumulatorapplygradient_boosted_trees_stamp_token"
      input: "Mean:output:0"
      attr {
        key: "_output_shapes"
        value {
          list {
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "conditional_accumulator_2_NumAccumulated"
      op: "ResourceAccumulatorNumAccumulated"
      input: "resourceaccumulatorapplygradient_boosted_trees_conditional_accumulator_2"
      input: "^ResourceAccumulatorApplyGradient"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "GreaterEqual/y"
      op: "Const"
      input: "^ResourceAccumulatorApplyGradient"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "GreaterEqual"
      op: "GreaterEqual"
      input: "conditional_accumulator_2_NumAccumulated:num_accumulated:0"
      input: "GreaterEqual/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "wait_until_n_batches_for_bias_accumulated"
      op: "If"
      input: "GreaterEqual:z:0"
      input: "resourceaccumulatorapplygradient_boosted_trees_conditional_accumulator_2"
      input: "wait_until_n_batches_for_bias_accumulated_boosted_trees"
      input: "wait_until_n_batches_for_bias_accumulated_boosted_trees_center_bias_needed"
      input: "resourceaccumulatorapplygradient_boosted_trees_stamp_token"
      input: "wait_until_n_batches_for_bias_accumulated_boosted_trees_conditional_accumulator"
      input: "wait_until_n_batches_for_bias_accumulated_boosted_trees_conditional_accumulator_1"
      input: "GreaterEqual:z:0"
      attr {
        key: "Tcond"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Tin"
        value {
          list {
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_INT64
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_BOOL
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_BOOL
          }
        }
      }
      attr {
        key: "_lower_using_switch_merge"
        value {
          b: true
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "else_branch"
        value {
          func {
            name: "wait_until_n_batches_for_bias_accumulated_false_701"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "then_branch"
        value {
          func {
            name: "wait_until_n_batches_for_bias_accumulated_true_700"
          }
        }
      }
    }
    node_def {
      name: "wait_until_n_batches_for_bias_accumulated/Identity"
      op: "Identity"
      input: "wait_until_n_batches_for_bias_accumulated:output:0"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    ret {
      key: "wait_until_n_batches_for_bias_accumulated_identity"
      value: "wait_until_n_batches_for_bias_accumulated/Identity:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 1
            }
          }
          shape {
            dim {
              size: -1
            }
            dim {
              size: 1
            }
          }
          shape {
            unknown_rank: true
          }
          shape {
          }
          shape {
            unknown_rank: true
          }
          shape {
            unknown_rank: true
          }
          shape {
            unknown_rank: true
          }
          shape {
            unknown_rank: true
          }
          shape {
            dim {
              size: 7
            }
            dim {
              size: 100
            }
            dim {
              size: 2
            }
          }
          shape {
            dim {
              size: 7
            }
            dim {
              size: 100
            }
            dim {
              size: 2
            }
          }
          shape {
            dim {
              size: 7
            }
            dim {
              size: 100
            }
            dim {
              size: 2
            }
          }
          shape {
            dim {
              size: 7
            }
            dim {
              size: 100
            }
            dim {
              size: 2
            }
          }
          shape {
            dim {
              size: 7
            }
            dim {
              size: 100
            }
            dim {
              size: 2
            }
          }
          shape {
            dim {
              size: 7
            }
            dim {
              size: 100
            }
            dim {
              size: 2
            }
          }
          shape {
            dim {
              size: 7
            }
            dim {
              size: 100
            }
            dim {
              size: 2
            }
          }
          shape {
            dim {
              size: 7
            }
            dim {
              size: 100
            }
            dim {
              size: 2
            }
          }
          shape {
            dim {
              size: 7
            }
            dim {
              size: 100
            }
            dim {
              size: 2
            }
          }
          shape {
            dim {
              size: 7
            }
            dim {
              size: 100
            }
            dim {
              size: 2
            }
          }
          shape {
            dim {
              size: 7
            }
            dim {
              size: 100
            }
            dim {
              size: 2
            }
          }
          shape {
            dim {
              size: 7
            }
            dim {
              size: 100
            }
            dim {
              size: 2
            }
          }
          shape {
            dim {
              size: 7
            }
            dim {
              size: 100
            }
            dim {
              size: 2
            }
          }
          shape {
            dim {
              size: 7
            }
            dim {
              size: 100
            }
            dim {
              size: 2
            }
          }
          shape {
            dim {
              size: 7
            }
            dim {
              size: 100
            }
            dim {
              size: 2
            }
          }
          shape {
            dim {
              size: 7
            }
            dim {
              size: 100
            }
            dim {
              size: 2
            }
          }
          shape {
            dim {
              size: 7
            }
            dim {
              size: 100
            }
            dim {
              size: 2
            }
          }
          shape {
            dim {
              size: 7
            }
            dim {
              size: 100
            }
            dim {
              size: 2
            }
          }
          shape {
            dim {
              size: 7
            }
            dim {
              size: 100
            }
            dim {
              size: 2
            }
          }
          shape {
            dim {
              size: 7
            }
            dim {
              size: 100
            }
            dim {
              size: 2
            }
          }
          shape {
            dim {
              size: 7
            }
            dim {
              size: 2
            }
            dim {
              size: 2
            }
          }
          shape {
            dim {
              size: 7
            }
            dim {
              size: 2
            }
            dim {
              size: 2
            }
          }
          shape {
            dim {
              size: 7
            }
            dim {
              size: 2
            }
            dim {
              size: 2
            }
          }
          shape {
            dim {
              size: 7
            }
            dim {
              size: 2
            }
            dim {
              size: 2
            }
          }
          shape {
            dim {
              size: 7
            }
            dim {
              size: 2
            }
            dim {
              size: 2
            }
          }
          shape {
            dim {
              size: 7
            }
            dim {
              size: 2
            }
            dim {
              size: 2
            }
          }
          shape {
            dim {
              size: 7
            }
            dim {
              size: 2
            }
            dim {
              size: 2
            }
          }
          shape {
            dim {
              size: 7
            }
            dim {
              size: 2
            }
            dim {
              size: 2
            }
          }
          shape {
            dim {
              size: 2
            }
          }
        }
      }
    }
    arg_attr {
      value {
      }
    }
    arg_attr {
      key: 1
      value {
      }
    }
    arg_attr {
      key: 2
      value {
      }
    }
    arg_attr {
      key: 3
      value {
      }
    }
    arg_attr {
      key: 4
      value {
      }
    }
    arg_attr {
      key: 5
      value {
      }
    }
    arg_attr {
      key: 6
      value {
      }
    }
    arg_attr {
      key: 7
      value {
      }
    }
    arg_attr {
      key: 8
      value {
      }
    }
    arg_attr {
      key: 9
      value {
      }
    }
    arg_attr {
      key: 10
      value {
      }
    }
    arg_attr {
      key: 11
      value {
      }
    }
    arg_attr {
      key: 12
      value {
      }
    }
    arg_attr {
      key: 13
      value {
      }
    }
    arg_attr {
      key: 14
      value {
      }
    }
    arg_attr {
      key: 15
      value {
      }
    }
    arg_attr {
      key: 16
      value {
      }
    }
    arg_attr {
      key: 17
      value {
      }
    }
    arg_attr {
      key: 18
      value {
      }
    }
    arg_attr {
      key: 19
      value {
      }
    }
    arg_attr {
      key: 20
      value {
      }
    }
    arg_attr {
      key: 21
      value {
      }
    }
    arg_attr {
      key: 22
      value {
      }
    }
    arg_attr {
      key: 23
      value {
      }
    }
    arg_attr {
      key: 24
      value {
      }
    }
    arg_attr {
      key: 25
      value {
      }
    }
    arg_attr {
      key: 26
      value {
      }
    }
    arg_attr {
      key: 27
      value {
      }
    }
    arg_attr {
      key: 28
      value {
      }
    }
    arg_attr {
      key: 29
      value {
      }
    }
    arg_attr {
      key: 30
      value {
      }
    }
    arg_attr {
      key: 31
      value {
      }
    }
    arg_attr {
      key: 32
      value {
      }
    }
    arg_attr {
      key: 33
      value {
      }
    }
    arg_attr {
      key: 34
      value {
      }
    }
    arg_attr {
      key: 35
      value {
      }
    }
    arg_attr {
      key: 36
      value {
      }
    }
  }
  function {
    signature {
      name: "cond_false_686"
      input_arg {
        name: "placeholder"
        type: DT_FLOAT
      }
      input_arg {
        name: "placeholder_1"
        type: DT_FLOAT
      }
      input_arg {
        name: "placeholder_2"
        type: DT_RESOURCE
      }
      input_arg {
        name: "resourceaccumulatorapplygradient_boosted_trees_stamp_token"
        type: DT_INT64
      }
      input_arg {
        name: "wait_until_n_batches_accumulated_boosted_trees"
        type: DT_RESOURCE
      }
      input_arg {
        name: "placeholder_3"
        type: DT_RESOURCE
      }
      input_arg {
        name: "resourceaccumulatorapplygradient_boosted_trees_conditional_accumulator"
        type: DT_RESOURCE
      }
      input_arg {
        name: "resourceaccumulatorapplygradient_1_boosted_trees_conditional_accumulator_1"
        type: DT_RESOURCE
      }
      input_arg {
        name: "stack_squeeze"
        type: DT_FLOAT
      }
      input_arg {
        name: "stack_squeeze_1"
        type: DT_FLOAT
      }
      input_arg {
        name: "stack_squeeze_2"
        type: DT_FLOAT
      }
      input_arg {
        name: "stack_squeeze_3"
        type: DT_FLOAT
      }
      input_arg {
        name: "stack_squeeze_4"
        type: DT_FLOAT
      }
      input_arg {
        name: "stack_squeeze_5"
        type: DT_FLOAT
      }
      input_arg {
        name: "stack_squeeze_6"
        type: DT_FLOAT
      }
      input_arg {
        name: "stack_squeeze_7"
        type: DT_FLOAT
      }
      input_arg {
        name: "stack_squeeze_8"
        type: DT_FLOAT
      }
      input_arg {
        name: "stack_squeeze_9"
        type: DT_FLOAT
      }
      input_arg {
        name: "stack_squeeze_10"
        type: DT_FLOAT
      }
      input_arg {
        name: "stack_squeeze_11"
        type: DT_FLOAT
      }
      input_arg {
        name: "stack_squeeze_12"
        type: DT_FLOAT
      }
      input_arg {
        name: "stack_squeeze_13"
        type: DT_FLOAT
      }
      input_arg {
        name: "stack_squeeze_14"
        type: DT_FLOAT
      }
      input_arg {
        name: "stack_squeeze_15"
        type: DT_FLOAT
      }
      input_arg {
        name: "stack_squeeze_16"
        type: DT_FLOAT
      }
      input_arg {
        name: "stack_squeeze_17"
        type: DT_FLOAT
      }
      input_arg {
        name: "stack_squeeze_18"
        type: DT_FLOAT
      }
      input_arg {
        name: "stack_squeeze_19"
        type: DT_FLOAT
      }
      input_arg {
        name: "stack_1_squeeze_20"
        type: DT_FLOAT
      }
      input_arg {
        name: "stack_1_squeeze_21"
        type: DT_FLOAT
      }
      input_arg {
        name: "stack_1_squeeze_22"
        type: DT_FLOAT
      }
      input_arg {
        name: "stack_1_squeeze_23"
        type: DT_FLOAT
      }
      input_arg {
        name: "stack_1_squeeze_24"
        type: DT_FLOAT
      }
      input_arg {
        name: "stack_1_squeeze_25"
        type: DT_FLOAT
      }
      input_arg {
        name: "stack_1_squeeze_26"
        type: DT_FLOAT
      }
      input_arg {
        name: "stack_1_squeeze_27"
        type: DT_FLOAT
      }
      input_arg {
        name: "wait_until_n_batches_accumulated_boosted_trees_last_layer_nodes_range"
        type: DT_INT32
      }
      output_arg {
        name: "wait_until_n_batches_accumulated_identity"
        type: DT_BOOL
      }
      is_stateful: true
    }
    node_def {
      name: "stack"
      op: "Pack"
      input: "stack_squeeze"
      input: "stack_squeeze_1"
      input: "stack_squeeze_2"
      input: "stack_squeeze_3"
      input: "stack_squeeze_4"
      input: "stack_squeeze_5"
      input: "stack_squeeze_6"
      input: "stack_squeeze_7"
      input: "stack_squeeze_8"
      input: "stack_squeeze_9"
      input: "stack_squeeze_10"
      input: "stack_squeeze_11"
      input: "stack_squeeze_12"
      input: "stack_squeeze_13"
      input: "stack_squeeze_14"
      input: "stack_squeeze_15"
      input: "stack_squeeze_16"
      input: "stack_squeeze_17"
      input: "stack_squeeze_18"
      input: "stack_squeeze_19"
      attr {
        key: "N"
        value {
          i: 20
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 20
              }
              dim {
                size: 7
              }
              dim {
                size: 100
              }
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "ResourceAccumulatorApplyGradient"
      op: "ResourceAccumulatorApplyGradient"
      input: "resourceaccumulatorapplygradient_boosted_trees_conditional_accumulator"
      input: "resourceaccumulatorapplygradient_boosted_trees_stamp_token"
      input: "stack:output:0"
      attr {
        key: "_output_shapes"
        value {
          list {
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "stack_1"
      op: "Pack"
      input: "stack_1_squeeze_20"
      input: "stack_1_squeeze_21"
      input: "stack_1_squeeze_22"
      input: "stack_1_squeeze_23"
      input: "stack_1_squeeze_24"
      input: "stack_1_squeeze_25"
      input: "stack_1_squeeze_26"
      input: "stack_1_squeeze_27"
      attr {
        key: "N"
        value {
          i: 8
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 8
              }
              dim {
                size: 7
              }
              dim {
                size: 2
              }
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "ResourceAccumulatorApplyGradient_1"
      op: "ResourceAccumulatorApplyGradient"
      input: "resourceaccumulatorapplygradient_1_boosted_trees_conditional_accumulator_1"
      input: "resourceaccumulatorapplygradient_boosted_trees_stamp_token"
      input: "stack_1:output:0"
      attr {
        key: "_output_shapes"
        value {
          list {
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "conditional_accumulator_NumAccumulated"
      op: "ResourceAccumulatorNumAccumulated"
      input: "resourceaccumulatorapplygradient_boosted_trees_conditional_accumulator"
      input: "^ResourceAccumulatorApplyGradient"
      input: "^ResourceAccumulatorApplyGradient_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "conditional_accumulator_1_NumAccumulated"
      op: "ResourceAccumulatorNumAccumulated"
      input: "resourceaccumulatorapplygradient_1_boosted_trees_conditional_accumulator_1"
      input: "^ResourceAccumulatorApplyGradient"
      input: "^ResourceAccumulatorApplyGradient_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "stack_2"
      op: "Pack"
      input: "conditional_accumulator_NumAccumulated:num_accumulated:0"
      input: "conditional_accumulator_1_NumAccumulated:num_accumulated:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      input: "^ResourceAccumulatorApplyGradient"
      input: "^ResourceAccumulatorApplyGradient_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "Min"
      op: "Min"
      input: "stack_2:output:0"
      input: "Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "GreaterEqual/y"
      op: "Const"
      input: "^ResourceAccumulatorApplyGradient"
      input: "^ResourceAccumulatorApplyGradient_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "GreaterEqual"
      op: "GreaterEqual"
      input: "Min:output:0"
      input: "GreaterEqual/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "wait_until_n_batches_accumulated"
      op: "If"
      input: "GreaterEqual:z:0"
      input: "resourceaccumulatorapplygradient_boosted_trees_conditional_accumulator"
      input: "resourceaccumulatorapplygradient_1_boosted_trees_conditional_accumulator_1"
      input: "wait_until_n_batches_accumulated_boosted_trees_last_layer_nodes_range"
      input: "wait_until_n_batches_accumulated_boosted_trees"
      input: "GreaterEqual:z:0"
      attr {
        key: "Tcond"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Tin"
        value {
          list {
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_INT32
            type: DT_RESOURCE
            type: DT_BOOL
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_BOOL
          }
        }
      }
      attr {
        key: "_lower_using_switch_merge"
        value {
          b: true
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "else_branch"
        value {
          func {
            name: "wait_until_n_batches_accumulated_false_799"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "then_branch"
        value {
          func {
            name: "wait_until_n_batches_accumulated_true_798"
          }
        }
      }
    }
    node_def {
      name: "wait_until_n_batches_accumulated/Identity"
      op: "Identity"
      input: "wait_until_n_batches_accumulated:output:0"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    ret {
      key: "wait_until_n_batches_accumulated_identity"
      value: "wait_until_n_batches_accumulated/Identity:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 1
            }
          }
          shape {
            dim {
              size: -1
            }
            dim {
              size: 1
            }
          }
          shape {
            unknown_rank: true
          }
          shape {
          }
          shape {
            unknown_rank: true
          }
          shape {
            unknown_rank: true
          }
          shape {
            unknown_rank: true
          }
          shape {
            unknown_rank: true
          }
          shape {
            dim {
              size: 7
            }
            dim {
              size: 100
            }
            dim {
              size: 2
            }
          }
          shape {
            dim {
              size: 7
            }
            dim {
              size: 100
            }
            dim {
              size: 2
            }
          }
          shape {
            dim {
              size: 7
            }
            dim {
              size: 100
            }
            dim {
              size: 2
            }
          }
          shape {
            dim {
              size: 7
            }
            dim {
              size: 100
            }
            dim {
              size: 2
            }
          }
          shape {
            dim {
              size: 7
            }
            dim {
              size: 100
            }
            dim {
              size: 2
            }
          }
          shape {
            dim {
              size: 7
            }
            dim {
              size: 100
            }
            dim {
              size: 2
            }
          }
          shape {
            dim {
              size: 7
            }
            dim {
              size: 100
            }
            dim {
              size: 2
            }
          }
          shape {
            dim {
              size: 7
            }
            dim {
              size: 100
            }
            dim {
              size: 2
            }
          }
          shape {
            dim {
              size: 7
            }
            dim {
              size: 100
            }
            dim {
              size: 2
            }
          }
          shape {
            dim {
              size: 7
            }
            dim {
              size: 100
            }
            dim {
              size: 2
            }
          }
          shape {
            dim {
              size: 7
            }
            dim {
              size: 100
            }
            dim {
              size: 2
            }
          }
          shape {
            dim {
              size: 7
            }
            dim {
              size: 100
            }
            dim {
              size: 2
            }
          }
          shape {
            dim {
              size: 7
            }
            dim {
              size: 100
            }
            dim {
              size: 2
            }
          }
          shape {
            dim {
              size: 7
            }
            dim {
              size: 100
            }
            dim {
              size: 2
            }
          }
          shape {
            dim {
              size: 7
            }
            dim {
              size: 100
            }
            dim {
              size: 2
            }
          }
          shape {
            dim {
              size: 7
            }
            dim {
              size: 100
            }
            dim {
              size: 2
            }
          }
          shape {
            dim {
              size: 7
            }
            dim {
              size: 100
            }
            dim {
              size: 2
            }
          }
          shape {
            dim {
              size: 7
            }
            dim {
              size: 100
            }
            dim {
              size: 2
            }
          }
          shape {
            dim {
              size: 7
            }
            dim {
              size: 100
            }
            dim {
              size: 2
            }
          }
          shape {
            dim {
              size: 7
            }
            dim {
              size: 100
            }
            dim {
              size: 2
            }
          }
          shape {
            dim {
              size: 7
            }
            dim {
              size: 2
            }
            dim {
              size: 2
            }
          }
          shape {
            dim {
              size: 7
            }
            dim {
              size: 2
            }
            dim {
              size: 2
            }
          }
          shape {
            dim {
              size: 7
            }
            dim {
              size: 2
            }
            dim {
              size: 2
            }
          }
          shape {
            dim {
              size: 7
            }
            dim {
              size: 2
            }
            dim {
              size: 2
            }
          }
          shape {
            dim {
              size: 7
            }
            dim {
              size: 2
            }
            dim {
              size: 2
            }
          }
          shape {
            dim {
              size: 7
            }
            dim {
              size: 2
            }
            dim {
              size: 2
            }
          }
          shape {
            dim {
              size: 7
            }
            dim {
              size: 2
            }
            dim {
              size: 2
            }
          }
          shape {
            dim {
              size: 7
            }
            dim {
              size: 2
            }
            dim {
              size: 2
            }
          }
          shape {
            dim {
              size: 2
            }
          }
        }
      }
    }
    arg_attr {
      value {
      }
    }
    arg_attr {
      key: 1
      value {
      }
    }
    arg_attr {
      key: 2
      value {
      }
    }
    arg_attr {
      key: 3
      value {
      }
    }
    arg_attr {
      key: 4
      value {
      }
    }
    arg_attr {
      key: 5
      value {
      }
    }
    arg_attr {
      key: 6
      value {
      }
    }
    arg_attr {
      key: 7
      value {
      }
    }
    arg_attr {
      key: 8
      value {
      }
    }
    arg_attr {
      key: 9
      value {
      }
    }
    arg_attr {
      key: 10
      value {
      }
    }
    arg_attr {
      key: 11
      value {
      }
    }
    arg_attr {
      key: 12
      value {
      }
    }
    arg_attr {
      key: 13
      value {
      }
    }
    arg_attr {
      key: 14
      value {
      }
    }
    arg_attr {
      key: 15
      value {
      }
    }
    arg_attr {
      key: 16
      value {
      }
    }
    arg_attr {
      key: 17
      value {
      }
    }
    arg_attr {
      key: 18
      value {
      }
    }
    arg_attr {
      key: 19
      value {
      }
    }
    arg_attr {
      key: 20
      value {
      }
    }
    arg_attr {
      key: 21
      value {
      }
    }
    arg_attr {
      key: 22
      value {
      }
    }
    arg_attr {
      key: 23
      value {
      }
    }
    arg_attr {
      key: 24
      value {
      }
    }
    arg_attr {
      key: 25
      value {
      }
    }
    arg_attr {
      key: 26
      value {
      }
    }
    arg_attr {
      key: 27
      value {
      }
    }
    arg_attr {
      key: 28
      value {
      }
    }
    arg_attr {
      key: 29
      value {
      }
    }
    arg_attr {
      key: 30
      value {
      }
    }
    arg_attr {
      key: 31
      value {
      }
    }
    arg_attr {
      key: 32
      value {
      }
    }
    arg_attr {
      key: 33
      value {
      }
    }
    arg_attr {
      key: 34
      value {
      }
    }
    arg_attr {
      key: 35
      value {
      }
    }
    arg_attr {
      key: 36
      value {
      }
    }
  }
  function {
    signature {
      name: "UpdateQuantile_wait_until_quaniles_accumulated_false_1157"
      input_arg {
        name: "placeholder"
        type: DT_RESOURCE
      }
      input_arg {
        name: "placeholder_1"
        type: DT_RESOURCE
      }
      input_arg {
        name: "placeholder_2"
        type: DT_RESOURCE
      }
      input_arg {
        name: "identity_updatequantile_greaterequal"
        type: DT_BOOL
      }
      output_arg {
        name: "identity"
        type: DT_BOOL
      }
    }
    node_def {
      name: "NoOp"
      op: "NoOp"
      attr {
        key: "_output_shapes"
        value {
          list {
          }
        }
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "identity_updatequantile_greaterequal"
      input: "^NoOp"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            unknown_rank: true
          }
          shape {
            unknown_rank: true
          }
          shape {
            unknown_rank: true
          }
          shape {
          }
        }
      }
    }
    arg_attr {
      value {
      }
    }
    arg_attr {
      key: 1
      value {
      }
    }
    arg_attr {
      key: 2
      value {
      }
    }
    arg_attr {
      key: 3
      value {
      }
    }
  }
  function {
    signature {
      name: "wait_until_n_batches_for_bias_accumulated_true_700"
      input_arg {
        name: "resourceaccumulatortakegradient_boosted_trees_conditional_accumulator_2"
        type: DT_RESOURCE
      }
      input_arg {
        name: "boostedtreescenterbias_boosted_trees"
        type: DT_RESOURCE
      }
      input_arg {
        name: "assignvariableop_boosted_trees_center_bias_needed"
        type: DT_RESOURCE
      }
      input_arg {
        name: "cond_boosted_trees_stamp_token"
        type: DT_INT64
      }
      input_arg {
        name: "cond_boosted_trees_conditional_accumulator"
        type: DT_RESOURCE
      }
      input_arg {
        name: "cond_boosted_trees_conditional_accumulator_1"
        type: DT_RESOURCE
      }
      input_arg {
        name: "placeholder"
        type: DT_BOOL
      }
      output_arg {
        name: "cond_identity"
        type: DT_BOOL
      }
      is_stateful: true
    }
    node_def {
      name: "ResourceAccumulatorTakeGradient/num_required"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "ResourceAccumulatorTakeGradient"
      op: "ResourceAccumulatorTakeGradient"
      input: "resourceaccumulatortakegradient_boosted_trees_conditional_accumulator_2"
      input: "ResourceAccumulatorTakeGradient/num_required:output:0"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "unstack"
      op: "Unpack"
      input: "ResourceAccumulatorTakeGradient:average:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
      attr {
        key: "num"
        value {
          i: 2
        }
      }
    }
    node_def {
      name: "ExpandDims/dim"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "ExpandDims"
      op: "ExpandDims"
      input: "unstack:output:0"
      input: "ExpandDims/dim:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node_def {
      name: "ExpandDims_1/dim"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "ExpandDims_1"
      op: "ExpandDims"
      input: "unstack:output:1"
      input: "ExpandDims_1/dim:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node_def {
      name: "BoostedTreesCenterBias/l1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.009999999776482582
          }
        }
      }
    }
    node_def {
      name: "BoostedTreesCenterBias/l2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.009999999776482582
          }
        }
      }
    }
    node_def {
      name: "BoostedTreesCenterBias"
      op: "BoostedTreesCenterBias"
      input: "boostedtreescenterbias_boosted_trees"
      input: "ExpandDims:output:0"
      input: "ExpandDims_1:output:0"
      input: "BoostedTreesCenterBias/l1:output:0"
      input: "BoostedTreesCenterBias/l2:output:0"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "AssignVariableOp"
      op: "AssignVariableOp"
      input: "assignvariableop_boosted_trees_center_bias_needed"
      input: "BoostedTreesCenterBias:continue_centering:0"
      attr {
        key: "_output_shapes"
        value {
          list {
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_BOOL
        }
      }
    }
    node_def {
      name: "cond/ReadVariableOp"
      op: "ReadVariableOp"
      input: "assignvariableop_boosted_trees_center_bias_needed"
      input: "^AssignVariableOp"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_BOOL
        }
      }
    }
    node_def {
      name: "cond"
      op: "If"
      input: "cond/ReadVariableOp:value:0"
      input: "cond/ReadVariableOp:value:0"
      input: "cond_boosted_trees_stamp_token"
      input: "cond_boosted_trees_conditional_accumulator"
      input: "cond_boosted_trees_conditional_accumulator_1"
      attr {
        key: "Tcond"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Tin"
        value {
          list {
            type: DT_BOOL
            type: DT_INT64
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_BOOL
          }
        }
      }
      attr {
        key: "_lower_using_switch_merge"
        value {
          b: true
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "else_branch"
        value {
          func {
            name: "cond_false_718"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "then_branch"
        value {
          func {
            name: "cond_true_717"
          }
        }
      }
    }
    node_def {
      name: "cond/Identity"
      op: "Identity"
      input: "cond:output:0"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    ret {
      key: "cond_identity"
      value: "cond/Identity:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            unknown_rank: true
          }
          shape {
            unknown_rank: true
          }
          shape {
            unknown_rank: true
          }
          shape {
          }
          shape {
            unknown_rank: true
          }
          shape {
            unknown_rank: true
          }
          shape {
          }
        }
      }
    }
    arg_attr {
      value {
      }
    }
    arg_attr {
      key: 1
      value {
      }
    }
    arg_attr {
      key: 2
      value {
      }
    }
    arg_attr {
      key: 3
      value {
      }
    }
    arg_attr {
      key: 4
      value {
      }
    }
    arg_attr {
      key: 5
      value {
      }
    }
    arg_attr {
      key: 6
      value {
      }
    }
  }
  function {
    signature {
      name: "wait_until_n_batches_accumulated_false_799"
      input_arg {
        name: "placeholder"
        type: DT_RESOURCE
      }
      input_arg {
        name: "placeholder_1"
        type: DT_RESOURCE
      }
      input_arg {
        name: "placeholder_2"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_3"
        type: DT_RESOURCE
      }
      input_arg {
        name: "identity_greaterequal"
        type: DT_BOOL
      }
      output_arg {
        name: "identity"
        type: DT_BOOL
      }
    }
    node_def {
      name: "NoOp"
      op: "NoOp"
      attr {
        key: "_output_shapes"
        value {
          list {
          }
        }
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "identity_greaterequal"
      input: "^NoOp"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            unknown_rank: true
          }
          shape {
            unknown_rank: true
          }
          shape {
            dim {
              size: 2
            }
          }
          shape {
            unknown_rank: true
          }
          shape {
          }
        }
      }
    }
    arg_attr {
      value {
      }
    }
    arg_attr {
      key: 1
      value {
      }
    }
    arg_attr {
      key: 2
      value {
      }
    }
    arg_attr {
      key: 3
      value {
      }
    }
    arg_attr {
      key: 4
      value {
      }
    }
  }
  function {
    signature {
      name: "head_cond_true_556"
      input_arg {
        name: "neg_boosted_trees_add"
        type: DT_FLOAT
      }
      input_arg {
        name: "cast_1_iteratorgetnext"
        type: DT_INT32
      }
      input_arg {
        name: "boostedtreesmakestatssummary_boosted_trees_boostedtreestrainingpredict"
        type: DT_INT32
      }
      input_arg {
        name: "boostedtreesmakestatssummary_boosted_trees_boostedtreesbucketize"
        type: DT_INT32
      }
      input_arg {
        name: "boostedtreesmakestatssummary_1_boosted_trees_boostedtreesbucketize_1"
        type: DT_INT32
      }
      input_arg {
        name: "boostedtreesmakestatssummary_2_boosted_trees_boostedtreesbucketize_2"
        type: DT_INT32
      }
      input_arg {
        name: "boostedtreesmakestatssummary_3_boosted_trees_boostedtreesbucketize_3"
        type: DT_INT32
      }
      input_arg {
        name: "boostedtreesmakestatssummary_4_boosted_trees_boostedtreesbucketize_4"
        type: DT_INT32
      }
      input_arg {
        name: "boostedtreesmakestatssummary_5_boosted_trees_boostedtreesbucketize_5"
        type: DT_INT32
      }
      input_arg {
        name: "boostedtreesmakestatssummary_6_boosted_trees_boostedtreesbucketize_6"
        type: DT_INT32
      }
      input_arg {
        name: "boostedtreesmakestatssummary_7_boosted_trees_boostedtreesbucketize_7"
        type: DT_INT32
      }
      input_arg {
        name: "boostedtreesmakestatssummary_8_boosted_trees_boostedtreesbucketize_8"
        type: DT_INT32
      }
      input_arg {
        name: "boostedtreesmakestatssummary_9_boosted_trees_boostedtreesbucketize_9"
        type: DT_INT32
      }
      input_arg {
        name: "boostedtreesmakestatssummary_10_boosted_trees_boostedtreesbucketize_10"
        type: DT_INT32
      }
      input_arg {
        name: "boostedtreesmakestatssummary_11_boosted_trees_boostedtreesbucketize_11"
        type: DT_INT32
      }
      input_arg {
        name: "boostedtreesmakestatssummary_12_boosted_trees_boostedtreesbucketize_12"
        type: DT_INT32
      }
      input_arg {
        name: "boostedtreesmakestatssummary_13_boosted_trees_boostedtreesbucketize_13"
        type: DT_INT32
      }
      input_arg {
        name: "boostedtreesmakestatssummary_14_boosted_trees_boostedtreesbucketize_14"
        type: DT_INT32
      }
      input_arg {
        name: "boostedtreesmakestatssummary_15_boosted_trees_boostedtreesbucketize_15"
        type: DT_INT32
      }
      input_arg {
        name: "boostedtreesmakestatssummary_16_boosted_trees_boostedtreesbucketize_16"
        type: DT_INT32
      }
      input_arg {
        name: "boostedtreesmakestatssummary_17_boosted_trees_boostedtreesbucketize_17"
        type: DT_INT32
      }
      input_arg {
        name: "boostedtreesmakestatssummary_18_boosted_trees_boostedtreesbucketize_18"
        type: DT_INT32
      }
      input_arg {
        name: "boostedtreesmakestatssummary_19_boosted_trees_boostedtreesbucketize_19"
        type: DT_INT32
      }
      input_arg {
        name: "boostedtreesmakestatssummary_20_boosted_trees_unstack_7"
        type: DT_INT32
      }
      input_arg {
        name: "boostedtreesmakestatssummary_21_boosted_trees_unstack_7"
        type: DT_INT32
      }
      input_arg {
        name: "boostedtreesmakestatssummary_22_boosted_trees_unstack_7"
        type: DT_INT32
      }
      input_arg {
        name: "boostedtreesmakestatssummary_23_boosted_trees_unstack_7"
        type: DT_INT32
      }
      input_arg {
        name: "boostedtreesmakestatssummary_24_boosted_trees_unstack_7"
        type: DT_INT32
      }
      input_arg {
        name: "boostedtreesmakestatssummary_25_boosted_trees_unstack_7"
        type: DT_INT32
      }
      input_arg {
        name: "boostedtreesmakestatssummary_26_boosted_trees_unstack_21"
        type: DT_INT32
      }
      input_arg {
        name: "boostedtreesmakestatssummary_27_boosted_trees_unstack_21"
        type: DT_INT32
      }
      input_arg {
        name: "cond_readvariableop_boosted_trees_center_bias_needed"
        type: DT_RESOURCE
      }
      input_arg {
        name: "cond_boosted_trees_conditional_accumulator_2"
        type: DT_RESOURCE
      }
      input_arg {
        name: "cond_boosted_trees_stamp_token"
        type: DT_INT64
      }
      input_arg {
        name: "cond_boosted_trees"
        type: DT_RESOURCE
      }
      input_arg {
        name: "cond_boosted_trees_conditional_accumulator"
        type: DT_RESOURCE
      }
      input_arg {
        name: "cond_boosted_trees_conditional_accumulator_1"
        type: DT_RESOURCE
      }
      input_arg {
        name: "cond_boosted_trees_last_layer_nodes_range"
        type: DT_INT32
      }
      input_arg {
        name: "assignaddvariableop_global_step"
        type: DT_RESOURCE
      }
      input_arg {
        name: "identity_head_cond_readvariableop"
        type: DT_BOOL
      }
      input_arg {
        name: "placeholder"
        type: DT_FLOAT
      }
      input_arg {
        name: "placeholder_1"
        type: DT_FLOAT
      }
      input_arg {
        name: "placeholder_2"
        type: DT_FLOAT
      }
      input_arg {
        name: "placeholder_3"
        type: DT_FLOAT
      }
      input_arg {
        name: "placeholder_4"
        type: DT_FLOAT
      }
      input_arg {
        name: "placeholder_5"
        type: DT_FLOAT
      }
      input_arg {
        name: "placeholder_6"
        type: DT_FLOAT
      }
      input_arg {
        name: "placeholder_7"
        type: DT_FLOAT
      }
      input_arg {
        name: "placeholder_8"
        type: DT_FLOAT
      }
      input_arg {
        name: "placeholder_9"
        type: DT_FLOAT
      }
      input_arg {
        name: "placeholder_10"
        type: DT_FLOAT
      }
      input_arg {
        name: "placeholder_11"
        type: DT_FLOAT
      }
      input_arg {
        name: "placeholder_12"
        type: DT_FLOAT
      }
      input_arg {
        name: "placeholder_13"
        type: DT_FLOAT
      }
      input_arg {
        name: "placeholder_14"
        type: DT_FLOAT
      }
      input_arg {
        name: "placeholder_15"
        type: DT_FLOAT
      }
      input_arg {
        name: "placeholder_16"
        type: DT_FLOAT
      }
      input_arg {
        name: "placeholder_17"
        type: DT_FLOAT
      }
      input_arg {
        name: "placeholder_18"
        type: DT_FLOAT
      }
      input_arg {
        name: "placeholder_19"
        type: DT_FLOAT
      }
      input_arg {
        name: "placeholder_20"
        type: DT_FLOAT
      }
      input_arg {
        name: "placeholder_21"
        type: DT_RESOURCE
      }
      input_arg {
        name: "placeholder_22"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_BOOL
      }
      is_stateful: true
    }
    node_def {
      name: "Neg"
      op: "Neg"
      input: "neg_boosted_trees_add"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node_def {
      name: "Exp"
      op: "Exp"
      input: "Neg:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node_def {
      name: "add/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node_def {
      name: "add"
      op: "AddV2"
      input: "Exp:y:0"
      input: "add/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node_def {
      name: "Reciprocal"
      op: "Reciprocal"
      input: "add:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node_def {
      name: "Size"
      op: "Size"
      input: "Reciprocal:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "Cast"
      op: "Cast"
      input: "Size:output:0"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "Reciprocal_1"
      op: "Reciprocal"
      input: "Cast:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "Cast_1"
      op: "Cast"
      input: "cast_1_iteratorgetnext"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node_def {
      name: "labels/ExpandDims/dim"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
    }
    node_def {
      name: "labels/ExpandDims"
      op: "ExpandDims"
      input: "Cast_1:y:0"
      input: "labels/ExpandDims/dim:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node_def {
      name: "labels/Shape"
      op: "Shape"
      input: "labels/ExpandDims:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "labels/Shape_1"
      op: "Shape"
      input: "neg_boosted_trees_add"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "labels/assert_rank_at_least/rank"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 2
          }
        }
      }
    }
    node_def {
      name: "labels/assert_rank_at_least/Shape"
      op: "Shape"
      input: "labels/ExpandDims:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "labels/assert_rank_at_least/assert_type/statically_determined_correct_type"
      op: "NoOp"
      attr {
        key: "_output_shapes"
        value {
          list {
          }
        }
      }
    }
    node_def {
      name: "labels/assert_rank_at_least/static_checks_determined_all_ok"
      op: "NoOp"
      attr {
        key: "_output_shapes"
        value {
          list {
          }
        }
      }
    }
    node_def {
      name: "labels/strided_slice/stack"
      op: "Const"
      input: "^labels/assert_rank_at_least/static_checks_determined_all_ok"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "labels/strided_slice/stack_1"
      op: "Const"
      input: "^labels/assert_rank_at_least/static_checks_determined_all_ok"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
    }
    node_def {
      name: "labels/strided_slice/stack_2"
      op: "Const"
      input: "^labels/assert_rank_at_least/static_checks_determined_all_ok"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "labels/strided_slice"
      op: "StridedSlice"
      input: "labels/Shape_1:output:0"
      input: "labels/strided_slice/stack:output:0"
      input: "labels/strided_slice/stack_1:output:0"
      input: "labels/strided_slice/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "labels/concat/values_1"
      op: "Const"
      input: "^labels/assert_rank_at_least/static_checks_determined_all_ok"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "labels/concat/axis"
      op: "Const"
      input: "^labels/assert_rank_at_least/static_checks_determined_all_ok"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "labels/concat"
      op: "ConcatV2"
      input: "labels/strided_slice:output:0"
      input: "labels/concat/values_1:output:0"
      input: "labels/concat/axis:output:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node_def {
      name: "labels/assert_equal_1/Equal"
      op: "Equal"
      input: "labels/concat:output:0"
      input: "labels/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "labels/assert_equal_1/Const"
      op: "Const"
      input: "^labels/assert_rank_at_least/static_checks_determined_all_ok"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "labels/assert_equal_1/All"
      op: "All"
      input: "labels/assert_equal_1/Equal:z:0"
      input: "labels/assert_equal_1/Const:output:0"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "labels/assert_equal_1/Assert/Const"
      op: "Const"
      input: "^labels/assert_rank_at_least/static_checks_determined_all_ok"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "labels shape must be [D0, D1, ... DN, 1]. Suggested Fix: check your n_classes argument to the estimator and/or the shape of your label."
          }
        }
      }
    }
    node_def {
      name: "labels/assert_equal_1/Assert/Const_1"
      op: "Const"
      input: "^labels/assert_rank_at_least/static_checks_determined_all_ok"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "expected_labels_shape: "
          }
        }
      }
    }
    node_def {
      name: "labels/assert_equal_1/Assert/Const_2"
      op: "Const"
      input: "^labels/assert_rank_at_least/static_checks_determined_all_ok"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "labels_shape: "
          }
        }
      }
    }
    node_def {
      name: "labels/assert_equal_1/Assert/Assert/data_0"
      op: "Const"
      input: "^labels/assert_rank_at_least/static_checks_determined_all_ok"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "labels shape must be [D0, D1, ... DN, 1]. Suggested Fix: check your n_classes argument to the estimator and/or the shape of your label."
          }
        }
      }
    }
    node_def {
      name: "labels/assert_equal_1/Assert/Assert/data_1"
      op: "Const"
      input: "^labels/assert_rank_at_least/static_checks_determined_all_ok"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "expected_labels_shape: "
          }
        }
      }
    }
    node_def {
      name: "labels/assert_equal_1/Assert/Assert/data_3"
      op: "Const"
      input: "^labels/assert_rank_at_least/static_checks_determined_all_ok"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "labels_shape: "
          }
        }
      }
    }
    node_def {
      name: "labels/assert_equal_1/Assert/Assert"
      op: "Assert"
      input: "labels/assert_equal_1/All:output:0"
      input: "labels/assert_equal_1/Assert/Assert/data_0:output:0"
      input: "labels/assert_equal_1/Assert/Assert/data_1:output:0"
      input: "labels/concat:output:0"
      input: "labels/assert_equal_1/Assert/Assert/data_3:output:0"
      input: "labels/Shape:output:0"
      attr {
        key: "T"
        value {
          list {
            type: DT_STRING
            type: DT_STRING
            type: DT_INT32
            type: DT_STRING
            type: DT_INT32
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
          }
        }
      }
      attr {
        key: "summarize"
        value {
          i: 3
        }
      }
    }
    node_def {
      name: "labels"
      op: "Identity"
      input: "labels/ExpandDims:output:0"
      input: "^labels/assert_equal_1/Assert/Assert"
      input: "^labels/assert_rank_at_least/static_checks_determined_all_ok"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node_def {
      name: "sub"
      op: "Sub"
      input: "Reciprocal:y:0"
      input: "labels:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node_def {
      name: "mul"
      op: "Mul"
      input: "sub:z:0"
      input: "Reciprocal_1:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node_def {
      name: "sub_1/x"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node_def {
      name: "sub_1"
      op: "Sub"
      input: "sub_1/x:output:0"
      input: "Reciprocal:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node_def {
      name: "mul_1"
      op: "Mul"
      input: "Reciprocal:y:0"
      input: "sub_1:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node_def {
      name: "mul_2"
      op: "Mul"
      input: "mul_1:z:0"
      input: "Reciprocal_1:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node_def {
      name: "BoostedTreesMakeStatsSummary"
      op: "BoostedTreesMakeStatsSummary"
      input: "boostedtreesmakestatssummary_boosted_trees_boostedtreestrainingpredict"
      input: "mul:z:0"
      input: "mul_2:z:0"
      input: "boostedtreesmakestatssummary_boosted_trees_boostedtreesbucketize"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 7
              }
              dim {
                size: 100
              }
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "max_splits"
        value {
          i: 7
        }
      }
      attr {
        key: "num_buckets"
        value {
          i: 100
        }
      }
      attr {
        key: "num_features"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "Squeeze"
      op: "Squeeze"
      input: "BoostedTreesMakeStatsSummary:stats_summary:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 7
              }
              dim {
                size: 100
              }
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "squeeze_dims"
        value {
          list {
            i: 0
          }
        }
      }
    }
    node_def {
      name: "BoostedTreesMakeStatsSummary_1"
      op: "BoostedTreesMakeStatsSummary"
      input: "boostedtreesmakestatssummary_boosted_trees_boostedtreestrainingpredict"
      input: "mul:z:0"
      input: "mul_2:z:0"
      input: "boostedtreesmakestatssummary_1_boosted_trees_boostedtreesbucketize_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 7
              }
              dim {
                size: 100
              }
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "max_splits"
        value {
          i: 7
        }
      }
      attr {
        key: "num_buckets"
        value {
          i: 100
        }
      }
      attr {
        key: "num_features"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "Squeeze_1"
      op: "Squeeze"
      input: "BoostedTreesMakeStatsSummary_1:stats_summary:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 7
              }
              dim {
                size: 100
              }
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "squeeze_dims"
        value {
          list {
            i: 0
          }
        }
      }
    }
    node_def {
      name: "BoostedTreesMakeStatsSummary_2"
      op: "BoostedTreesMakeStatsSummary"
      input: "boostedtreesmakestatssummary_boosted_trees_boostedtreestrainingpredict"
      input: "mul:z:0"
      input: "mul_2:z:0"
      input: "boostedtreesmakestatssummary_2_boosted_trees_boostedtreesbucketize_2"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 7
              }
              dim {
                size: 100
              }
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "max_splits"
        value {
          i: 7
        }
      }
      attr {
        key: "num_buckets"
        value {
          i: 100
        }
      }
      attr {
        key: "num_features"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "Squeeze_2"
      op: "Squeeze"
      input: "BoostedTreesMakeStatsSummary_2:stats_summary:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 7
              }
              dim {
                size: 100
              }
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "squeeze_dims"
        value {
          list {
            i: 0
          }
        }
      }
    }
    node_def {
      name: "BoostedTreesMakeStatsSummary_3"
      op: "BoostedTreesMakeStatsSummary"
      input: "boostedtreesmakestatssummary_boosted_trees_boostedtreestrainingpredict"
      input: "mul:z:0"
      input: "mul_2:z:0"
      input: "boostedtreesmakestatssummary_3_boosted_trees_boostedtreesbucketize_3"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 7
              }
              dim {
                size: 100
              }
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "max_splits"
        value {
          i: 7
        }
      }
      attr {
        key: "num_buckets"
        value {
          i: 100
        }
      }
      attr {
        key: "num_features"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "Squeeze_3"
      op: "Squeeze"
      input: "BoostedTreesMakeStatsSummary_3:stats_summary:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 7
              }
              dim {
                size: 100
              }
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "squeeze_dims"
        value {
          list {
            i: 0
          }
        }
      }
    }
    node_def {
      name: "BoostedTreesMakeStatsSummary_4"
      op: "BoostedTreesMakeStatsSummary"
      input: "boostedtreesmakestatssummary_boosted_trees_boostedtreestrainingpredict"
      input: "mul:z:0"
      input: "mul_2:z:0"
      input: "boostedtreesmakestatssummary_4_boosted_trees_boostedtreesbucketize_4"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 7
              }
              dim {
                size: 100
              }
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "max_splits"
        value {
          i: 7
        }
      }
      attr {
        key: "num_buckets"
        value {
          i: 100
        }
      }
      attr {
        key: "num_features"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "Squeeze_4"
      op: "Squeeze"
      input: "BoostedTreesMakeStatsSummary_4:stats_summary:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 7
              }
              dim {
                size: 100
              }
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "squeeze_dims"
        value {
          list {
            i: 0
          }
        }
      }
    }
    node_def {
      name: "BoostedTreesMakeStatsSummary_5"
      op: "BoostedTreesMakeStatsSummary"
      input: "boostedtreesmakestatssummary_boosted_trees_boostedtreestrainingpredict"
      input: "mul:z:0"
      input: "mul_2:z:0"
      input: "boostedtreesmakestatssummary_5_boosted_trees_boostedtreesbucketize_5"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 7
              }
              dim {
                size: 100
              }
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "max_splits"
        value {
          i: 7
        }
      }
      attr {
        key: "num_buckets"
        value {
          i: 100
        }
      }
      attr {
        key: "num_features"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "Squeeze_5"
      op: "Squeeze"
      input: "BoostedTreesMakeStatsSummary_5:stats_summary:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 7
              }
              dim {
                size: 100
              }
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "squeeze_dims"
        value {
          list {
            i: 0
          }
        }
      }
    }
    node_def {
      name: "BoostedTreesMakeStatsSummary_6"
      op: "BoostedTreesMakeStatsSummary"
      input: "boostedtreesmakestatssummary_boosted_trees_boostedtreestrainingpredict"
      input: "mul:z:0"
      input: "mul_2:z:0"
      input: "boostedtreesmakestatssummary_6_boosted_trees_boostedtreesbucketize_6"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 7
              }
              dim {
                size: 100
              }
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "max_splits"
        value {
          i: 7
        }
      }
      attr {
        key: "num_buckets"
        value {
          i: 100
        }
      }
      attr {
        key: "num_features"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "Squeeze_6"
      op: "Squeeze"
      input: "BoostedTreesMakeStatsSummary_6:stats_summary:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 7
              }
              dim {
                size: 100
              }
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "squeeze_dims"
        value {
          list {
            i: 0
          }
        }
      }
    }
    node_def {
      name: "BoostedTreesMakeStatsSummary_7"
      op: "BoostedTreesMakeStatsSummary"
      input: "boostedtreesmakestatssummary_boosted_trees_boostedtreestrainingpredict"
      input: "mul:z:0"
      input: "mul_2:z:0"
      input: "boostedtreesmakestatssummary_7_boosted_trees_boostedtreesbucketize_7"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 7
              }
              dim {
                size: 100
              }
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "max_splits"
        value {
          i: 7
        }
      }
      attr {
        key: "num_buckets"
        value {
          i: 100
        }
      }
      attr {
        key: "num_features"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "Squeeze_7"
      op: "Squeeze"
      input: "BoostedTreesMakeStatsSummary_7:stats_summary:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 7
              }
              dim {
                size: 100
              }
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "squeeze_dims"
        value {
          list {
            i: 0
          }
        }
      }
    }
    node_def {
      name: "BoostedTreesMakeStatsSummary_8"
      op: "BoostedTreesMakeStatsSummary"
      input: "boostedtreesmakestatssummary_boosted_trees_boostedtreestrainingpredict"
      input: "mul:z:0"
      input: "mul_2:z:0"
      input: "boostedtreesmakestatssummary_8_boosted_trees_boostedtreesbucketize_8"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 7
              }
              dim {
                size: 100
              }
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "max_splits"
        value {
          i: 7
        }
      }
      attr {
        key: "num_buckets"
        value {
          i: 100
        }
      }
      attr {
        key: "num_features"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "Squeeze_8"
      op: "Squeeze"
      input: "BoostedTreesMakeStatsSummary_8:stats_summary:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 7
              }
              dim {
                size: 100
              }
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "squeeze_dims"
        value {
          list {
            i: 0
          }
        }
      }
    }
    node_def {
      name: "BoostedTreesMakeStatsSummary_9"
      op: "BoostedTreesMakeStatsSummary"
      input: "boostedtreesmakestatssummary_boosted_trees_boostedtreestrainingpredict"
      input: "mul:z:0"
      input: "mul_2:z:0"
      input: "boostedtreesmakestatssummary_9_boosted_trees_boostedtreesbucketize_9"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 7
              }
              dim {
                size: 100
              }
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "max_splits"
        value {
          i: 7
        }
      }
      attr {
        key: "num_buckets"
        value {
          i: 100
        }
      }
      attr {
        key: "num_features"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "Squeeze_9"
      op: "Squeeze"
      input: "BoostedTreesMakeStatsSummary_9:stats_summary:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 7
              }
              dim {
                size: 100
              }
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "squeeze_dims"
        value {
          list {
            i: 0
          }
        }
      }
    }
    node_def {
      name: "BoostedTreesMakeStatsSummary_10"
      op: "BoostedTreesMakeStatsSummary"
      input: "boostedtreesmakestatssummary_boosted_trees_boostedtreestrainingpredict"
      input: "mul:z:0"
      input: "mul_2:z:0"
      input: "boostedtreesmakestatssummary_10_boosted_trees_boostedtreesbucketize_10"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 7
              }
              dim {
                size: 100
              }
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "max_splits"
        value {
          i: 7
        }
      }
      attr {
        key: "num_buckets"
        value {
          i: 100
        }
      }
      attr {
        key: "num_features"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "Squeeze_10"
      op: "Squeeze"
      input: "BoostedTreesMakeStatsSummary_10:stats_summary:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 7
              }
              dim {
                size: 100
              }
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "squeeze_dims"
        value {
          list {
            i: 0
          }
        }
      }
    }
    node_def {
      name: "BoostedTreesMakeStatsSummary_11"
      op: "BoostedTreesMakeStatsSummary"
      input: "boostedtreesmakestatssummary_boosted_trees_boostedtreestrainingpredict"
      input: "mul:z:0"
      input: "mul_2:z:0"
      input: "boostedtreesmakestatssummary_11_boosted_trees_boostedtreesbucketize_11"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 7
              }
              dim {
                size: 100
              }
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "max_splits"
        value {
          i: 7
        }
      }
      attr {
        key: "num_buckets"
        value {
          i: 100
        }
      }
      attr {
        key: "num_features"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "Squeeze_11"
      op: "Squeeze"
      input: "BoostedTreesMakeStatsSummary_11:stats_summary:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 7
              }
              dim {
                size: 100
              }
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "squeeze_dims"
        value {
          list {
            i: 0
          }
        }
      }
    }
    node_def {
      name: "BoostedTreesMakeStatsSummary_12"
      op: "BoostedTreesMakeStatsSummary"
      input: "boostedtreesmakestatssummary_boosted_trees_boostedtreestrainingpredict"
      input: "mul:z:0"
      input: "mul_2:z:0"
      input: "boostedtreesmakestatssummary_12_boosted_trees_boostedtreesbucketize_12"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 7
              }
              dim {
                size: 100
              }
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "max_splits"
        value {
          i: 7
        }
      }
      attr {
        key: "num_buckets"
        value {
          i: 100
        }
      }
      attr {
        key: "num_features"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "Squeeze_12"
      op: "Squeeze"
      input: "BoostedTreesMakeStatsSummary_12:stats_summary:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 7
              }
              dim {
                size: 100
              }
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "squeeze_dims"
        value {
          list {
            i: 0
          }
        }
      }
    }
    node_def {
      name: "BoostedTreesMakeStatsSummary_13"
      op: "BoostedTreesMakeStatsSummary"
      input: "boostedtreesmakestatssummary_boosted_trees_boostedtreestrainingpredict"
      input: "mul:z:0"
      input: "mul_2:z:0"
      input: "boostedtreesmakestatssummary_13_boosted_trees_boostedtreesbucketize_13"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 7
              }
              dim {
                size: 100
              }
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "max_splits"
        value {
          i: 7
        }
      }
      attr {
        key: "num_buckets"
        value {
          i: 100
        }
      }
      attr {
        key: "num_features"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "Squeeze_13"
      op: "Squeeze"
      input: "BoostedTreesMakeStatsSummary_13:stats_summary:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 7
              }
              dim {
                size: 100
              }
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "squeeze_dims"
        value {
          list {
            i: 0
          }
        }
      }
    }
    node_def {
      name: "BoostedTreesMakeStatsSummary_14"
      op: "BoostedTreesMakeStatsSummary"
      input: "boostedtreesmakestatssummary_boosted_trees_boostedtreestrainingpredict"
      input: "mul:z:0"
      input: "mul_2:z:0"
      input: "boostedtreesmakestatssummary_14_boosted_trees_boostedtreesbucketize_14"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 7
              }
              dim {
                size: 100
              }
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "max_splits"
        value {
          i: 7
        }
      }
      attr {
        key: "num_buckets"
        value {
          i: 100
        }
      }
      attr {
        key: "num_features"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "Squeeze_14"
      op: "Squeeze"
      input: "BoostedTreesMakeStatsSummary_14:stats_summary:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 7
              }
              dim {
                size: 100
              }
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "squeeze_dims"
        value {
          list {
            i: 0
          }
        }
      }
    }
    node_def {
      name: "BoostedTreesMakeStatsSummary_15"
      op: "BoostedTreesMakeStatsSummary"
      input: "boostedtreesmakestatssummary_boosted_trees_boostedtreestrainingpredict"
      input: "mul:z:0"
      input: "mul_2:z:0"
      input: "boostedtreesmakestatssummary_15_boosted_trees_boostedtreesbucketize_15"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 7
              }
              dim {
                size: 100
              }
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "max_splits"
        value {
          i: 7
        }
      }
      attr {
        key: "num_buckets"
        value {
          i: 100
        }
      }
      attr {
        key: "num_features"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "Squeeze_15"
      op: "Squeeze"
      input: "BoostedTreesMakeStatsSummary_15:stats_summary:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 7
              }
              dim {
                size: 100
              }
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "squeeze_dims"
        value {
          list {
            i: 0
          }
        }
      }
    }
    node_def {
      name: "BoostedTreesMakeStatsSummary_16"
      op: "BoostedTreesMakeStatsSummary"
      input: "boostedtreesmakestatssummary_boosted_trees_boostedtreestrainingpredict"
      input: "mul:z:0"
      input: "mul_2:z:0"
      input: "boostedtreesmakestatssummary_16_boosted_trees_boostedtreesbucketize_16"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 7
              }
              dim {
                size: 100
              }
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "max_splits"
        value {
          i: 7
        }
      }
      attr {
        key: "num_buckets"
        value {
          i: 100
        }
      }
      attr {
        key: "num_features"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "Squeeze_16"
      op: "Squeeze"
      input: "BoostedTreesMakeStatsSummary_16:stats_summary:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 7
              }
              dim {
                size: 100
              }
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "squeeze_dims"
        value {
          list {
            i: 0
          }
        }
      }
    }
    node_def {
      name: "BoostedTreesMakeStatsSummary_17"
      op: "BoostedTreesMakeStatsSummary"
      input: "boostedtreesmakestatssummary_boosted_trees_boostedtreestrainingpredict"
      input: "mul:z:0"
      input: "mul_2:z:0"
      input: "boostedtreesmakestatssummary_17_boosted_trees_boostedtreesbucketize_17"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 7
              }
              dim {
                size: 100
              }
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "max_splits"
        value {
          i: 7
        }
      }
      attr {
        key: "num_buckets"
        value {
          i: 100
        }
      }
      attr {
        key: "num_features"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "Squeeze_17"
      op: "Squeeze"
      input: "BoostedTreesMakeStatsSummary_17:stats_summary:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 7
              }
              dim {
                size: 100
              }
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "squeeze_dims"
        value {
          list {
            i: 0
          }
        }
      }
    }
    node_def {
      name: "BoostedTreesMakeStatsSummary_18"
      op: "BoostedTreesMakeStatsSummary"
      input: "boostedtreesmakestatssummary_boosted_trees_boostedtreestrainingpredict"
      input: "mul:z:0"
      input: "mul_2:z:0"
      input: "boostedtreesmakestatssummary_18_boosted_trees_boostedtreesbucketize_18"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 7
              }
              dim {
                size: 100
              }
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "max_splits"
        value {
          i: 7
        }
      }
      attr {
        key: "num_buckets"
        value {
          i: 100
        }
      }
      attr {
        key: "num_features"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "Squeeze_18"
      op: "Squeeze"
      input: "BoostedTreesMakeStatsSummary_18:stats_summary:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 7
              }
              dim {
                size: 100
              }
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "squeeze_dims"
        value {
          list {
            i: 0
          }
        }
      }
    }
    node_def {
      name: "BoostedTreesMakeStatsSummary_19"
      op: "BoostedTreesMakeStatsSummary"
      input: "boostedtreesmakestatssummary_boosted_trees_boostedtreestrainingpredict"
      input: "mul:z:0"
      input: "mul_2:z:0"
      input: "boostedtreesmakestatssummary_19_boosted_trees_boostedtreesbucketize_19"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 7
              }
              dim {
                size: 100
              }
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "max_splits"
        value {
          i: 7
        }
      }
      attr {
        key: "num_buckets"
        value {
          i: 100
        }
      }
      attr {
        key: "num_features"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "Squeeze_19"
      op: "Squeeze"
      input: "BoostedTreesMakeStatsSummary_19:stats_summary:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 7
              }
              dim {
                size: 100
              }
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "squeeze_dims"
        value {
          list {
            i: 0
          }
        }
      }
    }
    node_def {
      name: "BoostedTreesMakeStatsSummary_20"
      op: "BoostedTreesMakeStatsSummary"
      input: "boostedtreesmakestatssummary_boosted_trees_boostedtreestrainingpredict"
      input: "mul:z:0"
      input: "mul_2:z:0"
      input: "boostedtreesmakestatssummary_20_boosted_trees_unstack_7"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 7
              }
              dim {
                size: 2
              }
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "max_splits"
        value {
          i: 7
        }
      }
      attr {
        key: "num_buckets"
        value {
          i: 2
        }
      }
      attr {
        key: "num_features"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "Squeeze_20"
      op: "Squeeze"
      input: "BoostedTreesMakeStatsSummary_20:stats_summary:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 7
              }
              dim {
                size: 2
              }
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "squeeze_dims"
        value {
          list {
            i: 0
          }
        }
      }
    }
    node_def {
      name: "BoostedTreesMakeStatsSummary_21"
      op: "BoostedTreesMakeStatsSummary"
      input: "boostedtreesmakestatssummary_boosted_trees_boostedtreestrainingpredict"
      input: "mul:z:0"
      input: "mul_2:z:0"
      input: "boostedtreesmakestatssummary_21_boosted_trees_unstack_7"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 7
              }
              dim {
                size: 2
              }
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "max_splits"
        value {
          i: 7
        }
      }
      attr {
        key: "num_buckets"
        value {
          i: 2
        }
      }
      attr {
        key: "num_features"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "Squeeze_21"
      op: "Squeeze"
      input: "BoostedTreesMakeStatsSummary_21:stats_summary:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 7
              }
              dim {
                size: 2
              }
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "squeeze_dims"
        value {
          list {
            i: 0
          }
        }
      }
    }
    node_def {
      name: "BoostedTreesMakeStatsSummary_22"
      op: "BoostedTreesMakeStatsSummary"
      input: "boostedtreesmakestatssummary_boosted_trees_boostedtreestrainingpredict"
      input: "mul:z:0"
      input: "mul_2:z:0"
      input: "boostedtreesmakestatssummary_22_boosted_trees_unstack_7"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 7
              }
              dim {
                size: 2
              }
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "max_splits"
        value {
          i: 7
        }
      }
      attr {
        key: "num_buckets"
        value {
          i: 2
        }
      }
      attr {
        key: "num_features"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "Squeeze_22"
      op: "Squeeze"
      input: "BoostedTreesMakeStatsSummary_22:stats_summary:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 7
              }
              dim {
                size: 2
              }
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "squeeze_dims"
        value {
          list {
            i: 0
          }
        }
      }
    }
    node_def {
      name: "BoostedTreesMakeStatsSummary_23"
      op: "BoostedTreesMakeStatsSummary"
      input: "boostedtreesmakestatssummary_boosted_trees_boostedtreestrainingpredict"
      input: "mul:z:0"
      input: "mul_2:z:0"
      input: "boostedtreesmakestatssummary_23_boosted_trees_unstack_7"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 7
              }
              dim {
                size: 2
              }
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "max_splits"
        value {
          i: 7
        }
      }
      attr {
        key: "num_buckets"
        value {
          i: 2
        }
      }
      attr {
        key: "num_features"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "Squeeze_23"
      op: "Squeeze"
      input: "BoostedTreesMakeStatsSummary_23:stats_summary:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 7
              }
              dim {
                size: 2
              }
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "squeeze_dims"
        value {
          list {
            i: 0
          }
        }
      }
    }
    node_def {
      name: "BoostedTreesMakeStatsSummary_24"
      op: "BoostedTreesMakeStatsSummary"
      input: "boostedtreesmakestatssummary_boosted_trees_boostedtreestrainingpredict"
      input: "mul:z:0"
      input: "mul_2:z:0"
      input: "boostedtreesmakestatssummary_24_boosted_trees_unstack_7"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 7
              }
              dim {
                size: 2
              }
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "max_splits"
        value {
          i: 7
        }
      }
      attr {
        key: "num_buckets"
        value {
          i: 2
        }
      }
      attr {
        key: "num_features"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "Squeeze_24"
      op: "Squeeze"
      input: "BoostedTreesMakeStatsSummary_24:stats_summary:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 7
              }
              dim {
                size: 2
              }
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "squeeze_dims"
        value {
          list {
            i: 0
          }
        }
      }
    }
    node_def {
      name: "BoostedTreesMakeStatsSummary_25"
      op: "BoostedTreesMakeStatsSummary"
      input: "boostedtreesmakestatssummary_boosted_trees_boostedtreestrainingpredict"
      input: "mul:z:0"
      input: "mul_2:z:0"
      input: "boostedtreesmakestatssummary_25_boosted_trees_unstack_7"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 7
              }
              dim {
                size: 2
              }
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "max_splits"
        value {
          i: 7
        }
      }
      attr {
        key: "num_buckets"
        value {
          i: 2
        }
      }
      attr {
        key: "num_features"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "Squeeze_25"
      op: "Squeeze"
      input: "BoostedTreesMakeStatsSummary_25:stats_summary:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 7
              }
              dim {
                size: 2
              }
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "squeeze_dims"
        value {
          list {
            i: 0
          }
        }
      }
    }
    node_def {
      name: "BoostedTreesMakeStatsSummary_26"
      op: "BoostedTreesMakeStatsSummary"
      input: "boostedtreesmakestatssummary_boosted_trees_boostedtreestrainingpredict"
      input: "mul:z:0"
      input: "mul_2:z:0"
      input: "boostedtreesmakestatssummary_26_boosted_trees_unstack_21"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 7
              }
              dim {
                size: 2
              }
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "max_splits"
        value {
          i: 7
        }
      }
      attr {
        key: "num_buckets"
        value {
          i: 2
        }
      }
      attr {
        key: "num_features"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "Squeeze_26"
      op: "Squeeze"
      input: "BoostedTreesMakeStatsSummary_26:stats_summary:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 7
              }
              dim {
                size: 2
              }
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "squeeze_dims"
        value {
          list {
            i: 0
          }
        }
      }
    }
    node_def {
      name: "BoostedTreesMakeStatsSummary_27"
      op: "BoostedTreesMakeStatsSummary"
      input: "boostedtreesmakestatssummary_boosted_trees_boostedtreestrainingpredict"
      input: "mul:z:0"
      input: "mul_2:z:0"
      input: "boostedtreesmakestatssummary_27_boosted_trees_unstack_21"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 7
              }
              dim {
                size: 2
              }
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "max_splits"
        value {
          i: 7
        }
      }
      attr {
        key: "num_buckets"
        value {
          i: 2
        }
      }
      attr {
        key: "num_features"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "Squeeze_27"
      op: "Squeeze"
      input: "BoostedTreesMakeStatsSummary_27:stats_summary:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 7
              }
              dim {
                size: 2
              }
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "squeeze_dims"
        value {
          list {
            i: 0
          }
        }
      }
    }
    node_def {
      name: "cond/ReadVariableOp"
      op: "ReadVariableOp"
      input: "cond_readvariableop_boosted_trees_center_bias_needed"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_BOOL
        }
      }
    }
    node_def {
      name: "cond"
      op: "If"
      input: "cond/ReadVariableOp:value:0"
      input: "mul:z:0"
      input: "mul_2:z:0"
      input: "cond_boosted_trees_conditional_accumulator_2"
      input: "cond_boosted_trees_stamp_token"
      input: "cond_boosted_trees"
      input: "cond_readvariableop_boosted_trees_center_bias_needed"
      input: "cond_boosted_trees_conditional_accumulator"
      input: "cond_boosted_trees_conditional_accumulator_1"
      input: "Squeeze:output:0"
      input: "Squeeze_1:output:0"
      input: "Squeeze_2:output:0"
      input: "Squeeze_3:output:0"
      input: "Squeeze_4:output:0"
      input: "Squeeze_5:output:0"
      input: "Squeeze_6:output:0"
      input: "Squeeze_7:output:0"
      input: "Squeeze_8:output:0"
      input: "Squeeze_9:output:0"
      input: "Squeeze_10:output:0"
      input: "Squeeze_11:output:0"
      input: "Squeeze_12:output:0"
      input: "Squeeze_13:output:0"
      input: "Squeeze_14:output:0"
      input: "Squeeze_15:output:0"
      input: "Squeeze_16:output:0"
      input: "Squeeze_17:output:0"
      input: "Squeeze_18:output:0"
      input: "Squeeze_19:output:0"
      input: "Squeeze_20:output:0"
      input: "Squeeze_21:output:0"
      input: "Squeeze_22:output:0"
      input: "Squeeze_23:output:0"
      input: "Squeeze_24:output:0"
      input: "Squeeze_25:output:0"
      input: "Squeeze_26:output:0"
      input: "Squeeze_27:output:0"
      input: "cond_boosted_trees_last_layer_nodes_range"
      attr {
        key: "Tcond"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_RESOURCE
            type: DT_INT64
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_INT32
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_BOOL
          }
        }
      }
      attr {
        key: "_lower_using_switch_merge"
        value {
          b: true
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "else_branch"
        value {
          func {
            name: "cond_false_686"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "then_branch"
        value {
          func {
            name: "cond_true_685"
          }
        }
      }
    }
    node_def {
      name: "cond/Identity"
      op: "Identity"
      input: "cond:output:0"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      input: "^cond/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 1
          }
        }
      }
    }
    node_def {
      name: "AssignAddVariableOp"
      op: "AssignAddVariableOp"
      input: "assignaddvariableop_global_step"
      input: "Const:output:0"
      attr {
        key: "_output_shapes"
        value {
          list {
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
    }
    node_def {
      name: "grow_op"
      op: "NoOp"
      input: "^AssignAddVariableOp"
      input: "^cond/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
          }
        }
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "identity_head_cond_readvariableop"
      input: "^grow_op"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 1
            }
          }
          shape {
            dim {
              size: -1
            }
          }
          shape {
            dim {
              size: -1
            }
          }
          shape {
            dim {
              size: -1
            }
          }
          shape {
            dim {
              size: -1
            }
          }
          shape {
            dim {
              size: -1
            }
          }
          shape {
            dim {
              size: -1
            }
          }
          shape {
            dim {
              size: -1
            }
          }
          shape {
            dim {
              size: -1
            }
          }
          shape {
            dim {
              size: -1
            }
          }
          shape {
            dim {
              size: -1
            }
          }
          shape {
            dim {
              size: -1
            }
          }
          shape {
            dim {
              size: -1
            }
          }
          shape {
            dim {
              size: -1
            }
          }
          shape {
            dim {
              size: -1
            }
          }
          shape {
            dim {
              size: -1
            }
          }
          shape {
            dim {
              size: -1
            }
          }
          shape {
            dim {
              size: -1
            }
          }
          shape {
            dim {
              size: -1
            }
          }
          shape {
            dim {
              size: -1
            }
          }
          shape {
            dim {
              size: -1
            }
          }
          shape {
            dim {
              size: -1
            }
          }
          shape {
            dim {
              size: -1
            }
          }
          shape {
            dim {
              size: -1
            }
          }
          shape {
            dim {
              size: -1
            }
          }
          shape {
            dim {
              size: -1
            }
          }
          shape {
            dim {
              size: -1
            }
          }
          shape {
            dim {
              size: -1
            }
          }
          shape {
            dim {
              size: -1
            }
          }
          shape {
            dim {
              size: -1
            }
          }
          shape {
            dim {
              size: -1
            }
          }
          shape {
            unknown_rank: true
          }
          shape {
            unknown_rank: true
          }
          shape {
          }
          shape {
            unknown_rank: true
          }
          shape {
            unknown_rank: true
          }
          shape {
            unknown_rank: true
          }
          shape {
            dim {
              size: 2
            }
          }
          shape {
            unknown_rank: true
          }
          shape {
          }
          shape {
            dim {
              size: -1
            }
          }
          shape {
            dim {
              size: -1
            }
          }
          shape {
            dim {
              size: -1
            }
          }
          shape {
            dim {
              size: -1
            }
          }
          shape {
            dim {
              size: -1
            }
          }
          shape {
            dim {
              size: -1
            }
          }
          shape {
            dim {
              size: -1
            }
          }
          shape {
            dim {
              size: -1
            }
          }
          shape {
            dim {
              size: -1
            }
          }
          shape {
            dim {
              size: -1
            }
          }
          shape {
            dim {
              size: -1
            }
          }
          shape {
            dim {
              size: -1
            }
          }
          shape {
            dim {
              size: -1
            }
          }
          shape {
            dim {
              size: -1
            }
          }
          shape {
            dim {
              size: -1
            }
          }
          shape {
            dim {
              size: -1
            }
          }
          shape {
            dim {
              size: -1
            }
          }
          shape {
            dim {
              size: -1
            }
          }
          shape {
            dim {
              size: -1
            }
          }
          shape {
            dim {
              size: -1
            }
          }
          shape {
            dim {
              size: 1
            }
          }
          shape {
            unknown_rank: true
          }
          shape {
            unknown_rank: true
          }
        }
      }
    }
    arg_attr {
      value {
      }
    }
    arg_attr {
      key: 1
      value {
      }
    }
    arg_attr {
      key: 2
      value {
      }
    }
    arg_attr {
      key: 3
      value {
      }
    }
    arg_attr {
      key: 4
      value {
      }
    }
    arg_attr {
      key: 5
      value {
      }
    }
    arg_attr {
      key: 6
      value {
      }
    }
    arg_attr {
      key: 7
      value {
      }
    }
    arg_attr {
      key: 8
      value {
      }
    }
    arg_attr {
      key: 9
      value {
      }
    }
    arg_attr {
      key: 10
      value {
      }
    }
    arg_attr {
      key: 11
      value {
      }
    }
    arg_attr {
      key: 12
      value {
      }
    }
    arg_attr {
      key: 13
      value {
      }
    }
    arg_attr {
      key: 14
      value {
      }
    }
    arg_attr {
      key: 15
      value {
      }
    }
    arg_attr {
      key: 16
      value {
      }
    }
    arg_attr {
      key: 17
      value {
      }
    }
    arg_attr {
      key: 18
      value {
      }
    }
    arg_attr {
      key: 19
      value {
      }
    }
    arg_attr {
      key: 20
      value {
      }
    }
    arg_attr {
      key: 21
      value {
      }
    }
    arg_attr {
      key: 22
      value {
      }
    }
    arg_attr {
      key: 23
      value {
      }
    }
    arg_attr {
      key: 24
      value {
      }
    }
    arg_attr {
      key: 25
      value {
      }
    }
    arg_attr {
      key: 26
      value {
      }
    }
    arg_attr {
      key: 27
      value {
      }
    }
    arg_attr {
      key: 28
      value {
      }
    }
    arg_attr {
      key: 29
      value {
      }
    }
    arg_attr {
      key: 30
      value {
      }
    }
    arg_attr {
      key: 31
      value {
      }
    }
    arg_attr {
      key: 32
      value {
      }
    }
    arg_attr {
      key: 33
      value {
      }
    }
    arg_attr {
      key: 34
      value {
      }
    }
    arg_attr {
      key: 35
      value {
      }
    }
    arg_attr {
      key: 36
      value {
      }
    }
    arg_attr {
      key: 37
      value {
      }
    }
    arg_attr {
      key: 38
      value {
      }
    }
    arg_attr {
      key: 39
      value {
      }
    }
    arg_attr {
      key: 40
      value {
      }
    }
    arg_attr {
      key: 41
      value {
      }
    }
    arg_attr {
      key: 42
      value {
      }
    }
    arg_attr {
      key: 43
      value {
      }
    }
    arg_attr {
      key: 44
      value {
      }
    }
    arg_attr {
      key: 45
      value {
      }
    }
    arg_attr {
      key: 46
      value {
      }
    }
    arg_attr {
      key: 47
      value {
      }
    }
    arg_attr {
      key: 48
      value {
      }
    }
    arg_attr {
      key: 49
      value {
      }
    }
    arg_attr {
      key: 50
      value {
      }
    }
    arg_attr {
      key: 51
      value {
      }
    }
    arg_attr {
      key: 52
      value {
      }
    }
    arg_attr {
      key: 53
      value {
      }
    }
    arg_attr {
      key: 54
      value {
      }
    }
    arg_attr {
      key: 55
      value {
      }
    }
    arg_attr {
      key: 56
      value {
      }
    }
    arg_attr {
      key: 57
      value {
      }
    }
    arg_attr {
      key: 58
      value {
      }
    }
    arg_attr {
      key: 59
      value {
      }
    }
    arg_attr {
      key: 60
      value {
      }
    }
    arg_attr {
      key: 61
      value {
      }
    }
    arg_attr {
      key: 62
      value {
      }
    }
  }
  function {
    signature {
      name: "UpdateQuantile_wait_until_quaniles_accumulated_true_1156"
      input_arg {
        name: "resourceaccumulatortakegradient_updatequantile_conditional_accumulator"
        type: DT_RESOURCE
      }
      input_arg {
        name: "boostedtreesquantilestreamresourceflush_boosted_trees_quantileaccumulator"
        type: DT_RESOURCE
      }
      input_arg {
        name: "assignvariableop_boosted_trees_are_boundaries_ready"
        type: DT_RESOURCE
      }
      input_arg {
        name: "identity_updatequantile_greaterequal"
        type: DT_BOOL
      }
      output_arg {
        name: "identity"
        type: DT_BOOL
      }
      is_stateful: true
    }
    node_def {
      name: "ResourceAccumulatorTakeGradient/num_required"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "ResourceAccumulatorTakeGradient"
      op: "ResourceAccumulatorTakeGradient"
      input: "resourceaccumulatortakegradient_updatequantile_conditional_accumulator"
      input: "ResourceAccumulatorTakeGradient/num_required:output:0"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "BoostedTreesQuantileStreamResourceFlush/num_buckets"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 100
          }
        }
      }
    }
    node_def {
      name: "BoostedTreesQuantileStreamResourceFlush"
      op: "BoostedTreesQuantileStreamResourceFlush"
      input: "boostedtreesquantilestreamresourceflush_boosted_trees_quantileaccumulator"
      input: "BoostedTreesQuantileStreamResourceFlush/num_buckets:output:0"
      attr {
        key: "_output_shapes"
        value {
          list {
          }
        }
      }
      attr {
        key: "generate_quantiles"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_BOOL
            tensor_shape {
            }
            bool_val: true
          }
        }
      }
    }
    node_def {
      name: "AssignVariableOp"
      op: "AssignVariableOp"
      input: "assignvariableop_boosted_trees_are_boundaries_ready"
      input: "Const:output:0"
      attr {
        key: "_output_shapes"
        value {
          list {
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_BOOL
        }
      }
    }
    node_def {
      name: "group_deps"
      op: "NoOp"
      input: "^AssignVariableOp"
      input: "^BoostedTreesQuantileStreamResourceFlush"
      input: "^ResourceAccumulatorTakeGradient"
      attr {
        key: "_output_shapes"
        value {
          list {
          }
        }
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "identity_updatequantile_greaterequal"
      input: "^group_deps"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            unknown_rank: true
          }
          shape {
            unknown_rank: true
          }
          shape {
            unknown_rank: true
          }
          shape {
          }
        }
      }
    }
    arg_attr {
      value {
      }
    }
    arg_attr {
      key: 1
      value {
      }
    }
    arg_attr {
      key: 2
      value {
      }
    }
    arg_attr {
      key: 3
      value {
      }
    }
  }
}
versions {
  producer: 134
  min_consumer: 12
}
